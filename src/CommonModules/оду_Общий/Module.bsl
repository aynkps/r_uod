//ОМ.оду_Общий 
//Основная механика обмена

#Область ОбработчикиПодписокНаСобытия

Процедура РегистрацияДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 

	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура РегистрацияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

//Справочники, ПВХ
Процедура РегистрацияПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 

	//Сброс повторного использования при записи
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.оду_БазыУчастникиОбмена") ИЛИ
		 ТипЗнч(Источник) = Тип("СправочникОбъект.оду_НастройкаКонвертацииДанных") ИЛИ 
		 ТипЗнч(Источник) = Тип("СправочникОбъект.оду_ПравилаРегистрацииОбмена") Тогда
		ОбновитьПовторноИспользуемыеЗначения();	
	КонецЕсли;
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ);

	
КонецПроцедуры

Процедура РегистрацияПередУдалением(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен ИЛИ Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрироватьИсточникОбмена = РегистрироватьИсточникОбмена(Источник);
	Если РегистрироватьИсточникОбмена = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Модуль.ЗарегистрироватьУдалениеПередУдалением(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти   
 
#Область  ПрограммныйИнтерфейс

//TODO:  Добавить регистрацию при изменении настроек УО
//В случае копии базы переписать текущие базы
Процедура ПроверкаУзловОбмена()	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ТекущаяБД,
		|	&СерверИБ КАК Сервер,
		|	&ИмяИБ КАК Код
		|ПОМЕСТИТЬ ВТ_НачальныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущиеДанные.ТекущаяБД КАК ТекущаяБД,
		|	ВТ_ТекущиеДанные.Сервер КАК Сервер,
		|	ВТ_ТекущиеДанные.Код КАК Код,
		|	оду_НастройкиИнформационнойБазы.ИмяРабочейБД ЕСТЬ НЕ NULL  КАК ЭтоРабочаяБД
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	ВТ_НачальныеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|		ПО ВТ_ТекущиеДанные.Код = оду_НастройкиИнформационнойБазы.ИмяРабочейБД
		|			И ВТ_ТекущиеДанные.Сервер = оду_НастройкиИнформационнойБазы.СерверРабочейБД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ТекущаяБД,
		|	оду_БазыУчастникиОбмена.ТекущаяБД КАК ТекущаяБД_Было,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер <> ВТ_ТекущиеДанные.Сервер
		//|			И оду_БазыУчастникиОбмена.Код <> ВТ_ТекущиеДанные.Код
		|			ИЛИ оду_БазыУчастникиОбмена.Код <> ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И ВТ_ТекущиеДанные.ЭтоРабочаяБД ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка,
		|	ИСТИНА,
		|	оду_БазыУчастникиОбмена.ТекущаяБД,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер,
		|	оду_БазыУчастникиОбмена.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер = ВТ_ТекущиеДанные.Сервер
		|			И оду_БазыУчастникиОбмена.Код = ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	(оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|				И ВТ_ТекущиеДанные.ЭтоРабочаяБД <> оду_БазыУчастникиОбмена.ЭтоРабочаяБД
		|			ИЛИ ВТ_ТекущиеДанные.ТекущаяБД = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ТекущаяБД,
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	ВТ_ТекущиеДанные.Сервер,
		|	ВТ_ТекущиеДанные.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ПО ВТ_ТекущиеДанные.Сервер = оду_БазыУчастникиОбмена.Сервер
		|			И ВТ_ТекущиеДанные.Код = оду_БазыУчастникиОбмена.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка ЕСТЬ NULL";
	
	СтруктураИБ = пр_Общий.ПолучитьСтруктуруАдресаИнформационнойБазы();
	Запрос.УстановитьПараметр("ИмяИБ", СтруктураИБ.ИмяИБ);
	Запрос.УстановитьПараметр("СерверИБ", СтруктураИБ.СерверИБ);
	//Запрос.УстановитьПараметр("ЭтоРабочаяБД", СтруктураИБ.ЭтоРабочаяБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		ЭтоНовыйУчастник = Ложь;
		Если ЗначениеЗаполнено(ВДЗ.Ссылка)  Тогда
			УзелОбъект = ВДЗ.Ссылка.ПолучитьОбъект();
		Иначе
			УзелОбъект = Справочники.оду_БазыУчастникиОбмена.СоздатьЭлемент();
			ИД = Новый УникальныйИдентификатор;
			СсылкаНов = Справочники.оду_БазыУчастникиОбмена.ПолучитьСсылку(ИД);
			УзелОбъект.ИДБазы = ИД;
			УзелОбъект.УстановитьСсылкуНового(СсылкаНов);
			ЗаполнитьЗначенияСвойств(УзелОбъект, ВДЗ);
			ЭтоНовыйУчастник = Истина;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(УзелОбъект.Порт) Тогда 
			УзелОбъект.Порт = 80; // По умолчанию
		КонецЕсли;	                                  
		
//TODO:  Добавить регистрацию при изменении настроек УО И отправку в места использования
		Если ВДЗ.ТекущаяБД_Было = Истина Тогда 
			УзелОбъект.ПометкаУдаления = Истина; 
			УзелОбъект.Используется = Ложь; 
		КонецЕсли;	
		
		УзелОбъект.ИДКонфигурации = пр_Общий.ИДКонфигурации();
		УзелОбъект.ТекущаяБД = ВДЗ.ТекущаяБД;
		УзелОбъект.ЭтоРабочаяБД = ВДЗ.ЭтоРабочаяБД;
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		
		ДанныеПользователя = СоздатьСлужебногоПользователяДляРаботыСОбменом();
		Если ДанныеПользователя <> Неопределено Тогда
			УзелОбъект.Пользователь = ДанныеПользователя.Пользователь; 	
			УзелОбъект.Пароль 		= ДанныеПользователя.Пароль; 	
		КонецЕсли; 
		
		УзелОбъект.Записать();
		
	КонецЦикла
	
КонецПроцедуры

//TODO:  Доработка возврата пароля
Функция СоздатьСлужебногоПользователяДляРаботыСОбменом() Экспорт
	
	ДанныеПользователя = Новый Структура("Пользователь, Пароль", Неопределено, ""); 
	
	УстановитьПривилегированныйРежим(Истина);
	//Если ОбщегоНазначения.РазделениеВключено()
	//	И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	//	Возврат ДанныеПользователя;
	//КонецЕсли;
	
	Логин = "uExchange";
	//Пароль = "exchange-a9a7-405f-a5df-19e734c712c7";
	Пароль = "exc-a9a7";
	ИдентификаторПользователяИБ = "7e7c7c77-1a0d-4a5d-b8d3-777cd57c7777";
	
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	
	Если ПользовательИзСправочника <> Неопределено Тогда
		//ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВДЗ.ИдентификаторПользователяИБ);
		//Пароль = ПользовательИБ.СохраняемоеЗначениеПароля();
		ДанныеПользователя.Пользователь = ПользовательИзСправочника;
		ДанныеПользователя.Пароль = Пароль;
		Возврат ДанныеПользователя;
		
	КонецЕсли;
	
	Попытка
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = Логин;
		ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='uExchange'");
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.Пароль = Пароль;
		
		Роли = Новый Массив;
		Роли.Добавить("АдминистраторСистемы");
		Роли.Добавить("ПолныеПрава");
		Роли.Добавить("оду_Администрирование");
		ОписаниеПользователяИБ.Роли = Роли;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		УИД = Новый УникальныйИдентификатор(ИдентификаторПользователяИБ);
		СсылкаНовПользователя = Справочники.Пользователи.ПолучитьСсылку(УИД);
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНовПользователя);
		НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();
		
		ДанныеПользователя.Пользователь = СсылкаНовПользователя;
		ДанныеПользователя.Пароль = Пароль;
		
		Возврат  ДанныеПользователя;
		
	Исключение
		
		МетаданныеОбъекта = Метаданные.Справочники.Пользователи;
		ТекстОшибки = НСтр("ru = 'Не удалось создать служебного пользователя по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстОшибки);
		ТекстСообщения = НСтр("ru = 'При создании служебного пользователя для получения уведомлений от сервиса ЭДО произошла ошибка: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ДанныеПользователя;
	
КонецФункции

//Для создание нового УО
Функция СтруктураДанныхЭтойБазы() Экспорт
	
	//Проверка настроек
	ПроверкаУзловОбмена();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//|	оду_БазыУчастникиОбмена.Ссылка КАК БазаДанных,
		//|	оду_БазыУчастникиОбмена.Используется КАК Используется,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы,
		|	оду_БазыУчастникиОбмена.ТекущаяБД КАК ТекущаяБД,
		|	оду_БазыУчастникиОбмена.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт,
		|	оду_БазыУчастникиОбмена.Пользователь КАК Пользователь,
		|	оду_БазыУчастникиОбмена.Пароль КАК Пароль,
		//|	оду_БазыУчастникиОбмена.ИспользоватьПоддержкуРавныхОстатков КАК ИспользоватьПоддержкуРавныхОстатков,
		|	оду_БазыУчастникиОбмена.ИДКонфигурации КАК ИДКонфигурации,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		//|	оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных КАК ИспользоватьРегламентВыгрузкиДанных,
		//|	оду_БазыУчастникиОбмена.ИспользоватьРегламентЗагрузкиДанных КАК ИспользоватьРегламентЗагрузкиДанных,
		//|	оду_БазыУчастникиОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_БазыУчастникиОбмена.Состав.(
		|		Объект КАК Объект,
		|		ТипXMLОбъектаИсточника КАК ТипXMLОбъектаПриемника,
		|		ТипXMLОбъектаПриемника КАК ТипXMLОбъектаИсточника,
		|		Регистрировать КАК Регистрировать,
		|		ИспользоватьСамолет КАК ИспользоватьСамолет,
		|		НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена
		|	) КАК Состав,
		|	оду_БазыУчастникиОбмена.Организации.(
		|		ТипXMLОбъектаИсточника КАК ТипXMLОбъектаПриемника,
		|		ИДОбъектаИсточника КАК ИДОбъектаПриемника,
		|		ТипXMLОбъектаПриемника КАК ТипXMLОбъектаИсточника,
		|		ИДОбъектаПриемника КАК ИДОбъектаИсточника
		|	) КАК Организации,
		|	оду_БазыУчастникиОбмена.КонтрольОстатков.(
		|		Объект КАК Объект,
		|		ТипXMLОбъектаИсточника КАК ТипXMLОбъектаПриемника,
		|		ТипXMLОбъектаПриемника КАК ТипXMLОбъектаИсточника,
		|		Контролировать КАК Контролировать
		|	) КАК КонтрольОстатков
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА";
		
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Данные = пр_Общий.СтруктураПоЗапросу(РЗ);
	
	ВДЗ = РЗ.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		Данные.Удалить("Организации");	
		organization = пр_Общий.МассивСтруктурПоЗапросу(ВДЗ.Организации);
		Данные.Вставить("organization", organization); 
		
		Данные.Удалить("КонтрольОстатков");	
		controlBalances = пр_Общий.МассивСтруктурПоЗапросу(ВДЗ.КонтрольОстатков);
		Если controlBalances <> Неопределено Тогда
			Для каждого СтрДанных Из controlBalances Цикл   
				СтрДанных.Объект = XMLСтрока(СтрДанных.Объект); 
			КонецЦикла; 
		КонецЕсли;
		Данные.Вставить("controlBalances", controlBalances);
		
		Данные.Удалить("Состав");	
		structureExchange = пр_Общий.МассивСтруктурПоЗапросу(ВДЗ.Состав);
		Данные.Вставить("structureExchange", structureExchange);
	КонецЦикла;

	Возврат Данные;
	
КонецФункции 

Процедура ЗаписатьОшибкиОбменаИзМассива(МассивОшибок, Удалить = Ложь)   Экспорт
	Для каждого Стр Из МассивОшибок Цикл
		РезультатЗаписиОшибкиОбмена(Стр, Удалить);
	КонецЦикла; 
КонецПроцедуры


Функция РезультатЗаписиОшибкиОбмена(СтруктураПараметровЗаписиОшибки, Удалить = Ложь, ОбъектОбмена = Неопределено, ЭтоИсточник = Ложь)   Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_ОшибкиОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ИДОбъекта", СтруктураПараметровЗаписиОшибки.ИДОбъекта);
		ЭлементБлокировки.УстановитьЗначение("ИДБазыИсточник", СтруктураПараметровЗаписиОшибки.ИДБазыИсточник);
		ЭлементБлокировки.УстановитьЗначение("ИДБазыПриемник", СтруктураПараметровЗаписиОшибки.ИДБазыПриемник);
		Блокировка.Заблокировать(); 
		
		Если Удалить = Истина Тогда
			
			МассивФайловОбмена = Новый Массив;
			Набор = РегистрыСведений.оду_ОшибкиОбмена.СоздатьНаборЗаписей();
			Набор.Отбор.ИДОбъекта.Установить(СтруктураПараметровЗаписиОшибки.ИДОбъекта);
			Набор.Отбор.ИДБазыИсточник.Установить(СтруктураПараметровЗаписиОшибки.ИДБазыИсточник);
			Набор.Отбор.ИДБазыПриемник.Установить(СтруктураПараметровЗаписиОшибки.ИДБазыПриемник);
			Набор.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых", Истина);	
				
			Если ЭтоИсточник = Истина Тогда
				МассивФайловОбмена = Новый Массив;
				Набор.Прочитать();
				Для каждого Запись Из Набор Цикл
					ИмяФайлаОбмена = Запись.ИмяФайлаОбмена;
					Если ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
						Если  МассивФайловОбмена.Найти(ИмяФайлаОбмена) = Неопределено Тогда
							МассивФайловОбмена.Добавить(ИмяФайлаОбмена);
						КонецЕсли; 
					КонецЕсли; 
					Набор.Удалить(Запись);
				КонецЦикла; 
				
				РезультатОчисткиФайловОбмена(МассивФайловОбмена);
			Иначе	
				Набор.Записать();
			КонецЕсли;
			
		Иначе
			
			Запись = РегистрыСведений.оду_ОшибкиОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметровЗаписиОшибки);
			
			Если НЕ ЗначениеЗаполнено(Запись.ОбъектОбмена) Тогда
				Если ОбъектОбмена <> Неопределено Тогда
					Если ЗначениеЗаполнено(ОбъектОбмена)  Тогда
						Запись.ОбъектОбмена = ОбъектОбмена.Ссылка;
					ИначеЕсли Запись.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() И ЗначениеЗаполнено(Запись.ТипXMLОбъектаИсточника)  Тогда
						Запись.ОбъектОбмена = пр_Общий.СсылкаПоТипXML(Запись.ТипXMLОбъектаИсточника, Запись.ИДОбъекта);
					ИначеЕсли  Запись.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() И ЗначениеЗаполнено(Запись.ТипXMLОбъектаПриемника) Тогда 	
						Запись.ОбъектОбмена = пр_Общий.СсылкаПоТипXML(Запись.ТипXMLОбъектаПриемника, Запись.ИДОбъекта);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Запись.Период)  Тогда
				Запись.Период = ТекущаяДатаСеанса();
			КонецЕсли; 
			Запись.Записать();
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		//TODO:  Подумать
		//Если ЗначениеЗаполнено(СтруктураПараметровЗаписиОшибки.ИмяФайлаОбмена)  Тогда
		//	УдалитьФайлы(СтруктураПараметровЗаписиОшибки.ИмяФайлаОбмена);
		//КонецЕсли; 	
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 

Функция РезультатОчисткиФайловОбмена(МассивФайловОбмена)  Экспорт
	
	Если МассивФайловОбмена.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Для каждого ИмяФайлаОбмена Из МассивФайловОбмена Цикл
		Попытка
			УдалитьФайлы(ИмяФайлаОбмена);
		Исключение
			пр_Ошибка = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = пр_Ошибка;
			Сообщение.Сообщить(); 
			ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиФайловОбмена", , пр_Ошибка);
		КонецПопытки;
	КонецЦикла; 
	
	////Очистить файлы выгрузки КД, при удалении записи
	////Запись пустого, запись значений, либо удаление
	//Если ЭтотОбъект.Количество() = 0 Тогда 
	//
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ Различные
	//		|	оду_ОшибкиОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена
	//		|ИЗ
	//		|	РегистрСведений.оду_ОшибкиОбмена КАК оду_ОшибкиОбмена
	//		|ГДЕ
	//		|	оду_ОшибкиОбмена.ИДОбъекта = &ИДОбъекта
	//		|	И оду_ОшибкиОбмена.ИДБазыИсточник = &ИДБазыИсточник
	//		|	И оду_ОшибкиОбмена.ИДБазыПриемник = &ИДБазыПриемник";

	//	Запрос.УстановитьПараметр("ИДБазыИсточник", Отбор.ИДБазыИсточник.Значение);
	//	Запрос.УстановитьПараметр("ИДБазыПриемник", Отбор.ИДБазыПриемник.Значение);
	//	Запрос.УстановитьПараметр("ИДОбъекта",  Отбор.ИДОбъекта.Значение);

	//	РезультатЗапроса = Запрос.Выполнить();

	//	ВДЗ = РезультатЗапроса.Выбрать();
	//	
	//	Если ВДЗ.Следующий() Тогда
	//		Если ЗначениеЗаполнено(ВДЗ.ИмяФайлаОбмена)  Тогда
	//			Попытка
	//				УдалитьФайлы(ВДЗ.ИмяФайлаОбмена);
	//			Исключение
	//				пр_Ошибка = ОписаниеОшибки();
	//				Сообщение = Новый СообщениеПользователю;
	//				Сообщение.Текст = пр_Ошибка;
	//				Сообщение.Сообщить(); 
	//				оду_Общий.ОтправитьСообщениеВТелеграмExchange("РСоду_ОшибкиОбменаПередЗаписью", , пр_Ошибка);
	//			КонецПопытки;
	//		КонецЕсли; 	
	//	КонецЕсли; 
	//КонецЕсли;
	
КонецФункции 


Функция оду_ИспользоватьУниверсальныйОбмен()	Экспорт
	УстановитьПривилегированныйРежим(Истина);
	оду_ИспользоватьУниверсальныйОбмен = ПолучитьФункциональнуюОпцию("оду_ИспользоватьУниверсальныйОбмен");
	Возврат  оду_ИспользоватьУниверсальныйОбмен;
КонецФункции

//Стандартные действия 
//Признак из КД 21
Функция РегистрироватьИсточникОбмена(Источник) Экспорт
	
	ЭтоЗагрузка = Источник.ОбменДанными.Загрузка;
	Если ЭтоЗагрузка = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОбмен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ЭтоОбмен", Ложь);
	Возврат НЕ ЭтоОбмен;

КонецФункции

Функция оду_РезультатЗаписиОшибкиОбработкиУОД(оду_ТаблицаСостоянийОбмена, Объект = Неопределено, СтрокаСообщенияОбОшибке, ОшибкаВПВД = Ложь)  Экспорт
	
	Попытка
		
		ОтправитьСообщениеВТелеграмExchange("УниверсальныйОбменДаннымиXML", Объект, СтрокаСообщенияОбОшибке);	
		
		Если Объект <> Неопределено Тогда
			
			оду_ИДОбъекта = XMLСтрока(Объект);
			оду_МСтр = оду_ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("ИДОбъекта", оду_ИДОбъекта));
			
			Если оду_МСтр.Количество() > 0 Тогда
				
				оду_Стр	= оду_МСтр[0];
				Если ОшибкаВПВД = Истина Тогда
					оду_МСтрМетаданных = оду_ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("ТипXMLОбъектаИсточника", оду_Стр.ТипXMLОбъектаИсточника));
					Для каждого Нстр Из оду_МСтрМетаданных Цикл
						Нстр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
						Нстр.Обработан = Истина;
						Нстр.НомерПопытки = Нстр.НомерПопытки;
						Результат = РезультатЗаписиОшибкиОбмена(Нстр);
					КонецЦикла; 
				Иначе	
					оду_Стр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
					оду_Стр.Обработан = Истина;
					Результат = РезультатЗаписиОшибкиОбмена(оду_Стр, , Объект);
				КонецЕсли; 
				
			Иначе
				Нстр = оду_ТаблицаСостоянийОбмена[0];	
				Нстр.ОписаниеОшибки = СтрокаСообщенияОбОшибке;
				Нстр.Обработан = Истина;
				Нстр.НомерПопытки = 1;
				Результат = РезультатЗаписиОшибкиОбмена(Нстр, , Объект);
			КонецЕсли; 
			
		КонецЕсли;
		
		Возврат   Результат;
		
	Исключение
		Возврат Ложь;		
	КонецПопытки;

КонецФункции 


//	КонфигурацияКонвертацииОбмена
//	ПОДИзФайла
//	ПутьКПОД
//	ПОДИзОбработкиБСП
//	ОбработкаОтладкиБСП
//	ПОД
//	РежимОтладки
Функция ПараметрыКонвертацииОбъекта()  Экспорт
	
	ПараметрыКонвертации = Новый Структура();
	ПараметрыКонвертации.Вставить("УО");  //Участник обмена  С.оду_БазыУчастникиОбмена
	ПараметрыКонвертации.Вставить("ДанныеОбмена");
	ПараметрыКонвертации.Вставить("ОбъектОбмена");
	ПараметрыКонвертации.Вставить("КонфигурацияКонвертацииОбмена", Неопределено);
	ПараметрыКонвертации.Вставить("РежимОтладки", Ложь);
	ПараметрыКонвертации.Вставить("ПОДИзФайла", Ложь);
	ПараметрыКонвертации.Вставить("ПутьКПОД", "");
	ПараметрыКонвертации.Вставить("ПОДИзОбработкиБСП", Ложь);
	ПараметрыКонвертации.Вставить("ИспользоватьОбработкуБСП", Ложь);
	ПараметрыКонвертации.Вставить("ОбработкаОтладкиБСП", Неопределено);
	ПараметрыКонвертации.Вставить("ИспользоватьНастройкиКонвертации", Ложь);
	ПараметрыКонвертации.Вставить("ВыгрузкаБезПроверкиРегистрации", Ложь);  //TODO:  Доделать проверку при выгрузке, когда выгрузка происходит сразу - чз обработку, без регистрации
	ПараметрыКонвертации.Вставить("НастройкаКонвертации", Неопределено);
	ПараметрыКонвертации.Вставить("ПОД", "");
	ПараметрыКонвертации.Вставить("ПутьКОбработкеОтладки", "");
	ПараметрыКонвертации.Вставить("ПутьКФайлуОбмена", "");
	ПараметрыКонвертации.Вставить("ТипХраненияФайла", "");
	ПараметрыКонвертации.Вставить("РежимОбмена", "");
	ПараметрыКонвертации.Вставить("ИмяПВД", "");
	ПараметрыКонвертации.Вставить("ЭтапЗапроса", 0);
	
	Возврат  ПараметрыКонвертации;
	
КонецФункции 

#КонецОбласти


#Область  HTTP_Сервис

#Область  МетодыHTTPЗапросов

Функция ping(Запрос)	Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(Строка(ТекущаяДата()));
	Возврат Ответ;
КонецФункции // ()

#Область  receiverData
 
//Передать и записать нового учасника обмена
Функция receiverData(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
				
		Результ = РезультатПроверкиЗаписиНовогоУчастникаОбмена(ТелоЗапроса);
		Если Результ = Ложь Тогда
			ОписаниеОшибки = "Не получилось записать нового участника обмена. Попытайтесь еще раз.";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		//ИначеЕсли Результ = "Уже записан" Тогда 
		//	Ответ = ЗаполненныйОтветHTTP(Результ, Неопределено, 201, Истина);
		//	Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(,Данные, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция РезультатПроверкиЗаписиНовогоУчастникаОбмена(ТелоЗапроса)  Экспорт
	
	Попытка
		
		УчастникОбмена = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ТелоЗапроса.ИДБазы);
		Если УчастникОбмена = Неопределено Тогда
			
			Результ = ПроверитьУдалитьНеИспользуемый(ТелоЗапроса);
			Если Результ = Ложь Тогда
				Возврат "Не удалось удалить не используемого участника обмена";
			КонецЕсли; 
			
			//Запишем нового участника обмена
			ИД = Новый УникальныйИдентификатор(ТелоЗапроса.ИДБазы);
			СслыкаНов = Справочники.оду_БазыУчастникиОбмена.ПолучитьСсылку(ИД);
			СслыкаНовОб = Справочники.оду_БазыУчастникиОбмена.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СслыкаНовОб, ТелоЗапроса); 
			СслыкаНовОб.УстановитьСсылкуНового(СслыкаНов);
			СслыкаНовОб.ТекущаяБД = Ложь;
			
			Если ЗначениеЗаполнено(ТелоЗапроса.organization) И ТипЗнч(ТелоЗапроса.organization) = Тип("Массив")  Тогда
				
				ТЧОрганиз = СслыкаНовОб.Организации; 
				Для каждого СтрДанных Из ТелоЗапроса.organization Цикл
					Стр = ТЧОрганиз.Добавить();	
					ЗаполнитьЗначенияСвойств(Стр, СтрДанных);
					Если ЗначениеЗаполнено(Стр.ТипXMLОбъектаИсточника) И ЗначениеЗаполнено(Стр.ИДОбъектаПриемника) Тогда
						Стр.Организация = пр_Общий.СсылкаПоТипXML(Стр.ТипXMLОбъектаИсточника, Стр.ИДОбъектаПриемника);
					КонецЕсли;
				КонецЦикла;		
			
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТелоЗапроса.controlBalances) И ТипЗнч(ТелоЗапроса.controlBalances) = Тип("Массив")  Тогда
				
				ТЧКонтрольОстатков = СслыкаНовОб.КонтрольОстатков; 
				Для каждого СтрДанных Из ТелоЗапроса.controlBalances Цикл
					Стр = ТЧКонтрольОстатков.Добавить();	
					ЗаполнитьЗначенияСвойств(Стр, СтрДанных);
					Если ЗначениеЗаполнено(Стр.ТипXMLОбъектаИсточника) И ЗначениеЗаполнено(Стр.Объект) Тогда
						Стр.Объект = пр_Общий.СсылкаПоТипXML(Стр.ТипXMLОбъектаИсточника, Стр.Объект);
					КонецЕсли;
				КонецЦикла;		
			
			КонецЕсли; 
			
			СслыкаНовОб.ОбменДанными.Загрузка = Истина;
			СслыкаНовОб.Записать();
			
			Возврат Истина;
			
		Иначе 
			//TODO:  Возможно требуется перезаписать
			Возврат "Уже записан";
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

Функция ПроверитьУдалитьНеИспользуемый(ТелоЗапроса)
	
	Попытка
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
			|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы
			|ИЗ
			|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
			|ГДЕ
			|	оду_БазыУчастникиОбмена.Код = &Код
			|	И оду_БазыУчастникиОбмена.Сервер = &Сервер";
		
		Запрос.УстановитьПараметр("Код", ТелоЗапроса.Код);
		Запрос.УстановитьПараметр("Сервер", ТелоЗапроса.Сервер);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Истина;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			УО = ВДЗ.Ссылка.ПолучитьОбъект();
			УО.Используется = Ложь;
			УО.Комментарий = УО.Комментарий + " Удален как не используемый";
			УО.УстановитьПометкуУдаления(Истина);
			Возврат Истина
		КонецЕсли; 
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		ОтправитьСообщениеВТелеграмExchange("ПроверитьУдалитьНеИспользуемый", , пр_Ошибка, , , , ТелоЗапроса);
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти

#Область  exchangeStatus

//Обмен состояними обмена
Функция exchangeStatus(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
		
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		Результ = РезультатОбновленияСостоянийОбмена(ТелоЗапроса);
		Если ТипЗнч(Результ) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(Результ, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, Результ, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция ТекстЗапросаОбновленияСостояниямиОбмена(Источник = Ложь, ТолькоОбновитьСостояния = Ложь)
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ТЗ.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ.РежимОбмена КАК РежимОбмена,
		|	ТЗ.СостояниеОбмена КАК СостояниеОбмена,
		|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ.ДатаРегистрации КАК ДатаРегистрации,
		|	ТЗ.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ТЗ.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ТЗ.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ТЗ.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ТЗ.НомерПопытки КАК НомерПопытки,
		|	ТЗ.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ТЗ.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		| 	ИСТИНА КАК ДанныеИзПриемника
		|ПОМЕСТИТЬ ВТ_ДАнные
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДАнные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_ДАнные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_ДАнные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_ДАнные.РежимОбмена КАК РежимОбмена,
		|	ВТ_ДАнные.СостояниеОбмена КАК СостояниеОбмена,
		|	ВТ_ДАнные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_ДАнные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_ДАнные.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ_ДАнные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_ДАнные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_ДАнные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_ДАнные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_ДАнные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_ДАнные.НомерПопытки КАК НомерПопытки,
		|	ВТ_ДАнные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_ДАнные.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ЕСТЬNULL(оду_РегистрацияОбъектовОбмена.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрацииОбъекта,
		|	ЕСТЬNULL(СостояниеВыгрузки.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрацииВыгрузки,
		|	ЕСТЬNULL(оду_РегистрацияОбъектовОбмена.ОбъектОбмена, Ложь) КАК ОбъектОбменаЗарегистрирован,
		|	ЕСТЬNULL(СостояниеВыгрузки.КонфигурацияКонвертацииОбмена, НЕОПРЕДЕЛЕНО) КАК КонфигурацияКДВыгрузки,
		|	ЕСТЬNULL(СостояниеВыгрузки.РежимОбмена, НЕОПРЕДЕЛЕНО) КАК РежимОбменаВыгрузки,
		|	ЕСТЬNULL(СостояниеВыгрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеОбменаВыгрузки,
		|	ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеОбменаЗагрузки,
		|	ЕСТЬNULL(СостояниеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки,
		|	ЕСТЬNULL(СостояниеЗагрузки.ИмяФайлаОбмена, """") КАК ИмяФайлаОбменаЗагрузки,
		|	ВТ_ДАнные.СостояниеОбмена = ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) КАК СостояниеНеМенялось,
		|	ЛОЖЬ КАК Удалить,
		|	ВТ_ДАнные.ДанныеИзПриемника КАК ДанныеИзПриемника
		|ИЗ
		|	ВТ_ДАнные КАК ВТ_ДАнные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеВыгрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеВыгрузки.ИДБазыИсточник
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеВыгрузки.ИДБазыПриемник
		//|			И (СостояниеВыгрузки.РежимОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросСсылки), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросДвижений)))
		|			И (СостояниеВыгрузки.РежимОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросСсылки), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросДвижений)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеЗагрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеЗагрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеЗагрузки.ИДБазыПриемник
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеЗагрузки.ИДБазыИсточник
		|			И (СостояниеЗагрузки.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО (ВТ_ДАнные.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта)
		|			И (ВТ_ДАнные.#СтрокаСоединения = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник)
		//|ГДЕ
		// Не ообмениваться одинаковыми состояниями
		//|	ВТ_ДАнные.СостояниеОбмена <> ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО) 
		//|	ВЫБОР
		//|		КОГДА ВТ_ДАнные.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий)
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ВТ_ДАнные.СостояниеОбмена <> ЕСТЬNULL(СостояниеЗагрузки.СостояниеОбмена, НЕОПРЕДЕЛЕНО)
		//|	КОНЕЦ
		|";
		
	Если  ТолькоОбновитьСостояния = Ложь Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		
		"ОБЪЕДИНИТЬ ВСЕ

		|ВЫБРАТЬ
		|	СостояниеВыгрузки.ИДОбъекта,
		|	СостояниеВыгрузки.ИДБазыИсточник,
		|	СостояниеВыгрузки.ИДБазыПриемник,
		|	СостояниеВыгрузки.РежимОбмена,
		|	СостояниеВыгрузки.СостояниеОбмена,
		|	СостояниеВыгрузки.ТипXMLОбъектаИсточника,
		|	СостояниеВыгрузки.ТипXMLОбъектаПриемника,
		|	СостояниеВыгрузки.ДатаРегистрации,
		|	СостояниеВыгрузки.ДатаВыгрузки,
		|	СостояниеВыгрузки.ИмяФайлаОбмена,
		|	СостояниеВыгрузки.ПриоритетОбмена,
		|	СостояниеВыгрузки.ПриоритетОбъекта,
		|	СостояниеВыгрузки.ПриоритетДопПризнака,
		|	СостояниеВыгрузки.НомерПопытки,
		|	СостояниеВыгрузки.КонфигурацияКонвертацииОбмена,
		|	СостояниеВыгрузки.СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	"""",
		|	ИСТИНА,
		|	ИСТИНА,
		|	ВТ_ДАнные.ДанныеИзПриемника
		|ИЗ
		|	ВТ_ДАнные КАК ВТ_ДАнные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ПО ВТ_ДАнные.ИДОбъекта = СостояниеВыгрузки.ИДОбъекта
		|			И ВТ_ДАнные.ИДБазыПриемник = СостояниеВыгрузки.ИДБазыИсточник
		|			И ВТ_ДАнные.ИДБазыИсточник = СостояниеВыгрузки.ИДБазыПриемник
		|			И (СостояниеВыгрузки.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных))
		|ГДЕ
		|	ВТ_ДАнные.СменаИсточникаПриеменикаПриРазрешенииКоллизий = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеВыгрузки.ИДОбъекта,
		|	СостояниеВыгрузки.ИДБазыИсточник,
		|	СостояниеВыгрузки.ИДБазыПриемник,
		|	СостояниеВыгрузки.РежимОбмена,
		|	СостояниеВыгрузки.СостояниеОбмена,
		|	СостояниеВыгрузки.ТипXMLОбъектаИсточника,
		|	СостояниеВыгрузки.ТипXMLОбъектаПриемника,
		|	СостояниеВыгрузки.ДатаРегистрации,
		|	СостояниеВыгрузки.ДатаВыгрузки,
		|	СостояниеВыгрузки.ИмяФайлаОбмена,
		|	СостояниеВыгрузки.ПриоритетОбмена,
		|	СостояниеВыгрузки.ПриоритетОбъекта,
		|	СостояниеВыгрузки.ПриоритетДопПризнака,
		|	СостояниеВыгрузки.НомерПопытки,
		|	СостояниеВыгрузки.КонфигурацияКонвертацииОбмена,
		|	СостояниеВыгрузки.СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	ВТ_ДАнные.ИмяФайлаОбмена,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДАнные КАК ВТ_ДАнные
		|		ПО СостояниеВыгрузки.ИДОбъекта = ВТ_ДАнные.ИДОбъекта
		|			И СостояниеВыгрузки.ИДБазыИсточник = ВТ_ДАнные.ИДБазыИсточник
		|			И СостояниеВыгрузки.ИДБазыПриемник = ВТ_ДАнные.ИДБазыПриемник
		|ГДЕ
		|	ВТ_ДАнные.ИДОбъекта ЕСТЬ NULL
		|	И СостояниеВыгрузки.РежимОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросСсылки), ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗапросДвижений))
		//|	И СостояниеВыгрузки.СостояниеОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных), ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загружен))
		|	И СостояниеВыгрузки.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных)
		|";
		
	КонецЕсли; 
		
		
	СтрокаСоединения = ?(Источник = Ложь, "ИДБазыИсточник", "ИДБазыПриемник");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаСоединения", СтрокаСоединения);
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция	ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(ТелоЗапроса, ИмяСвойства = "data")
	
	Попытка
		
		Данные = ТелоЗапроса[ИмяСвойства];
		//Если НЕ ЗначениеЗаполнено(Данные)  Тогда
		//	Возврат Неопределено;		
		//КонецЕсли;
		//
		//Если Данные.Количество() = 0 Тогда
		//	Возврат Неопределено;		
		//КонецЕсли; 	
		
		//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		//ТЗ = Модуль.ТаблицаСостоянийОбмена(); 
		ТЗ = ТаблицаСостоянийОбмена(); 
		
		Если НЕ ЗначениеЗаполнено(Данные)  Тогда
			Возврат Неопределено;		
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> пр_НастройкиПовтИсп.ТипМассив() Тогда
			Возврат Неопределено;		
		КонецЕсли; 	
		
		Если Данные.Количество() = 0 Тогда
			Возврат Неопределено;		
		КонецЕсли; 	
		
		Для каждого Стр Из Данные Цикл
			
			Нстр = Тз.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, Стр); 
			
		КонецЦикла; 
		
		Возврат ТЗ;
		
	Исключение
		СтрокаСообщенияОбОшибке = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса", , СтрокаСообщенияОбОшибке);	
		Возврат Неопределено;		
	КонецПопытки; 
	
КонецФункции 

//Вызывается только в приемнике
Функция РезультатОбновленияСостоянийОбмена(ТелоЗапроса, ИмяСвойства = "data", ТолькоОбновитьСостояния = Ложь)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	ЕстьДанныеДляЗагрузки = Ложь;
	
	//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	//НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	//Вход Выгрузка, текущая БД - приемник
	ДанныеТЗ = ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(ТелоЗапроса, ИмяСвойства);
	
	//Если НЕ ЗначениеЗаполнено(ДанныеТЗ)  Тогда
	Если ДанныеТЗ = Неопределено  Тогда
		Возврат "Не удалось прочитать входящие данные на обновление состояний обмена";		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеТЗ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОбновленияСостояниямиОбмена(, ТолькоОбновитьСостояния);
		Запрос.УстановитьПараметр("ТЗ", ДанныеТЗ);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат "Нет данных";		
		КонецЕсли;
		
		ВДЗ = РЗ.Выбрать();

		ДанныеДляИзмененийСостояний = Новый Массив;
		ДанныеОтветаСостояний = Новый Массив;
		ДанныеОтветаУдаление = Новый Массив;
		
		СтруктураПоОбъектуСостояний = СтруктураПоОбъектуСостояний();
		МассивЗагруженныхФайловОбмена = Новый Массив;
		МассивОбъектовОбменаДляРегистрации = Новый Массив;
		
		Пока ВДЗ.Следующий() Цикл
			
			ДобавлятьЗаписьНаИзменениеСостояния = Истина;
			
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			
			Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
				
				СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
				
				//Разрешение коллизий по последней дате
				Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() ИЛИ
					 ВДЗ.СостояниеОбменаЗагрузки = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
					//TODO:  Добавить в запрос дату регистрации
					//Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииВыгрузки Тогда
					Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииОбъекта Тогда
						
						СтруктураОтветаУдаления = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
						ЗаполнитьЗначенияСвойств(СтруктураОтветаУдаления, ВДЗ); 
						ДанныеОтветаУдаление.Добавить(СтруктураОтветаУдаления);
						
						СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииОбъекта;
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
						СтруктураОтвета.ИДБазыИсточник = ВДЗ.ИДБазыПриемник;
						СтруктураОтвета.ИДБазыПриемник = ВДЗ.ИДБазыИсточник;
						СтруктураОтвета.ТипXMLОбъектаИсточника = ВДЗ.ТипXMLОбъектаПриемника;
						СтруктураОтвета.ТипXMLОбъектаПриемника = ВДЗ.ТипXMLОбъектаИсточника;
						СтруктураОтвета.СменаИсточникаПриеменикаПриРазрешенииКоллизий = Истина;
						
					Иначе
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
					КонецЕсли; 
					СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
				Иначе	
					
					//Коллизии
					//Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииВыгрузки И ВДЗ.СостояниеОбменаЗагрузки = НЕОПРЕДЕЛЕНО  Тогда
					Если ВДЗ.ДатаРегистрации < ВДЗ.ДатаРегистрацииОбъекта И ВДЗ.СостояниеОбменаЗагрузки = НЕОПРЕДЕЛЕНО  Тогда
						СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий();
					ИначеЕсли ВДЗ.СостояниеОбменаЗагрузки <> НЕОПРЕДЕЛЕНО Тогда //Загрузка
						
						Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен() Тогда
							
							СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагрузка();
							
							//Состояние не поменялось
							Если ВДЗ.СостояниеОбменаЗагрузки = оду_ОбщийПовтИсп.СостояниеЗагрузка() И ВДЗ.ИмяФайлаОбмена = ВДЗ.ИмяФайлаОбменаЗагрузки Тогда
								ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
								Продолжить;
							КонецЕсли;
							
							//TODO:  Проверка на наличие файла, если нет - менять состояние
							Если ВДЗ.ИмяФайлаОбмена <> ""  Тогда
								//TODO:  подумать Номер попытки загрузки/выгрузки - разделять?
								//СтруктураОтвета.НомерПопытки = 0;
								ЕстьДанныеДляЗагрузки = Истина;
							КонецЕсли;
							
						ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагружен() Тогда
							//TODO:  Если нет в приемнике (удален) - отправлять "Загружен"
							//ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
							Если ЗначениеЗаполнено(СтруктураОтвета.ИмяФайлаОбмена)  Тогда
								МассивЗагруженныхФайловОбмена.Добавить(СтруктураОтвета.ИмяФайлаОбмена);
							КонецЕсли; 
							Продолжить;
						КонецЕсли; 
						
					ИначеЕсли ВДЗ.СостояниеОбмена  = оду_ОбщийПовтИсп.СостояниеПроверкаДанных() Тогда //Проверка данных
						
					ИначеЕсли ВДЗ.РежимОбменаВыгрузки <> ВДЗ.РежимОбмена Тогда //Проверка изменения режима
						
					Иначе  //Нет записи
						//Оставляем как есть
						//СтруктураОтвета.СостояниеОбмена = ПредопределенноеЗначение("Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий");
						ДобавлятьЗаписьНаИзменениеСостояния = Ложь;
						
					КонецЕсли; 
				
				КонецЕсли;
				
			//Когда оборвалась связи и не передались данные о загруженных данных
			ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагружен() Тогда 
				//ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
				
				Продолжить;
				
			//Загрузка, ЗапросСсылки, ЗапросДвижений	
			Иначе 	
				
				Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() Тогда
					СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
				ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросСсылки() Тогда
					
					Если ВДЗ.ДанныеИзПриемника = Истина Тогда
						//TODO:  Подумать оставлять признак, без регистраци или менять с регистрацией
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
						СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
						
						Если  ВДЗ.ОбъектОбменаЗарегистрирован = Ложь Тогда
							МассивОбъектовОбменаДляРегистрации.Добавить(СтруктураОтвета);
						КонецЕсли;
					Иначе
						
					КонецЕсли; 
					
				ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросДвижений() Тогда
					СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
					//СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
				КонецЕсли;
				
				//TODO:  Проверить, если не нужно регистрировать
				Если ВДЗ.СостояниеОбменаВыгрузки = оду_ОбщийПовтИсп.СостояниеВыгрузка() И ВДЗ.КонфигурацияКонвертацииОбмена	=  ВДЗ.КонфигурацияКДВыгрузки Тогда
					ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли;
			
			Если ВДЗ.СостояниеНеМенялось = Истина Тогда
				ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли; 
			
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
			
			Если ДобавлятьЗаписьНаИзменениеСостояния = Истина Тогда
				ДанныеДляИзмененийСостояний.Добавить(СтруктураОтвета);
			КонецЕсли; 
			
		КонецЦикла;
		
		РезультатЗаписи = РезультатЗаписиСостоянияОбменаИзМассива(ДанныеДляИзмененийСостояний);
		РезультатЗаписи = РезультатЗаписиСостоянияОбменаИзМассива(ДанныеОтветаУдаление, Истина);
		
		РезультатРегистрцииОбъектовОбмена = РезультатРегистрирацииОбъектовОбменаПоЗапросуСсылок(МассивОбъектовОбменаДляРегистрации);
		
		Если МассивЗагруженныхФайловОбмена.Количество() > 0 Тогда
			
			МассивЗагруженныхФайловОбменаСвернутый = Новый Массив; 
			Для каждого ИмяФайлаОбмена Из МассивЗагруженныхФайловОбмена Цикл
				Если МассивЗагруженныхФайловОбменаСвернутый.Найти(ИмяФайлаОбмена) = Неопределено Тогда
					МассивЗагруженныхФайловОбменаСвернутый.Добавить(ИмяФайлаОбмена);	
				КонецЕсли; 			
			КонецЦикла; 
			
			РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбменаСвернутый);
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Если ЕстьДанныеДляЗагрузки Тогда
			ВыполнитьОбменВФоне(оду_ОбщийПовтИсп.РежимЗагрузка(), 2);
			ЗапуститьВыполнениеОтложенногоПроведения();
		ИначеЕсли ТолькоОбновитьСостояния = Истина Тогда 
			ВыполнитьОбменВФоне(оду_ОбщийПовтИсп.РежимВыгрузка(), 2);
		КонецЕсли; 
		
		Возврат  ДанныеОтветаСостояний;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Возврат  ОписаниеОшибки;
	КонецПопытки;
	
КонецФункции 

//TODO:  возможно требуется проверка на регистрацию, корректность выгружаемых данных
Функция РезультатРегистрирацииОбъектовОбменаПоЗапросуСсылок(МассивОбъектовОбменаДляРегистрации)
	
	Попытка
		Для каждого СтрДанных Из МассивОбъектовОбменаДляРегистрации Цикл
			
			ОбъектОбмена = пр_Общий.СсылкаПоТипXML(СтрДанных.ТипXMLОбъектаПриемника, СтрДанных.ИДОбъекта);
			Если ОбъектОбмена <> Неопределено Тогда
				СтрДанных.Вставить("ОбъектОбмена", ОбъектОбмена);
				//СтрДанных.Вставить("Пользователь", ОбъектОбмена);
				//СтрДанных.Вставить("МетаданныеНаименование", ОбъектОбмена);
				СтрДанных.Вставить("МетаданныеНаименование", ОбъектОбмена);
				РезультатРегистрацииОбъектаОбмена = РезультатРегистрацииОбъектаОбмена(СтрДанных); 	
			КонецЕсли; 
			
		КонецЦикла;
		
		Возврат  Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ЗарегистрироватьОбъектыОбменаПоЗапросуСсылок", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки; 
	
КонецФункции 

Функция СтруктураПоОбъектуСостояний()
	
	КолонкиТЗ = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьНаборЗаписей().ВыгрузитьКолонки().Колонки;
	СтруктураПоОбъекту = Новый Структура(); 
	Для каждого Стр Из КолонкиТЗ Цикл
		СтруктураПоОбъекту.Вставить(Стр.Имя);
	КонецЦикла; 
	Возврат СтруктураПоОбъекту;
	
КонецФункции 

Функция РезультатЗаписиСостоянияОбменаИзМассива(ДанныеОтветаСостояний, Удалить = Ложь, ЭтоИсточник = Ложь)  Экспорт
	
	Если ДанныеОтветаСостояний.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для каждого Стр Из ДанныеОтветаСостояний Цикл
			
			//Блокировка = Новый БлокировкаДанных;
			//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			//ЭлементБлокировки.УстановитьЗначение("ИДОбъекта", Стр.ИДОбъекта);
			//ЭлементБлокировки.УстановитьЗначение("ИДБазыИсточник", Стр.ИДБазыИсточник);
			//ЭлементБлокировки.УстановитьЗначение("ИДБазыПриемник", Стр.ИДБазыПриемник);
			//Блокировка.Заблокировать(); 
			
			//Обработка данных
			Если Удалить = Ложь Тогда
				Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Стр);
				Запись.Записать();
			Иначе
				
				Набор = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьНаборЗаписей();
				Набор.Отбор.ИДОбъекта.Установить(Стр.ИДОбъекта);
				Набор.Отбор.ИДБазыИсточник.Установить(Стр.ИДБазыИсточник);
				Набор.Отбор.ИДБазыПриемник.Установить(Стр.ИДБазыПриемник);
				Набор.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых", Истина);			
				
				Если ЭтоИсточник = Истина Тогда
					МассивФайловОбмена = Новый Массив;
					Набор.Прочитать();
					Для каждого Запись Из Набор Цикл
						ИмяФайлаОбмена = Запись.ИмяФайлаОбмена;
						Если ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
							Если  МассивФайловОбмена.Найти(ИмяФайлаОбмена) = Неопределено Тогда
								МассивФайловОбмена.Добавить(ИмяФайлаОбмена);
							КонецЕсли; 
						КонецЕсли; 
						Набор.Удалить(Запись);
					КонецЦикла; 
					
					РезультатОчисткиФайловОбмена(МассивФайловОбмена);
				Иначе	
					Набор.Записать();
				КонецЕсли;
					
			КонецЕсли; 
		КонецЦикла; 
		
		//ЗафиксироватьТранзакцию();
		
	Исключение
		//ОтменитьТранзакцию();
		пр_Ошибка = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("РезультатЗаписиСостоянияОбменаИзМассива", , пр_Ошибка, , , , ДанныеОтветаСостояний);
		Возврат Ложь;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ, ДанныеОтветаСостояний = Неопределено, СтруктураПоОбъектуСостояний = Неопределено, ТолькоЗаписатьМассивОтвета = Ложь)
	
	ПрерватьЦикл = Ложь; 
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Если ТолькоЗаписатьМассивОтвета = Ложь Тогда
			//Обработка данных
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ); 
			Запись.Записать();
		КонецЕсли; 
		
		Если ДанныеОтветаСостояний <> Неопределено Тогда
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
 

#КонецОбласти

#Область  exchangeStatusComplet

//Обмен завершенным состояним обмена
Функция exchangeStatusComplet(Запрос)	Экспорт
	
	ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
	Попытка
		
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		РезультатОчисткиЗаписей = РезультатExchangeStatusComplet(ТелоЗапроса);
		
		Если ТипЗнч(РезультатОчисткиЗаписей) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(РезультатОчисткиЗаписей, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, РезультатОчисткиЗаписей, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция РезультатExchangeStatusComplet(ТелоЗапроса)
	
	Данные = ТелоЗапроса.data;
	Если НЕ ЗначениеЗаполнено(Данные)  Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	//Обновить состояния в Режиме = Загрузка, при запросеСсылки
	РезультатОбновленияСостояний = РезультатОбновленияСостоянийОбмена(Данные, "МассивДанныхЗапросаСсылки", Истина);
	
	РезультатОчисткиЗаписей = РезультатОчисткиЗаписейStatusComplet(Данные);
	
	Возврат Новый Структура("РезультатОчисткиЗаписей, РезультатОбновленияСостояний", РезультатОчисткиЗаписей, РезультатОбновленияСостояний);
	
КонецФункции 

Функция РезультатОчисткиЗаписейStatusComplet(Данные)
	
	МассивЗагруженныхФайловОбмена = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(Данные, "МассивЗагруженныхФайловОбмена"); 
	
	Если МассивЗагруженныхФайловОбмена = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Если МассивЗагруженныхФайловОбмена.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	РезультатОчисткиЗаписей = РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена);
	Возврат   РезультатОчисткиЗаписей;
	
КонецФункции 

#КонецОбласти

//МХ произвольных запросов
#Область  exchangeData

Функция exchangeData(Запрос)	Экспорт
	
	Попытка
		ТелоЗапроса = СтруктураИзТелаHTTPЗапросаУнив(Запрос);
	
		СтруктураСообщенияОбмена = СтруктураСообщенияОбмена(ТелоЗапроса);
		РезультатПроверки = СтруктураСообщенияОбмена.РезультатПроверки; 
		Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки = Ложь Тогда
			ОписаниеОшибки = "Сообщение обмена не корректно или адрес получателя указан не верно";
			Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		РезультатExchangeData = РезультатExchangeData(ТелоЗапроса);
		
		Если ТипЗнч(РезультатExchangeData) = Тип("Строка") Тогда
			Ответ = ЗаполненныйОтветHTTP(РезультатExchangeData, Неопределено, 201);
			Возврат Ответ;
		КонецЕсли;
		
		//Отправка своих данных
		//Данные = СтруктураДанныхЭтойБазы();
		Ответ = ЗаполненныйОтветHTTP(, РезультатExchangeData, 200);
		Возврат Ответ;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeData", , ОписаниеОшибки);	
		Ответ = ЗаполненныйОтветHTTP(ОписаниеОшибки, Неопределено, 201);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции // ()

Функция СтруктураRequestByName(requestName, requestText, parameters)   Экспорт
	
	СтруктураОтветаRequest = Новый Структура("requestName, requestText, parameters");
	
	СтруктураОтветаRequest.requestName = requestName;
	СтруктураОтветаRequest.requestText = requestText;
	СтруктураОтветаRequest.parameters = parameters;
	
	Возврат СтруктураОтветаRequest;
	
КонецФункции


#КонецОбласти
 
#КонецОбласти


#Область  СлужебныеHTTPЗапросов

//TODO:  Проверить на Организацию
Функция СтруктураСообщенияОбмена(ТелоЗапроса) Экспорт
	
	СтруктураСообщенияОбмена = Новый Структура("НастройкиТекущейБД, РезультатПроверки", Неопределено, Ложь); 
	
	Если ТелоЗапроса = Неопределено Тогда
		Возврат	 СтруктураСообщенияОбмена;
	КонецЕсли; 
	
	//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	//НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	СтруктураСообщенияОбмена.Вставить("НастройкиТекущейБД", НастройкиТекущейБД);
	РезультатПроверки = НастройкиТекущейБД.ИДБазыИсточник = ТелоЗапроса.header.to;	
	СтруктураСообщенияОбмена.Вставить("РезультатПроверки", РезультатПроверки);
	Возврат	 СтруктураСообщенияОбмена;
	
КонецФункции

//
Функция СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса = Неопределено, Метод)   Экспорт
	
	Попытка
		
		//Подключение через http
		Сервер 			 = ПараметрыПодключения.Сервер;
		Порт			 = ПараметрыПодключения.Порт;
		Пользователь 	 = ПараметрыПодключения.Пользователь;
		Пароль 			 = ПараметрыПодключения.Пароль;
		
		ИмяБазыУО = ПараметрыПодключения.ИмяБазыУО;
		ПутьКСервисуHTTP = "/hs/universalExchange/";
		//ПутьКСервисуHTTP = ПараметрыПодключения.ПутьКСервисуHTTP;
		
		АдресHTTP = ИмяБазыУО + ПутьКСервисуHTTP + Метод;
		
		Соединение = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль);//,,,ssl);	
		
		ЗаголовокЗапросаHTTP = Новый Соответствие();
		ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
		ЗапросHTTP = Новый HTTPЗапрос(АдресHTTP, ЗаголовокЗапросаHTTP);
		
		Если ТелоЗапроса <> Неопределено Тогда
			ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
		Иначе
			//http://at-sqltest/buhgalaxytest/hs/universalExchange/ping
			ОтветHTTP = Соединение.ВызватьHTTPМетод("GET", ЗапросHTTP);
		КонецЕсли; 
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			
			Если Метод = "ping" Тогда
				СтруктураОтвета =  ОтветHTTP.ПолучитьТелоКакСтроку();
			Иначе
				СтруктураОтвета = СтруктураИзТелаHTTPЗапросаУнив(ОтветHTTP);
			КонецЕсли; 
			
			Возврат СтруктураОтвета;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить(); 
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции 

#Область  НастройкиHTTPПодключения


#КонецОбласти

Функция СтруктураИзТелаHTTPЗапросаУнив(Запрос, СерилизоватьXDTO = Истина, ИменаПолейДат = "")   Экспорт
	
	Попытка
		
		ТелоЗапроса = Запрос.ПолучитьТелоКакПоток();
		
		Если СерилизоватьXDTO = Истина Тогда
			ДанныеHTTPЗапроса = ПрочитатьJSON_ИзТела_Сериализ(ТелоЗапроса);
		Иначе
			ДанныеHTTPЗапроса = ПрочитатьJSON_ИзТела(ТелоЗапроса, ИменаПолейДат);
		КонецЕсли; 
		
		Возврат ДанныеHTTPЗапроса;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("СтруктураИзТелаHTTPЗапросаУнив", , ОписаниеОшибки);	
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//TODO:  Переделать
//ИДЗапроса 		- Имя метода произвольного обмена
//ИмяЗапроса    	- Имя метода
//ОписаниеЗапроса	- 
//ЭтапЗапроса   	- Этап метода запроса
//РежимОбмена   	- РежимОбмена - ПеречислениеСсылка.оду_РежимОбмена
//РежимОтладки  	- Признак выполнения отладки
//ВыполнятьВФоне	- Признак выполнения обмена в фоне
//serializeXDTO 	- Признак чтения, записи JSON тела HTTPзапроса (Серилизовать данные)
//ОбменЧерезФайл	- Признак обмена
//Имя файла содержиться в Data
Функция СтруктураИнструкцииВыполненияОбмена() Экспорт
	
	СтруктураВыполнения = Новый Структура();
	СтруктураВыполнения.Вставить("ИДЗапроса", ""); 
	СтруктураВыполнения.Вставить("МетодЗапроса", Перечисления.оду_СостоянияПроизвольногоЗапроса.Запрос);
	СтруктураВыполнения.Вставить("ИмяЗапроса", ""); 
	СтруктураВыполнения.Вставить("ОписаниеЗапроса", "");
	СтруктураВыполнения.Вставить("Отборы", Неопределено);
	
	СтруктураВыполнения.Вставить("РежимОбмена", Неопределено);
	СтруктураВыполнения.Вставить("РежимОтладки", Ложь);			
	
	СтруктураВыполнения.Вставить("ЭтапЗапроса", 1); 
	СтруктураВыполнения.Вставить("РежимОтладкиЭтапа", Ложь); 
	СтруктураВыполнения.Вставить("ДатаВыгрузки", Неопределено); 
	СтруктураВыполнения.Вставить("КаталогОбмена", "");
	СтруктураВыполнения.Вставить("ТекстЗапроса", "");
	
	СтруктураВыполнения.Вставить("ВыполнятьВФоне", Ложь); 		
	СтруктураВыполнения.Вставить("serializeXDTO", Истина); 
	СтруктураВыполнения.Вставить("ОбменЧерезФайл", Истина); 
	
	Возврат СтруктураВыполнения;
	
КонецФункции

Функция СтруктураТелаЗапросаHTTP(instruct = Неопределено)   Экспорт
	
	СтруктураЗаловка = Новый Структура("to, front");
	Если instruct = Неопределено Тогда
		instruct = СтруктураИнструкцииВыполненияОбмена();	
	КонецЕсли;
	
	СтруктураОтветаHTTP = Новый Структура("header, instruct, data, error, code", СтруктураЗаловка, instruct); 
	
	Возврат СтруктураОтветаHTTP;
	
КонецФункции

Функция ЗаполненноеТелоЗапросаHTTPПоСтруктуреОбмена(СтруктураВыполненияОбмена)  Экспорт
	
	Если СтруктураВыполненияОбмена.instruct.serializeXDTO = Истина Тогда
		ТелоЗапроса = СформироватьJSON_Сериализ(СтруктураВыполненияОбмена);
	Иначе
		ТелоЗапроса = СформироватьJSON(СтруктураВыполненияОбмена);
	КонецЕсли; 
	
	Возврат ТелоЗапроса;
	
КонецФункции

// Формирует HTTP ответ со стандартной структурой
//
// Параметры:
//  error  - Строка - Описание ошибки
//                 
//  data   - Структура - Данные
//                  
//  code    - Число - Код ответа 
//		200 - Все хорошо
//		201 - Исключение
//		202 - Ошибки по коду
// СерилизоватьXDTO - Булево
// instruct - Инструкции выполнения обмена (см. СтруктураИнструкцииВыполненияОбмена())
//
// Возвращаемое значение:
//   HTTPСервисОтвет   - Заполненый по стандартной структуре
//
Функция ЗаполненноеТелоЗапросаHTTP(ИДБазыПриемник, ИДБазыИсточник, data, СерилизоватьXDTO = Истина, instruct = Неопределено)  Экспорт
	
	СтруктураВыполненияОбмена = СтруктураТелаЗапросаHTTP(instruct);
	СтруктураВыполненияОбмена.header.to = ИДБазыПриемник;
	СтруктураВыполненияОбмена.header.front = ИДБазыИсточник;
	СтруктураВыполненияОбмена.data  = data; 
	СтруктураВыполненияОбмена.instruct.serializeXDTO = СерилизоватьXDTO; 
	
	ТелоЗапроса = ЗаполненноеТелоЗапросаHTTPПоСтруктуреОбмена(СтруктураВыполненияОбмена);
	
	Возврат ТелоЗапроса;
	
КонецФункции

Функция СтруктураОтветаHTTP()   Экспорт
	
	СтруктураОтветаHTTP = Новый Структура("error, data, code");
	Возврат СтруктураОтветаHTTP;
	
КонецФункции

// Формирует HTTP ответ со стандартной структурой
//
// Параметры:
//  error  - Строка - Описание ошибки
//                 
//  data   - Структура - Данные
//                  
//  code    - Число - Код ответа 
//		200 - Все хорошо
//		201 - Исключение
//		202 - Ошибки по коду
//
// Возвращаемое значение:
//   HTTPСервисОтвет   - Заполненый по стандартной структуре
//
Функция ЗаполненныйОтветHTTP(error = "", data, code = 200, СерилизоватьXDTO = Истина)  Экспорт
	
	ДанныеДляОтвета = СтруктураОтветаHTTP();
	
	ДанныеДляОтвета.error = error;
	ДанныеДляОтвета.data  = data;
	ДанныеДляОтвета.code   = code;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки["Content-Type"] = "text/json; charset=utf-8";
	
	Если СерилизоватьXDTO = Истина Тогда
		ТелоЗапроса = СформироватьJSON_Сериализ(ДанныеДляОтвета);
	Иначе
		ТелоЗапроса = СформироватьJSON(ДанныеДляОтвета);
	КонецЕсли; 
	
	Ответ.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция ЕстьСвязьСУчастникомОбмена(СсылкаУО) Экспорт
	
	ПараметрыПодключения = оду_ОбщийПовтИсп.ПараметрыПодключенияПоСсылкеУО(СсылкаУО);
	СтруктураОтвета = оду_Общий.СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, , "ping");
	Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Нет связи с участником обмена: %1 на сервере: %2", ПараметрыПодключения.ИмяБазыПриемника, ПараметрыПодключения.Сервер);
		Сообщение.Сообщить(); 
		Возврат Ложь;                                                                   
	Иначе
		Возврат Истина;                                                                   
	КонецЕсли; 
	
КонецФункции 

#КонецОбласти

#КонецОбласти


#Область JSON

#Область  ЗаписьJSON 

Функция СформироватьJSON(СтруктураДанных, ФормироватьСПереносами = Ложь,  Путь = "", Сериализовать = Ложь) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ПереносСтрок = ?(ФормироватьСПереносами = Истина, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет);
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, Символы.Таб);
		
		Если Путь = "" Тогда
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		Иначе 	
			ЗаписьJSON.ОткрытьФайл(Путь,,,ПараметрыЗаписиJSON);
		КонецЕсли; 
		
		НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
		НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
		НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
		Если Сериализовать = Ложь Тогда
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализацииJSON);
		Иначе
			СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НазначениеТипаXML.Явное);
		КонецЕсли;
		
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
КонецФункции

// Формирует текст JSON
//
// Параметры:
//  Данные  - <Тип.Вид> - <описание параметра>
//  Путь - путь к файлу - записывает JSON в файл
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьJSON_Сериализ(Данные,  Путь = "")   Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	
	Если Путь = "" Тогда
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Иначе 	
		ЗаписьJSON.ОткрытьФайл(Путь,,,ПараметрыЗаписиJSON);
	КонецЕсли; 
		
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Данные, НазначениеТипаXML.Явное);
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Возврат ТелоЗапроса
	
КонецФункции

#КонецОбласти
 
#Область  ЧтениеJSON 

Функция ПрочитатьJSON_ИзТела_Сериализ(ТелоЗапроса = Неопределено, Путь = "")   Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	Если Путь <> "" Тогда
		ЧтениеJSON.ОткрытьФайл(Путь);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("Поток") Тогда
		ЧтениеJSON.ОткрытьПоток(ТелоЗапроса);
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	КонецЕсли; 
	
	ДанныеHTTPЗапроса = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции

Функция ПрочитатьJSON_ИзТела(ТелоЗапроса = Неопределено, ИменаПолейДат = "",  Путь = "")   Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	Если Путь <> "" Тогда
		ЧтениеJSON.ОткрытьФайл(Путь);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("Поток") Тогда
		ЧтениеJSON.ОткрытьПоток(ТелоЗапроса);
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	КонецЕсли; 
	
	Если ИменаПолейДат = "" Тогда
		ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON);
	Иначе
		ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON,, ИменаПолейДат, ФорматДатыJSON.ISO);
	КонецЕсли; 
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции

Функция ОбработатьJSON(СтрокаJSON) Экспорт
	
	Если СтрокаJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		ДанныеВозврата = ПрочитатьJSON(Чтение, Истина,,, "ПреобразованиеJSON");
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина); 
	КонецПопытки; 
	
	Возврат ДанныеВозврата;
КонецФункции

Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "date" Тогда
		Попытка
			Возврат Дата("19700101") + ?(ТипЗнч(Значение) = Тип("Строка"), Число(Значение), Значение);
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти

 
#Область  РЕГЛАМЕНТ_ФоновыеЗадания

//TODO:  Запуск в Фоне
// Проверка, на активность работы фонового задания
Процедура РегламентОбмена(РежимОбмена = Неопределено, НомерВыполнения = 1, ИнтерактивныйВызов = Ложь)   Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если  НЕ оду_ИспользоватьУниверсальныйОбмен Тогда
		Возврат;
	КонецЕсли; 
	
	//НаименованиеЗадания = НаименованиеИсполняющегоФоновогоЗаданияРегламентОбмена();
	//ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	//Если ЗаданиеВыполняется = Истина Тогда
	// 	Возврат;
	//КонецЕсли; 

	ВыполнитьРегламентОбмена(РежимОбмена, НомерВыполнения);
	//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	//Модуль.ВыполнитьОбменВФоне(РежимОбмена); 
	
КонецПроцедуры

//TODO:  ПРоверить
Функция ВыполнитьОбменВФоне(РежимОбмена = Неопределено, НомерВыполнения = 1, ИнтерактивныйВызов = Ложь)	Экспорт
	
	НаименованиеЗадания = НаименованиеИсполняющегоФоновогоЗаданияРегламентОбмена();
	
	//ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	//Если ЗаданиеВыполняется = Истина Тогда
	//	Если ИнтерактивныйВызов = Истина Тогда
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Задание выполняется. Подождите.";
	//		Сообщение.Сообщить(); 
	//	КонецЕсли; 
	// 	Возврат Неопределено;
	//КонецЕсли; 
	//
	//ВерсияБСП = Лев(пр_НастройкиПовтИсп.ВерсияБСП(), 3);
	ИмяПроцедуры = "оду_Общий.ВыполнитьРегламентОбмена";
	//
	//Если ВерсияБСП > "2.2" Тогда
	//	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	//	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	//	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(Новый УникальныйИдентификатор());
	//	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	//	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	//	
	//	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, РежимОбмена, НомерВыполнения);
	//Иначе 
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(РежимОбмена);
		МассивПараметров.Добавить(НомерВыполнения);
	//	//пр_Общий.ЗапуститьФоновоеВыполнение(ИмяПроцедуры, МассивПараметров, , НаименованиеЗадания);	
	//	ФоновыеЗадания.Выполнить(ИмяПроцедуры, МассивПараметров, , НаименованиеЗадания);
	//КонецЕсли; 
	//
	
	пр_Общий.ЗапуститьФоновоеВыполнение(ИмяПроцедуры, МассивПараметров, , НаименованиеЗадания, ИнтерактивныйВызов);
	
КонецФункции 

Функция ВыполнитьРегламентОбмена(РежимОбмена = Неопределено, НомерВыполнения = 1)   Экспорт
	
	//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	//НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	Если НастройкиТекущейБД.Используется = Ложь Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	//Прерывать после полного цилка обммена (Загрузка - выгрузка)
	Если НомерВыполнения > 2 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимОбмена) Тогда
		РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	//ИначеЕсли НомерВыполнения > 1 Тогда
	//	РежимОбмена = ?(РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка(), оду_ОбщийПовтИсп.РежимВыгрузка(), оду_ОбщийПовтИсп.РежимЗагрузка());
	КонецЕсли; 

	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	Если РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
		Модуль.ВыполнитьВыгрузкуДанных(НастройкиТекущейБД, НомерВыполнения, , Истина);
	Иначе
		Модуль.ВыполнитьЗагрузкуДанных(НастройкиТекущейБД, НомерВыполнения, Истина);
	КонецЕсли; 
	
КонецФункции 


Функция НаименованиеИсполняющегоФоновогоЗаданияРегламентОбмена()  Экспорт
	
	Возврат "оду_РегламентОбмена";
	
КонецФункции

Функция НаименованиеИсполняющегоФоновогоЗаданияОтложенноеПроведение()  Экспорт
	
	Возврат "оду_ОтложенноеПроведение";
	
КонецФункции

#КонецОбласти


#Область  Регистрация

#Область  События
 
#Область  Документы

//TODO: 
//01 Проверить удаление
//02 Проверить Д_Приобретение
//Пока только для складов Маркет плейс
Процедура ЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписи, РежимПроведения);	
КонецПроцедуры 

Процедура ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	оду_НовыйОбъектНеЗарегистрирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "оду_НовыйОбъектНеЗарегистрирован", Ложь);
	
	Если оду_НовыйОбъектНеЗарегистрирован = Истина Тогда
		ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведения);	
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти

Процедура ЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ);	
КонецПроцедуры 

Процедура ЗарегистрироватьУдалениеПередУдалением(Источник, Отказ) Экспорт
	//TODO:  
	
КонецПроцедуры 

//TODO:  доделывать !! ++
Процедура ЗарегистрироватьСамолет(МассивОбъектовОбмена)  Экспорт
	
	//Если объект уже выгружен или приоритет = приориет самолету, то не регистрируем 
	
	//СтруктураНастроекОбмена = МассивУчастниковОбмена[0];
	//
	//ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, МассивОбъектовОбмена, 10);
	
	
	//TODO:  переделать на массив
	//Отказ = ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, МассивОбъектовОбмена);
	//Если Отказ = Истина Тогда
	//	Возврат;
	//КонецЕсли; 
	
	////Когда один участник обмена
	//Если СтрНайти(ТипXML, "DocumentRef") > 0 Тогда
	//	ЗарегистрироватьСамолетДляДокументов(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена);	
	//Иначе //Другой тип Справочник, ПВХ
	//	ЗарегистрироватьСамолетСправочники(МассивОбъектовОбмена, ТипXML, СтруктураНастроекОбмена);	
	//КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область  СлужебныеПроцедурыИФункции

//ПриоритетОбмена //Самолет = 10, Изменение = 50
Процедура ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, ОбъектОбмена = Неопределено, ТекущийПользователь, ПриоритетОбмена = 50, РежимЗаписи = Неопределено, РежимПроведения = Неопределено)
	
	ДатаРегистрации = ?(ПриоритетОбмена = 10, Дата(1,1,1), ТекущаяДатаСеанса());
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		Если  ОбъектОбмена <> Неопределено Тогда
			СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена);
			СтруктураНастроекОбмена.Вставить("ИДОбъекта", XMLСтрока(СтруктураНастроекОбмена.ОбъектОбмена));
		КонецЕсли;
		СтруктураНастроекОбмена.Вставить("ПриоритетОбмена", ПриоритетОбмена); 
		СтруктураНастроекОбмена.Вставить("ПриоритетДопПризнака", 0);
		СтруктураНастроекОбмена.Вставить("ДатаРегистрации", ДатаРегистрации);
		СтруктураНастроекОбмена.Вставить("Пользователь", ТекущийПользователь);
		СтруктураНастроекОбмена.Вставить("РежимЗаписи", РежимЗаписи);
		СтруктураНастроекОбмена.Вставить("РежимПроведения", РежимПроведения);
		СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	КонецЦикла;
	
КонецПроцедуры

//СтруктураНастроекОбмена:
//ДопИнформация: БазаПриемник : ytaptest6
//РежимОтладки : Да
//НастройкаПравилаРегистрации : ПравилоРегистрацииБП_УТАП_Регламент
//ОбработкаРегистрации : \\pivo.local\Resource\Личные\Кириллов ПС\r\work\УниверсальныйОбмен\ПравилаРегистрации\ПравилоРегистрацииБП_УТАП.epf
//ПравилоРегистрации : 
//НастройкаКонвертацииОбмена : 
//РежимОтладкиКонвертацииОбмена : Нет
//ОбработкаОтладки : 
//ТипXMLОбъектаИсточника : CatalogRef.Организации
//ТипXMLОбъектаПриемника : CatalogRef.Организации
//ИДБазыПриемник : d6ef8fd4-6b65-4769-8ce8-7f4b526ca849
//ИДКонфигурации : УТАП
//ЭтоРабочаяБД : Нет
//ТекущаяБДРабочая : Нет
//ПриоритетОбъекта : 1
//МетаданныеНаименование : Справочники
//ПриоритетОбмена : 50
//КоличествоОбъектовВПакетеОбмена : 3
//КоличествоПопытокПриОшибке : 2
//ИДКонфигурацииТекущейБД : БП
//select : Массив
//ЕстьОграничениеНаОрганизации : Да
//ОбъектОбмена : ТОП-17 ООО
//ИДОбъекта : 5ee5c091-983b-11e7-80e5-00155d640d01
//ПриоритетДопПризнака : 0
//ДатаРегистрации : 17.10.2023 15:14:44
//Пользователь : Администратор
//РежимЗаписи : 
//РежимПроведения : 
//Отказ : Нет
Процедура ЗарегистрироватьИзменениеОбъектаОбмена(Источник, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, ПриоритетДопПризнака = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	//TODO:  проверить справочник новый объект
	//После записи, проверить еще раз при проведении
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка)  Тогда
		Источник.ДополнительныеСвойства.Вставить("оду_НовыйОбъектНеЗарегистрирован", Истина);
		Возврат;
	КонецЕсли; 
	
	ОбъектОбмена = Источник.Ссылка;
	ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ОбъектОбмена);
	ТекущийПользователь = пр_НастройкиПовтИсп.ТекущийПользователь();
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();	 
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	МассивУчастниковОбмена = Модуль.МассивУчастниковОбменаПоТипуОбъекта(ТипXML, НастройкиТекущейБД);
	
	Если МассивУчастниковОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, ОбъектОбмена, ТекущийПользователь, , РежимЗаписи, РежимПроведения);
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		
		//В не рабочих базах регистрация не работет
		Если СтруктураНастроекОбмена.ТекущаяБДРабочая = Ложь Тогда
			Если СтруктураНастроекОбмена.РежимОтладки = Ложь Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		//Доп проверка на отбор по организациям и регистрации
		Если ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, Источник) = Ложь Тогда
			Продолжить;
		КонецЕсли; 
		
		Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбменДанными", ТекущийПользователь); 
		РазрешенаРегистрацияОбъектаОбменаПоОтбору = Модуль.РазрешенаРегистрацияОбъектаОбменаПоОтбору(Источник, СтруктураНастроекОбмена, ПриоритетДопПризнака); 
				
		//Регистрация объекта	
		Если РазрешенаРегистрацияОбъектаОбменаПоОтбору = Истина Тогда
			РезультатРегистрацииОбъектаОбмена = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена); 
		КонецЕсли; 
			
		//TODO:  подумать, нужно ли запрещать изменять объект, если не удалось зарегать
		// Возможно реализовать кастомизацию параметра
		Если СтруктураНастроекОбмена.Отказ = Истина ИЛИ РезультатРегистрацииОбъектаОбмена = Ложь Тогда
			
			Текст = "*оду. Не удалось зарегистрировать объект обмена";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Сообщить(); 
			//СтруктураНастроекОбмена.Отказ = Истина;	
			ОтправитьСообщениеВТелеграмExchange("оду_Общий.ЗарегистрироватьИзменениеОбъектаОбмена", , Текст, СтруктураНастроекОбмена.БазаПриемник, , , СтруктураНастроекОбмена);	
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		

	КонецЦикла;
	
КонецПроцедуры  

#Область  Самолет

Функция ТекстЗапросаРегистрацииСамолета()
	Возврат
		"ВЫБРАТЬ
		|	ТЗ_УчастникиОбмена.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ_УчастникиОбмена.БазаПриемник КАК БазаПриемник,
		|	ТЗ_УчастникиОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ_УчастникиОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ_УчастникиОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ_УчастникиОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ_УчастникиОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ТЗ_УчастникиОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
		|ПОМЕСТИТЬ ВТ_УчастникиОбмена
		|ИЗ
		|	&ТЗ_УчастникиОбмена КАК ТЗ_УчастникиОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрацииН
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО ВТ_УчастникиОбмена.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|			И ВТ_УчастникиОбмена.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
		|ГДЕ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта В(&ИДОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|ПОМЕСТИТЬ ВТ_ДанныеЗагрузки
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО ВТ_УчастникиОбмена.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И ВТ_УчастникиОбмена.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДОбъекта, ВТ_ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДБазыПриемник, ВТ_ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ВТ_ДанныеРегистрацииН.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрации
		|ИЗ
		|	ВТ_ДанныеРегистрацииН КАК ВТ_ДанныеРегистрацииН
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
		|		ПО ВТ_ДанныеРегистрацииН.ИДОбъекта = ВТ_ДанныеЗагрузки.ИДОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УчастникиОбмена.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_УчастникиОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_УчастникиОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетОбъекта, ВТ_УчастникиОбмена.ПриоритетОбъекта) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрации.НомерПопыткиЗагрузки, 0) КАК НомерПопыткиЗагрузки,
		|	ВТ_УчастникиОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_УчастникиОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника
		|ИЗ
		|	ВТ_УчастникиОбмена КАК ВТ_УчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистрации КАК ВТ_ДанныеРегистрации
		|		ПО (ВТ_ДанныеРегистрации.ИДБазыПриемник = ВТ_УчастникиОбмена.ИДБазыПриемник)
		|			И ВТ_УчастникиОбмена.ИДОбъекта = ВТ_ДанныеРегистрации.ИДОбъекта";
	
КонецФункции 

//TODO: 
//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция РезультатРегистрацииОбъектовОбменаСамолет(СтруктураНастроекОбменаНач, ПриоритетОбмена = 10, ПриоритетДопПризнака = 0, ДатаРегистрации = Неопределено)   Экспорт
	
	//Индивидуальные настройки УО 
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбменДанными", пр_НастройкиПовтИсп.ТекущийПользователь());
	МассивОбъектовОбмена = Модуль.МассивОбъектовОбменаСамолетПоОтбору(СтруктураНастроекОбменаНач); 
	
	Если МассивОбъектовОбмена.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	//TODO:  проверка на отбор по организациям
	МассивУчастниковОбмена = СтруктураНастроекОбменаНач.МассивУчастниковОбмена;
	ТЗ_УчастникиОбмена = СоздатьТЗПоДаннымУчастникамОбмена(МассивУчастниковОбмена);
	ТекущийПользователь = СтруктураНастроекОбменаНач.ТекущийПользователь;

	СоотОбъектов = Новый Соответствие;
	
	ИДОбъекты = Новый Массив;  
	
	//TODO:  Отбор на организацию и тд

	//Было
	//Для каждого Эл Из МассивОбъектовОбмена Цикл 
	//	
	//	
	//	ИДОбъекта = XMLСтрока(Эл);
	//	ИДОбъекты.Добавить(ИДОбъекта);
	//	
	//	СоотОбъектов.Вставить(ИДОбъекта, Эл); 
	//	
	//	Для каждого УО Из МассивУчастниковОбмена Цикл
	//	    Нстр = ТЗ_УчастникиОбмена.Добавить();
	//		ЗаполнитьЗначенияСвойств(Нстр, УО); 
	//		Нстр.ИДОбъекта = ИДОбъекта;
	//		//СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака"); 
	//	КонецЦикла; 
	//	
	//КонецЦикла;

	ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, , ТекущийПользователь, 10);
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		
		Для каждого ОбъектОбмена Из МассивОбъектовОбмена Цикл
			
			ИДОбъекта = XMLСтрока(ОбъектОбмена);
			ИДОбъекты.Добавить(ИДОбъекта);
			СоотОбъектов.Вставить(ИДОбъекта, ОбъектОбмена); 
			
			СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена);
			СтруктураНастроекОбмена.Вставить("ИДОбъекта", ИДОбъекта);
			
			//Доп проверка на отбор по организациям и регистрации
			Если ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, ОбъектОбмена) = Истина Тогда
			    Нстр = ТЗ_УчастникиОбмена.Добавить();
				ЗаполнитьЗначенияСвойств(Нстр, СтруктураНастроекОбмена); 
			КонецЕсли; 
			
			//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбменДанными", ТекущийПользователь); 
			//РазрешенаРегистрацияОбъектаОбменаПоОтбору = Модуль.РазрешенаРегистрацияОбъектаОбменаПоОтбору(Источник, СтруктураНастроекОбмена); 
			//
			////Регистрация объекта	
			//Если РазрешенаРегистрацияОбъектаОбменаПоОтбору = Истина Тогда
			//	РезультатРегистрацииОбъектаОбмена = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена); 
			//КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 

	Если ТЗ_УчастникиОбмена.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "*оду. Данные обмена не проходят проверку";
		Сообщение.Сообщить();	
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрацииСамолета();
	
	//Запрос.УстановитьПараметр("ИДБазыПриемника", СтруктураНастроекОбмена.ИДБазыПриемника);
	Запрос.УстановитьПараметр("ТЗ_УчастникиОбмена", ТЗ_УчастникиОбмена);
	Запрос.УстановитьПараметр("ИДОбъекты", ИДОбъекты);
	//ДатаРегистрации - признак даты изменения объекта
	//Запрос.УстановитьПараметр("ДатаРегистрации", ?(ДатаРегистрации = Неопределено, ТекущаяДатаСеанса(), ДатаРегистрации));

	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//типа сдесь должен быть обход по группировке по УО
	
	ВДЗ = РЗ.Выбрать(); 
	
	РезультатРегистрацииОбъектовОбмена = Истина;
	
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
			Сообщение.Сообщить(); 
		ИначеЕсли ЗначениеЗаполнено(ВДЗ.ПриоритетОбмена) И ВДЗ.ПриоритетОбмена <= ПриоритетОбмена Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Данный объект уже зарегистрирован. Он находится в режиме выгрузки.";
			Сообщение.Сообщить(); 
			
		Иначе
			
			ОбъектОбмена = СоотОбъектов.Получить(ВДЗ.ИДОбъекта);
			Если ОбъектОбмена = Неопределено Тогда
				Продолжить;		
			КонецЕсли; 
			//Запись
			СтруктураНастроекОбмена = СтруктураНастроекОбмена(); 
			ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ВДЗ); 
			
			//Для каждого УО могут разные параметры приоритета объекта и доп признаков
			ПриоритетОбменаВДЗ = ?(ЗначениеЗаполнено(ВДЗ.ПриоритетОбмена), ВДЗ.ПриоритетОбмена, 10); 
			СтруктураНастроекОбмена.ПриоритетОбмена = Мин(ПриоритетОбменаВДЗ, ПриоритетОбмена);
			СтруктураНастроекОбмена.ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, ПриоритетДопПризнака);
			Если ДатаРегистрации <> Неопределено Тогда
				СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, ДатаРегистрации);
			КонецЕсли; 
			СтруктураНастроекОбмена.ОбъектОбмена = ОбъектОбмена;
			СтруктураНастроекОбмена.Вставить("Пользователь", ТекущийПользователь);
			
			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
			РезультатРегистрации = Модуль.РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
			
			Если РезультатРегистрации = Ложь Тогда 
				//Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("*оду. Объект %1 не удалось зарегистрировать, попробуйте еще раз.", ОбъектОбмена);
				Сообщение.Сообщить();
				
				РезультатРегистрацииОбъектовОбмена = Ложь;
				
			КонецЕсли;
			
		КонецЕсли; 	
	КонецЦикла; 

	
	Возврат РезультатРегистрацииОбъектовОбмена;

КонецФункции 


Функция СоздатьТЗПоДаннымУчастникамОбмена(МассивУчастниковОбмена)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("БазаПриемник", Новый ОписаниеТипов("СправочникСсылка.оду_БазыУчастникиОбмена"));
	ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	//ТЗ.Колонки.Добавить("ОбъектОбмена", Тип("СправочникСсылка.оду_БазыУчастникиОбмена"));
	ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(40));
	ТЗ.Колонки.Добавить("ПриоритетОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТЗ.Колонки.Добавить("МетаданныеНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаПриемника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("КонфигурацияКонвертацииОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_КонфигурацияКонвертацииДанных"));
	
	Возврат  ТЗ;
	
КонецФункции 

Функция СтруктураНастроекОбмена()
	
	СтруктураНастроекОбмена = Новый Структура("ИДОбъекта, ИДБазыПриемник, ОбъектОбмена, ДатаРегистрации, ПриоритетОбмена, ПриоритетОбъекта, ПриоритетДопПризнака");
	СтруктураНастроекОбмена.Вставить("МетаданныеНаименование");
	СтруктураНастроекОбмена.Вставить("ТипXMLОбъектаИсточника");
	СтруктураНастроекОбмена.Вставить("ТипXMLОбъектаПриемника");
	СтруктураНастроекОбмена.Вставить("КонфигурацияКонвертацииОбмена");
	
	Возврат  СтруктураНастроекОбмена;

КонецФункции 

#КонецОбласти


#Область  ПроверкаВозможностиРегистрации

//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция ОбъектОбменаПроходитПроверкуДляРегистрацииСамолет(СтруктураНастроекОбмена, Отказ)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистрации.ИДОбъекта, ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ИДБазыПриемник, ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ДанныеРегистрации.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетОбъекта, 0) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ДанныеРегистрации.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ДанныеЗагрузки.НомерПопытки, 0) КАК НомерПопыткиЗагрузки
		|ИЗ
		|	(ВЫБРАТЬ
		|		оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|		оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|		оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|		оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта
		|	ИЗ
		|		РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|	ГДЕ
		|		оду_РегистрацияОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|		И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник) КАК ДанныеРегистрации
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Различные
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|			оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|			оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|			оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки
		|		ИЗ
		|			РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ГДЕ
		|			оду_СостояниеОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		//|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|			И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)) КАК ДанныеЗагрузки
		|		ПО ДанныеРегистрации.ИДОбъекта = ДанныеЗагрузки.ИДОбъекта
		//|			И ДанныеРегистрации.ИДБазыПриемник = ДанныеЗагрузки.ИДБазыПриемник
		|";
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", СтруктураНастроекОбмена.ИДБазыПриемник);
	Запрос.УстановитьПараметр("ИДОбъекта", СтруктураНастроекОбмена.ИДОбъекта);
	
	РЗ = Запрос.Выполнить();
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
		
	ВДЗ.Следующий();
	
	Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
		Сообщение.Сообщить(); 
	Иначе
		//Запись
		
		////Проверка по типу объекта
		//Если СтруктураНастроекОбмена.МетаданныеНаименование = "Документы" Тогда
		//	
		//	//TODO:  Переделать
		//	//Установка органичения на изменение объектов
		//	Если ЗначениеЗаполнено(Источник.Номер)  Тогда
		//		//Проверка в запросе
		//		Если НЕ ОбъектСозданВЭтойБазе(Источник.Номер, СтруктураНастроекОбмена.ИДКонфигурации) Тогда
		//			
		//			//Особый случай, когда нужно проводить доки в этой базе
		//			Если пр_НастройкиПовтИсп.ЕстьДоступПроводитьДокументыСозданныеНеВЭтойБазе(пр_НастройкиПовтИсп.ТекущийПользователь()) Тогда
		//				Возврат Ложь;
		//			КонецЕсли; 
		//			
		//			//TODO: //ВозвратТоваровОтКлиента - особый случай 
		//			Если  ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда  
		//				Возврат Ложь;
		//			КонецЕсли;
		//			
		//			Сообщение = Новый СообщениеПользователю;
		//			Сообщение.Текст = "Запрещено менять объекты созданыные в базе УТ ""Переход""";
		//			Сообщение.Сообщить(); 
		//			Отказ = Истина;
		//			Возврат Ложь;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЕсли; 
			
		СтруктураНастроекОбмена.ПриоритетОбмена = Макс(ВДЗ.ПриоритетОбмена, СтруктураНастроекОбмена.ПриоритетОбмена);
		СтруктураНастроекОбмена.ПриоритетДопПризнака = Макс(ВДЗ.ПриоритетДопПризнака, СтруктураНастроекОбмена.ПриоритетДопПризнака);
		СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, СтруктураНастроекОбмена.ДатаРегистрации);
		РезультатРегистрации = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
		Если РезультатРегистрации = Ложь Тогда 
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Объект не удалось зарегистрировать, попробуйте еще раз.";
			Сообщение.Сообщить(); 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции 


Функция ТекстЗапросаРегистрацииОбъектОбменаПриИзменении()
	Возврат
		"ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(оду_СостояниеОбъектовОбмена.НомерПопытки, 0) КАК НомерПопыткиВыгрузки
		|ПОМЕСТИТЬ ВТ_ДанныеРегистрацииН
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО оду_РегистрацияОбъектовОбмена.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|			И (оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных))
		|ГДЕ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|	И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопыткиЗагрузки
		|ПОМЕСТИТЬ ВТ_ДанныеЗагрузки
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта = &ИДОбъекта
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДОбъекта, ВТ_ДанныеЗагрузки.ИДОбъекта) КАК ИДОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ИДБазыПриемник, ВТ_ДанныеЗагрузки.ИДБазыПриемник) КАК ИДБазыПриемник,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрации,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбмена, 0) КАК ПриоритетОбмена,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетОбъекта, 0) КАК ПриоритетОбъекта,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.ПриоритетДопПризнака, 0) КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ВТ_ДанныеЗагрузки.НомерПопыткиЗагрузки, 0) КАК НомерПопыткиЗагрузки,
		|	ЕСТЬNULL(ВТ_ДанныеРегистрацииН.НомерПопыткиВыгрузки, 0) КАК НомерПопыткиВыгрузки
		|ИЗ
		|	ВТ_ДанныеРегистрацииН КАК ВТ_ДанныеРегистрацииН
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗагрузки КАК ВТ_ДанныеЗагрузки
		|		ПО ВТ_ДанныеРегистрацииН.ИДОбъекта = ВТ_ДанныеЗагрузки.ИДОбъекта";
	
КонецФункции 

//Что решает
// режимы
//А. Одиночный объект - проверка регистрации при изменении
// 1. Проверка, что объект не в режиме загрузка, с выводом сообщения
//    если есть запись в состоянии в режиме загрузка, тогда Отказ = Истина
// 2. Если зареган, то остальные проверки не нужны, нужно только поправить дату регистрации, либо приоритет
//TODO: 
// 3. Количество ошибок не важны, только если это была загрузка с 3я ошибками, тогда все должно обнуляться (кем, когда и как?)
//
// Б Режим Самолет - ручная регистация, быстрый транспорт
// доп. требования может быть несколько однотипных объектов + Обязательный диалог с пользователем (показ сообщений итд)
//1. Ограничить объекты в режиме загрузка, с выводом сообщений
//2. Менять только приоритет, ДатаРегистрации - пустая	
//3. Сообщать, что объекты уже зарегистрированы, либо в пути. 
//TODO:  
// Возможно были выгружены, но пользователь продолжает нажимать на самолет
// если изменений объекта не было - то при первичной отправке на проверку данных на существование в базе приемнике, не производит повторную выгрузку
//
//Количество ошибок не > 3
Функция ОбъектОбменаПроходитПроверкуДляРегистрации(СтруктураНастроекОбмена, Источник)
	
	//Проверка на ограничения    
	Если ПроходитПровекуНаОграничениеОрганизаций(СтруктураНастроекОбмена, Источник) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;     
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРегистрацииОбъектОбменаПриИзменении();
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", СтруктураНастроекОбмена.ИДБазыПриемник);
	Запрос.УстановитьПараметр("ИДОбъекта", СтруктураНастроекОбмена.ИДОбъекта);
	
	УстановитьПривилегированныйРежим(Истина);
	РЗ = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РЗ.Пустой() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
		
	ВДЗ.Следующий();
	
	ТекстСообщения = "";
	
	//TODO:  разобрать
	//Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
	//Если ВДЗ.НомерПопыткиЗагрузки <> Неопределено ИЛИ ВДЗ.НомерПопыткиЗагрузки <= СтруктураНастроекОбмена.КоличествоПопытокПриОшибке Тогда
	Если ВДЗ.НомерПопыткиЗагрузки > 0 Тогда
		
		//Если ВДЗ.НомерПопыткиЗагрузки >= СтруктураНастроекОбмена.КоличествоПопытокПриОшибке Тогда
		//	//TODO:  Дать возможность регистрировать ?
		//	ТекстСообщения = СтрШаблон("*оду. Данный объект был выгружен с ошибкой в количесве: %1 превышающем норму = %2", ВДЗ.НомерПопыткиЗагрузки, СтруктураНастроекОбмена.КоличествоПопытокПриОшибке);
		//Иначе
			ТекстСообщения = "*оду. Данный объект нельзя изменять. Он находится в режиме загрузки.";
		//КонецЕсли;
		
	ИначеЕсли ВДЗ.НомерПопыткиВыгрузки >= СтруктураНастроекОбмена.КоличествоПопытокПриОшибке Тогда
		ТекстСообщения = СтрШаблон("*оду. Данный объект был выгружен с ошибкой в количесве: %1 превышающем норму = %2", ВДЗ.НомерПопыткиВыгрузки, СтруктураНастроекОбмена.КоличествоПопытокПриОшибке);
	Иначе //Запись

		СтруктураНастроекОбмена.ПриоритетОбмена = Мин(ВДЗ.ПриоритетОбмена, СтруктураНастроекОбмена.ПриоритетОбмена);
		СтруктураНастроекОбмена.ПриоритетДопПризнака = Мин(ВДЗ.ПриоритетДопПризнака, СтруктураНастроекОбмена.ПриоритетДопПризнака);
		СтруктураНастроекОбмена.ДатаРегистрации = Макс(ВДЗ.ДатаРегистрации, СтруктураНастроекОбмена.ДатаРегистрации);
		
		Если СтруктураНастроекОбмена.ПриоритетОбмена = ВДЗ.ПриоритетОбмена И 
			 СтруктураНастроекОбмена.ПриоритетДопПризнака = ВДЗ.ПриоритетДопПризнака И  
			 СтруктураНастроекОбмена.ДатаРегистрации = ВДЗ.ДатаРегистрации Тогда
			Возврат Истина;
		КонецЕсли; 
		
		РезультатРегистрации = РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
		
		Если РезультатРегистрации = Ложь Тогда 
			ТекстСообщения = "*оду. Объект не удалось зарегистрировать, попробуйте еще раз.";
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТекстСообщения <> "" Тогда
		СтруктураНастроекОбмена.Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции 


Функция ПроходитПровекуНаОграничениеОрганизаций(СтруктураНастроекОбмена, Источник)
	
	//TODO:  Прописать проверку в С_оду_БазыУчастникиОбмена при добавлении объекта в ТЧ.Состав 
	// на существование реквизита "Организация", если ТЧ.Организации есть отбор
	Если СтруктураНастроекОбмена.ЕстьОграничениеНаОрганизации = Истина Тогда 
		
		Если СтруктураНастроекОбмена.МетаданныеНаименование = "Документы" Тогда	
			
			//01 - проверка в Организации
			ОрганизацияИсточника = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(Источник, "Организация");
			Если ОрганизацияИсточника <> Неопределено Тогда
				Если СтруктураНастроекОбмена.select.Найти(ОрганизацияИсточника) <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			
			//02 Может быть в ссылке 
			ОрганизацияИсточника = пр_Общий.ДанныеИБПоСсылкам(СтруктураНастроекОбмена.ОбъектОбмена, "Организация", СтруктураНастроекОбмена.ИмяТипаXML, "Структура"); 
			Если ОрганизацияИсточника <> "" Тогда          
				Если СтруктураНастроекОбмена.select.Найти(ОрганизацияИсточника.Организация) <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
			Иначе
				//03 РеквизитОрганизация может быть "ГоловнаяОрганизация" <> "Организация"
				//TODO:  Создать таблицу сопоставлений реквизитов в настройках С_оду_БазыУчастникиОбмена.Состав 
				// ИЛИ в Индивидуальных настройках в ОМ.оду_ОбменДанными.РазрешенаРегистрацияОбъектаОбменаПоОтбору() ИЛИ ПроходитИндивидуальныеНастройкиОтборовРегистрацииОбъектовОбмена
			КонецЕсли;
			
			Возврат Ложь; 
			
			//ИначеЕсли ТипЗнч(СтруктураНастроекОбмена.ОбъектОбмена) = Тип("СправочникСсылка.Организации")  Тогда
		ИначеЕсли СтруктураНастроекОбмена.ИмяТипаXML = "CatalogRef.Организации"	Тогда 
			Возврат СтруктураНастроекОбмена.select.Найти(СтруктураНастроекОбмена.ОбъектОбмена) <> Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


//Должна быть всегда одна запись, по объекту
Функция РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена, Удалить = Ложь)	Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	Результат = Истина;
	
	Попытка
		
		Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураНастроекОбмена); 
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(СтруктураНастроекОбмена.ОбъектОбмена)Тогда
			//Запись.ДатаРегистрации = ?(СтруктураНастроекОбмена.Свойство("ДатаРегистрации"), СтруктураНастроекОбмена.ДатаРегистрации, ТекущаяДатаСеанса());
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область  ВЫГРУЗКА

// Описание алгоритма 
// 01 Обход по всем УО по приоритету
// 02 Проверка связи
// 03 Новая порция для выгрузки 
//	??? Не выгружать При ошибках, 
// 04
Функция ВыполнитьВыгрузкуДанных(НастройкиТекущейБД, НомерВыполнения = 1, СсылкаУО = Неопределено, ЭтоРегламент = Ложь)	Экспорт
	
	//После выгрузки сразу загрузка
	НомерВыполнения = НомерВыполнения + 1;
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
	//
	Попытка
		
		//01 Собрать данные для проверки
		
		// Исключение ошибок
		// Сбор по приоритету с группировкой по самолету и метаданным
		// Данные ответа. Разрешение коллизий, 
		// Данные при ошибках, проверки данных
		
		
		//Цикл по УО
		//TODO:  Возможно разные мх выгрузки
		// 1. Последовательно по участникам обмена, по приоритету
		// 2. Выгружать/ загружать по приоритету пока есть, хоть что-то
		// 3. По коэффициенту по объему информации
		// 4. Чередовать выгрузку загрузку или по приоритету + по графику- времени
		//ВыборкаУО = Модуль.ДанныеОбУчастникахОбмена();
		//Пока ВыборкаУО.Следующий() Цикл
		МассивСтруктурУчастниковОбмена = Модуль.ДанныеОбУчастникахОбмена(НастройкиТекущейБД, СсылкаУО);
		Для каждого ВыборкаУО Из МассивСтруктурУчастниковОбмена  Цикл
			
			Если ЭтоРегламент = Истина Тогда
				Если ВыборкаУО.ИспользоватьРегламентВыгрузкиДанных = Ложь Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			
			ИДБазыПриемник = ВыборкаУО.ИДБазыПриемник;
			//ПараметрыПодключения = Модуль.ПараметрыПодключенияПоСсылкеУО(ВыборкаУО.БазаДанных);
			
			//01 есть ли связь
			СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ВыборкаУО, , "ping");
			Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
				Продолжить;			
			КонецЕсли; 
			
			
			//03 Процесс Выполнить выгрузку
			//03.1 Запись в РС_Состояний, что выгружается
			//TODO:  
			ЗаписатьДанныеКВыгрузке(ИДБазыПриемник, НастройкиТекущейБД);
			
			//03.2 Обмен состояниями
			//03.3 Обновление, изменение состояний
			РезультатОбновления = ОбновитьСостоянияОбмена(ВыборкаУО, НастройкиТекущейБД, Истина);
			Если РезультатОбновления = "Прервана связь с приемником" Тогда
				Продолжить;			
			КонецЕсли; 
			
			
			//03.4 Выгрузка
			// группировать по типу метаданных, самолет - приоритет выгрузки, номер строки (ТЧ.Состав)
			// Передача приоритета выгрузки - для загрузки, в разрезе имени файла (минимум)
			РезультатВыгрузкиДанных = ВыгрузкаДанных(ВыборкаУО, НастройкиТекущейБД);
			//Если РезультатВыгрузкиДанных = Неопределено Тогда
			//	Продолжить;			
			//КонецЕсли; 
			
			//Смена состояния
			//04 Обмен состояниями
			// Удалить с регисрации и состояний
			// Регистрация ошибок, номер попытки +++
			РезультатОбновления = ОбновитьСостоянияОбмена(ВыборкаУО, НастройкиТекущейБД);
			Если РезультатОбновления = "Прервана связь с приемником" Тогда
				Продолжить;			
			КонецЕсли; 
			
		КонецЦикла;
		
		ВыполнитьРегламентОбмена(оду_ОбщийПовтИсп.РежимЗагрузка(), НомерВыполнения);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ВыполнитьВыгрузкуДанных", , Ошибка);	
		Возврат Ошибка;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

Функция	ТекстСбораДанныхДляВыгрузки()
	
	Возврат
		//TODO:  Тест
		"ВЫБРАТЬ
		//"ВЫБРАТЬ ПЕРВЫЕ 1
		//"ВЫБРАТЬ ПЕРВЫЕ #КоличествоОбъектовВПакетеОбмена
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена = 10 КАК ПереносТолькоСсылок,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_РегистрацияОбъектовОбмена.ДатаРегистрации, ДАТАВРЕМЯ(1, 1, 1)) < оду_СостояниеОбъектовОбмена.ДатаРегистрации
		|			ТОГДА оду_СостояниеОбъектовОбмена.ДатаРегистрации
		|		ИНАЧЕ оду_РегистрацияОбъектовОбмена.ДатаРегистрации
		|	КОНЕЦ КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) + 1 КАК НомерПопытки,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.Ссылка.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних(
		|				,
		|				ИДБазыИсточник = &ИДБазыИсточник
		|					И ИДБазыПриемник = &ИДБазыПриемник) КАК оду_ОшибкиОбменаСрезПоследних
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_БазыУчастникиОбменаСостав.Ссылка.ИДБазы
		|			И оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника = оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Выгрузка)
		|	И оду_РегистрацияОбъектовОбмена.ОбъектОбмена ЕСТЬ НЕ NULL 
		|	И ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) < &КоличествоПопытокПриОшибке
		|	И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = &ИДБазыИсточник
		|	И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|	И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ #КоличествоОбъектовВПакетеОбмена
		|	ВТ_Данные.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_Данные.НастройкаКонвертацииОбмена КАК НастройкаКонвертации,
		|	ВТ_Данные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_Данные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_Данные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_Данные.ПереносТолькоСсылок КАК ПереносТолькоСсылок,
		|	ВТ_Данные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Данные.РежимОбмена КАК РежимОбмена,
		|	ВТ_Данные.СостояниеОбмена КАК СостояниеОбмена,
		|	ВТ_Данные.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ_Данные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_Данные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_Данные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_Данные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_Данные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_Данные.НомерПопытки КАК НомерПопытки,
		|	ВТ_Данные.ОбъектОбмена КАК ОбъектОбмена,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.РежимОтладки КАК РежимОтладки,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПОД КАК ПОД,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПравилоВыгрузки КАК ПравилоВыгрузки,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПравилоЗагрузки КАК ПравилоЗагрузки,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПОДИзФайла КАК ПОДИзФайла,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ПутьКПОД КАК ПутьКПОД,
		|	ВТ_Данные.НастройкаКонвертацииОбмена.ИмяПВД КАК ИмяПВД,
		|	ЕСТЬNULL(ВыгруженныхФайлов.КолВыгруженныхФайлаОбмена, 0) КАК КолВыгруженныхФайлаОбмена
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена) КАК КолВыгруженныхФайлаОбмена
		|		ИЗ
		|			РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ГДЕ
		|			оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена <> """") КАК ВыгруженныхФайлов
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВТ_Данные.НастройкаКонвертацииОбмена <> &КонвертацииОбменаПустая
		|	И ВТ_Данные.НастройкаКонвертацииОбмена.ПометкаУдаления = ЛОЖЬ
		|	И ВТ_Данные.НастройкаКонвертацииОбмена.Используется = ИСТИНА
		|	И ЕСТЬNULL(ВыгруженныхФайлов.КолВыгруженныхФайлаОбмена, 0) < &КоличествоОбъектовВПакетеОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака
		|ИТОГИ
		|	КОЛИЧЕСТВО(ИДОбъекта)
		|ПО
		|	КонфигурацияКонвертацииОбмена,
		|	НастройкаКонвертации,
		|	ТипXMLОбъектаИсточника";
	
КонецФункции 

//TODO:  Доработать для разный конфигурацийКД + ВыгрузкаТОлькоСсылок
Функция ВыгрузкаДанных(ВыборкаУО, НастройкиТекущейБД) 	Экспорт
	
	Попытка
		 
		УстановитьПривилегированныйРежим(Истина);
		 
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстСбораДанныхДляВыгрузки();
		
		КоличествоПопытокПриОшибке = Макс(1, НастройкиТекущейБД.КоличествоПопытокПриОшибке);
		Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
		
		Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
		Запрос.УстановитьПараметр("ИДБазыПриемник", ВыборкаУО.ИДБазыПриемник);
		// Не выполнять выгрузку, если превышен 3-х кратный минимальный объем выгрузки (чтобы не было лишних выгрзок, большой очереди, скорость изменнеия данных)
		КолВоОбъектовВСостоянииОбмена = НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена * 3;
		Запрос.УстановитьПараметр("КолВоОбъектовВСостоянииОбмена", КолВоОбъектовВСостоянииОбмена);
		Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
		Запрос.УстановитьПараметр("КонфигурацияКДПустая", ПредопределенноеЗначение("Перечисление.оду_КонфигурацияКонвертацииДанных.ПустаяСсылка"));
		
		//Ограничение по выгрузке, когда много выгрузилось но мало загружено, например 3 * КоличествоОбъектовВПакетеОбмена 
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена);
		Запрос.УстановитьПараметр("КоличествоОбъектовВПакетеОбмена", КолВоОбъектовВСостоянииОбмена);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", КолВоОбъектовВСостоянииОбмена);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		// Создать место хранения файла обмена + создавать каталог по имени (коду) УО 
		ИмяФайлаОбмена = ИмяФайлаОбмена(НастройкиТекущейБД, ВыборкаУО.ИмяБазыПриемника);
		
		ВыборкаКонфигурацииКД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Определение с конфигурацией конвертации
		Пока ВыборкаКонфигурацииКД.Следующий() Цикл
			
			Если ВыборкаКонфигурацииКД.КонфигурацияКонвертацииОбмена = оду_ОбщийПовтИсп.КонфигурацияКД2() Тогда
				ВыборкаНастройкиКонвертации = ВыборкаКонфигурацииКД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				РезультатВыгрузки = ВыгрузитьОбъектыУОКД2(ВыборкаНастройкиКонвертации, ИмяФайлаОбмена, ВыборкаУО);
			КонецЕсли; 
			
		КонецЦикла; 
		
		Возврат РезультатВыгрузки;
		
			
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		ОтправитьСообщениеВТелеграмExchange("ВыгрузкаДанных", , пр_Ошибка,,,, ВыборкаУО);	
	 	Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 
// Обмен состояниями
// Обновление, изменение состояний
// Изменение состояний
// Разрешение коллизий, запись
Функция ОбновитьСостоянияОбмена(ПараметрыПодключения, НастройкиТекущейБД, ЭтоИсточник = Истина, ПолнаяСверка = Ложь)	Экспорт
	
	ИДБазыПриемник = ПараметрыПодключения.ИДБазыПриемник;
	
	// Объем выборки
	// Исключение ошибок, номер попытки +++
	ДанныеСостояний = ДанныеСостоянийВыгрузки(ИДБазыПриемник, НастройкиТекущейБД);
	
	РезультатОбновления = ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, ДанныеСостояний, ЭтоИсточник, ПолнаяСверка);
	Если РезультатОбновления = "Прервана связь с приемником" Тогда
		Возврат РезультатОбновления;
	ИначеЕсли ТипЗнч(РезультатОбновления) = Тип("Массив") Тогда
		РезультатОбновления = ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, РезультатОбновления, ЭтоИсточник, ПолнаяСверка);
	КонецЕсли; 
	
	Возврат РезультатОбновления;
	
КонецФункции 

Функция ОбновитьСостоянияОбменаДалее(ПараметрыПодключения, НастройкиТекущейБД, ДанныеСостояний, ЭтоИсточник, ПолнаяСверка = Ложь)	Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	Если ПолнаяСверка = Ложь Тогда
		Если ДанныеСостояний = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если ДанныеСостояний.Количество() = 0 Тогда
			Возврат Неопределено;		
		КонецЕсли; 
	КонецЕсли; 
	
	ТелоЗапроса = ЗаполненноеТелоЗапросаHTTP(ПараметрыПодключения.ИДБазыПриемник, НастройкиТекущейБД.ИДБазыИсточник, ДанныеСостояний);
	
	СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeStatus");
	
	Если СтруктураОтвета = Неопределено  Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	Если СтруктураОтвета.code = 200 Тогда
		ДанныеТЗ = ЗаполнитьТЗСостоянийОбменаИзТелаЗапроса(СтруктураОтвета);
	ИначеЕсли СтруктураОтвета.error = "Нет данных" Тогда
		Возврат Неопределено;		
	Иначе
		Возврат "Прервана связь с приемником";		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеТЗ)  Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеТЗ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОбновленияСостояниямиОбмена(ЭтоИсточник);
		Запрос.УстановитьПараметр("ТЗ", ДанныеТЗ);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;		
		КонецЕсли;
		
		ВДЗ = РЗ.Выбрать();
		
		ДанныеОтветаСостояний = Новый Массив;
		ДанныеОтветаУдаление = Новый Массив;
		ДанныеРазрешениеКоллизий = Новый Массив;
		МассивЗагруженныхФайловОбмена = Новый Массив;
		МассивЗапросаСсылок = Новый Массив;
		МассивЗапросаДвижений = Новый Массив;
		
		СтруктураПоОбъектуСостояний = СтруктураПоОбъектуСостояний();

		Пока ВДЗ.Следующий() Цикл
			
			ДобавлятьЗаписьНаИзменениеСостояния = Истина;
			
			СтруктураОтвета = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоОбъектуСостояний));
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВДЗ); 
			
			Если ВДЗ.Удалить Тогда
				ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
				Продолжить;
			КонецЕсли; 
			
			Если ВДЗ.СостояниеОбмена = ВДЗ.СостояниеОбменаВыгрузки И ВДЗ.СостояниеОбмена <> оду_ОбщийПовтИсп.СостояниеПроверкаДанных() Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка() Тогда
				
				СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
				
				//Разрешение коллизий по последней дате
				Если ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
					//TODO:  Добавить в запрос дату регистрации
					//СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииВыгрузки;
					СтруктураОтвета.ДатаРегистрации = ВДЗ.ДатаРегистрацииОбъекта;
				ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеПроверкаДанных() Тогда
					СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
				ИначеЕсли ВДЗ.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеЗагружен()  // Загружен объект обмена
					//TODO:  уже удалена, но не дошел ответ
					ИЛИ ВДЗ.СостояниеОбменаВыгрузки = Неопределено Тогда
					//ДанныеОтветаУдаление.Добавить(СтруктураОтвета);
					Если ЗначениеЗаполнено(СтруктураОтвета.ИмяФайлаОбмена)  Тогда
						МассивЗагруженныхФайловОбмена.Добавить(СтруктураОтвета.ИмяФайлаОбмена);
					КонецЕсли; 
					Продолжить;
				Иначе
					//Оставляем как есть
				КонецЕсли;
				
			Иначе //Выгрузка, ЗапросСсылки, ЗапросДвижений	
				
				Если ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
					СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимЗагрузка();
				ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросСсылки() Тогда
					// Записать в массив для проверки ссылки
					//МассивЗапросаСсылок.Добавить(СтруктураОтвета);
					//Продолжить;
					
					Если ВДЗ.ДанныеИзПриемника = Истина Тогда
						//TODO:  Подумать оставлять признак, без регистраци или менять с регистрацией
						СтруктураОтвета.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
						СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();
						
						Если  ВДЗ.ОбъектОбменаЗарегистрирован = Ложь Тогда
							МассивЗапросаСсылок.Добавить(СтруктураОтвета);
						КонецЕсли;
					Иначе
						
					КонецЕсли; 
					
				ИначеЕсли ВДЗ.РежимОбмена = оду_ОбщийПовтИсп.РежимЗапросДвижений() Тогда
					МассивЗапросаДвижений.Добавить(СтруктураОтвета);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеОтветаСостояний.Добавить(СтруктураОтвета);
			
			//Если СтруктураОтвета.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеРазрешениеКоллизий() Тогда
			//	ДанныеРазрешениеКоллизий.Добавить(СтруктураОтвета);
			//КонецЕсли; 
			
		КонецЦикла;
		
		РезультатЗаписи = РезультатЗаписиСостоянияОбменаИзМассива(ДанныеОтветаСостояний);
		РезультатЗаписи = РезультатЗаписиСостоянияОбменаИзМассива(ДанныеОтветаУдаление, Истина, ЭтоИсточник);
		
		#Область  Запросов_Ссылок_Движений
		
		// 
		//ОбработатьЗапросСсылок(МассивЗапросаСсылок);
		РезультатРегистрцииОбъектовОбмена = РезультатРегистрирацииОбъектовОбменаПоЗапросуСсылок(МассивЗапросаСсылок);
		//
		
		#КонецОбласти
		
		Если МассивЗагруженныхФайловОбмена.Количество() > 0 Тогда
			
			МассивЗагруженныхФайловОбменаСвернутый = Новый Массив; 
			Для каждого ИмяФайлаОбмена Из МассивЗагруженныхФайловОбмена Цикл
				Если МассивЗагруженныхФайловОбменаСвернутый.Найти(ИмяФайлаОбмена) = Неопределено Тогда
					МассивЗагруженныхФайловОбменаСвернутый.Добавить(ИмяФайлаОбмена);	
				КонецЕсли; 			
			КонецЦикла; 
			
			РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбменаСвернутый);
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Возврат  ДанныеОтветаСостояний;
		//Возврат  ДанныеРазрешениеКоллизий;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("exchangeStatus", , ОписаниеОшибки);	
		Возврат  ОписаниеОшибки;
	КонецПопытки;
	
КонецФункции 

//TODO:  
//Проверить изменить данные состояний по Запросу Ссылок и Движений
//Собрать ответ в ДанныеРазрешениеКоллизий, по этим состояниям (Удалять или Выгружаться будут)
//1. Проверить массив запросов ссылок
Процедура ОбработатьЗапросСсылок(МассивЗапросаСсылок)
	
	УстановитьПривилегированныйРежим(Истина);
	 
	Если МассивЗапросаСсылок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		
		ТЗ = Новый ТаблицаЗначений;
		
		ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("ИДБазыИсточник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТЗ.Колонки.Добавить("РежимОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_РежимОбмена"));
		ТЗ.Колонки.Добавить("СостояниеОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_СостоянияОбмена"));
		
		ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
		
		Для каждого СтруктураОтвета Из МассивЗапросаСсылок Цикл
			Нстр = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр, СтруктураОтвета); 
		КонецЦикла;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
			|	ТЗ.ИДОбъекта КАК ИДОбъекта,
			|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
			|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Данные.ИДОбъекта КАК ИДОбъекта,
			|	ВТ_Данные.ИДБазыИсточник КАК ИДБазыИсточник,
			|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
			|	&РежимОбменаЗапросСсылки КАК РежимОбмена,
			|	&СостояниеОбменаПроверкаДанных КАК СостояниеОбмена,
			|	ВТ_Данные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
			|	ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника, ВТ_Данные.ТипXMLОбъектаИсточника) КАК ТипXMLОбъектаПриемника,
			|	33 КАК ПриоритетОбмена,
			|	ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НомерСтроки, 1) КАК ПриоритетОбъекта,
			|	ВЫБОР
			|		КОГДА оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена = ЗНАЧЕНИЕ(Перечисление.оду_КонфигурацияКонвертацииДанных.ПустаяСсылка)
			|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.Ссылка.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена, НЕОПРЕДЕЛЕНО)
			|	КОНЕЦ КАК КонфигурацияКонвертацииОбмена
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
			|		ПО ВТ_Данные.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
			|		ПО ВТ_Данные.ТипXMLОбъектаИсточника = оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника
			|ГДЕ
			|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL";
			
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("РежимОбменаЗапросСсылки", оду_ОбщийПовтИсп.РежимЗапросСсылки());
		Запрос.УстановитьПараметр("СостояниеОбменаПроверкаДанных", оду_ОбщийПовтИсп.СостояниеПроверкаДанных());
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат;
		КонецЕсли; 
		
		
		ВДЗ = РЗ.Выбрать();
		
		Пока ВДЗ.Следующий() Цикл
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Запись.Записать();
		КонецЦикла;
		
	Исключение
		СтрокаСообщенияОбОшибке = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ОбработатьЗапросСсылок", , СтрокаСообщенияОбОшибке);	
	КонецПопытки; 
	
КонецПроцедуры

Функция ТекстЗапросаСбораДанныхОбмена()
	
	Возврат
		//"ВЫБРАТЬ ПЕРВЫЕ 50
		"ВЫБРАТЬ ПЕРВЫЕ #КоличествоОбъектовВПакетеОбмена
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	&ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных) КАК РежимОбмена,
		|	ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных) КАК СостояниеОбмена,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		//TODO:  проверить заново
		|	0 КАК НомерПопытки,
		|	оду_РегистрацияОбъектовОбмена.Пользователь КАК Пользователь,
		|	оду_РегистрацияОбъектовОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	ЕСТЬNULL(КоличествоОбъектовВСостоянииОбмена.КолВоОбъектовВСостоянииОбмена, 0) КАК КолВоОбъектовВСостоянииОбмена
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО оду_РегистрацияОбъектовОбмена.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник,
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(оду_СостояниеОбъектовОбмена.ИДОбъекта) КАК КолВоОбъектовВСостоянииОбмена
		|	ИЗ
		|		РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|	ГДЕ
		|		оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|		И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|		И оду_СостояниеОбъектовОбмена.СостояниеОбмена В (ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Выгрузка), ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.РазрешениеКоллизий), ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.ПроверкаДанных))
		|		И оду_СостояниеОбъектовОбмена.НомерПопытки <= &КоличествоПопытокПриОшибке) КАК КоличествоОбъектовВСостоянииОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL
		|	И оду_РегистрацияОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И ЕСТЬNULL(КоличествоОбъектовВСостоянииОбмена.КолВоОбъектовВСостоянииОбмена, 0) <= &КолВоОбъектовВСостоянииОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака
		|";
	
КонецФункции 

//TODO:  
// Описание алгоритма 
// Получаем данные 
// 01 Зарегистрированные, не выгруженные, не в загрузке
// 02 В Режиме обмена = "Выгрузка" и в состояниях "РазрешениеКоллизий", "ПроверкаДанных" (В случае ошибок)
// 03 Без Ошибок
// 04 Общее количество не > КоличествоОбъектовВПакетеОбмена
Функция ЗаписатьДанныеКВыгрузке(ИДБазыПриемник, НастройкиТекущейБД)	Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораДанныхОбмена();
	
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	Запрос.УстановитьПараметр("ИДБазыПриемник", ИДБазыПриемник);
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	// Не выполнять выгрузку, если превышен 3-х кратный минимальный объем выгрузки (чтобы не было лишних выгрзок, большой очереди, скорость изменнеия данных)
	КолВоОбъектовВСостоянииОбмена = НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена * 3; 
	Запрос.УстановитьПараметр("КолВоОбъектовВСостоянииОбмена", КолВоОбъектовВСостоянииОбмена);
	
	//Ограничение по выгрузке, когда много выгрузилось но мало загружено, например 3 * КоличествоОбъектовВПакетеОбмена 
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", НастройкиТекущейБД.КоличествоОбъектовВПакетеОбмена);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоОбъектовВПакетеОбмена", КолВоОбъектовВСостоянииОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//Блокировка
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		ВДЗ = РезультатЗапроса.Выбрать();
		ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ);
		
	Исключение
		
		ОтправитьСообщениеВТелеграмExchange("ЗаписатьДанныеКВыгрузке", , ОписаниеОшибки(), ИДБазыПриемник);	
		ОтменитьТранзакцию();
		
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
КонецФункции 

Функция ТекстЗапросаСбораСостоянийВыгрузки()
	
	Возврат
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ВыгрузкаДанных)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Выгрузка)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загрузка)
		|	И оду_СостояниеОбъектовОбмена.НомерПопытки <= &КоличествоПопытокПриОшибке
		|
		|УПОРЯДОЧИТЬ ПО
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена.Порядок
		//|ИТОГИ ПО
		//|	СостояниеОбмена
		|";
	
КонецФункции 

//TODO:  
// Описание алгоритма 
// Получаем данные 
// 01 Зарегистрированные, не выгруженные, не в загрузке
// 02 В Режиме обмена = "Выгрузка" и в состояниях "РазрешениеКоллизий", "ПроверкаДанных" (В случае ошибок)
// 03 Без Ошибок
// 04 Общее количество не > КоличествоОбъектовВПакетеОбмена
Функция ДанныеСостоянийВыгрузки(ИДБазыПриемник, НастройкиТекущейБД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораСостоянийВыгрузки();
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", ИДБазыПриемник);
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", НастройкиТекущейБД.КоличествоПопытокПриОшибке);
	
	РЗ = Запрос.Выполнить();//.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	//ДанныеСостоянийВыгрузки = пр_Общий.МассивСтруктурПоЗапросу(РЗ, ОбходРезультатаЗапроса.ПоГруппировкам, Ложь);
	ДанныеСостоянийВыгрузки = пр_Общий.МассивСтруктурПоЗапросу(РЗ);
	Возврат ДанныеСостоянийВыгрузки;
	
КонецФункции 


#Область  УОД

//Функция ВыгрузитьОбъектыОбмена(ПараметрыКонвертации, ИмяФайлаОбмена, ВыборкаУО) Экспорт
//	
//	Если ПараметрыКонвертации.КонфигурацияКонвертацииОбмена = ПредопределенноеЗначение("Перечисление.оду_КонфигурацияКонвертацииДанных.КД2") Тогда
//		РезультатВыгрузки = ВыгрузитьОбъектыУОКД2(ПараметрыКонвертации, ИмяФайлаОбмена, ВыборкаУО);
//	ИначеЕсли ПараметрыКонвертации.КонфигурацияКонвертацииОбмена = ПредопределенноеЗначение("Перечисление.оду_КонфигурацияКонвертацииДанных.КД3") Тогда
//		//TODO:  	
//		РезультатВыгрузки = Неопределено;
//	Иначе
//		//TODO: 
//		РезультатВыгрузки = Неопределено;
//	КонецЕсли; 
//	
//	Возврат РезультатВыгрузки;
//	
//КонецФункции 

//Функция ВыгрузитьОбъектыУОКД2(ВыборкаПоПереносуТолькоСсылок, ИмяФайлаОбмена, ВыборкаУО) Экспорт
//	
//	Попытка
//		//
//		//Пока ВыборкаПоПереносуТолькоСсылок.Следующий() Цикл
//		//	
//		//	ПереносТолькоСсылок = ВыборкаПоПереносуТолькоСсылок.ПереносТолькоСсылок;
//			ПереносТолькоСсылок = Ложь;
//		
//		
//			КолОбъектовВОбмене = ?(ЗначениеЗаполнено(ВыборкаУО.КоличествоОбъектовВПакетеОбмена), ВыборкаУО.КоличествоОбъектовВПакетеОбмена, 25);
//			//КолОбъектовОбмена = ВыборкаПоПереносуТолькоСсылок.Количество();
//			КолОбъектовОбмена = ВыборкаПоПереносуТолькоСсылок.ИДОбъекта;
//			КолЦиклов = КолОбъектовОбмена / КолОбъектовВОбмене;
//			Если Цел(КолЦиклов) <> КолЦиклов Тогда
//				КолЦиклов = Окр(КолЦиклов + 0.5);
//			КонецЕсли; 
//			
//			Этап = 1;
//			
//			СоответвиеПараметровВыгрузки = Новый Соответствие();
//			
//			МассивДанныхДалее = Новый Массив;
//			
//			Сч = 1;
//			СтрокаОтвета = "";
//			КолТекЭл = 1;
//			
//			ОбработкаОбменаДанных = Неопределено;
//			
//			
//			РезультатВыгрузки = Истина;
//			
//			Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
//			ТаблицаСостоянийОбмена = Модуль.ТаблицаСостоянийОбмена(); 
//			
//			//Могут быть разные типы данных
//			ИмяТипаXML_До = Неопределено;
//			
//			ВыборкаПоТипуXML = ВыборкаПоПереносуТолькоСсылок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//			Пока ВыборкаПоТипуXML.Следующий() Цикл
//				
//				ИмяТипаXML = ВыборкаПоТипуXML.ТипXMLОбъектаИсточника;
//				МассивДанныхТек = Новый Массив;
//				//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
//				
//				ВДЗ = ВыборкаПоТипуXML.Выбрать();
//				
//				Пока ВДЗ.Следующий() Цикл
//					
//					ЭлОбмена = ВДЗ.ОбъектОбмена;
//					
//					//ИмяТипаXML = ВДЗ.ТипXMLОбъектаИсточника;
//					
//					//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
//					
//					//МассивДанныхТек = ?(СтрТипа = Неопределено, Новый Массив, СтрТипа);
//					
//					МассивДанныхТек.Добавить(ЭлОбмена);
//					
//					//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, МассивДанныхТек);		
//					
//					Нстр = ТаблицаСостоянийОбмена.Добавить();
//					ЗаполнитьЗначенияСвойств(Нстр, ВДЗ); 
//					
//					//ИмяТипаXML_До = ИмяТипаXML;
//					
//					Если (Сч = КолОбъектовВОбмене ИЛИ КолТекЭл >= КолОбъектовОбмена) //И ИмяТипаXML_До <> Неопределено 
//						И ТаблицаСостоянийОбмена.Количество() > 0 Тогда
//						
//						ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
//						ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
//						
//						Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
//							Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
//							Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
//						КонецЦикла; 
//						
//						СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
//						
//						СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ВыборкаУО);
//						
//						МассивДанныхДалее = Новый Массив;
//						СоответвиеПараметровВыгрузки = Новый Соответствие();
//						ИмяТипаXML_До = Неопределено;
//						ТаблицаСостоянийОбмена.Очистить();
//						
//						Этап = Этап + 1;
//						Сч = 0;	
//						
//					КонецЕсли; 
//					
//					Сч = Сч + 1;
//					КолТекЭл = КолТекЭл + 1;
//					
//				КонецЦикла; //ВДЗ 
//				
//			КонецЦикла; //ВыборкаПоТипуXML 
//			
//			Если ТаблицаСостоянийОбмена.Количество() > 0 Тогда
//				
//				ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
//				ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
//				
//				Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
//					Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
//					Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
//				КонецЦикла; 
//				
//				СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
//				
//				СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ВыборкаУО);
//				
//			КонецЕсли; 
//			
//		//КонецЦикла; //ВыборкаПоПереносуТолькоСсылок
//		
//		Возврат РезультатВыгрузки; 
//		
//	Исключение
//		ОтправитьСообщениеВТелеграмExchange("ВыгрузитьОбъектыУОКД2", , ОписаниеОшибки(), ВДЗ.ИДБазыПриемник);	
//		Возврат Неопределено;
//	КонецПопытки; 
//	
//КонецФункции 


Функция ТаблицаСостоянийОбмена() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("ИДБазыИсточник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("ИДБазыПриемник", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТЗ.Колонки.Добавить("РежимОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_РежимОбмена"));
	ТЗ.Колонки.Добавить("СостояниеОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_СостоянияОбмена"));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаИсточника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ТипXMLОбъектаПриемника", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("ДатаРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТЗ.Колонки.Добавить("ДатаВыгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТЗ.Колонки.Добавить("ИмяФайлаОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТЗ.Колонки.Добавить("ПриоритетОбмена", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("ПриоритетОбъекта", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("ПриоритетДопПризнака", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("НомерПопытки", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТЗ.Колонки.Добавить("СменаИсточникаПриеменикаПриРазрешенииКоллизий", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("КонфигурацияКонвертацииОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.оду_КонфигурацияКонвертацииДанных"));
	
	//Доп. колонки сервисные
	ТЗ.Колонки.Добавить("ОбъектОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТЗ.Колонки.Добавить("ОписаниеОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТЗ.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	
	Возврат ТЗ;
	
КонецФункции 

Функция РезультатВыгрузкиОбъектовИзНастроекУОКД2(СтруктураПараметров) Экспорт
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Если пр_Модуль <> Неопределено Тогда
		Возврат пр_Модуль.РезультатВыгрузкиОбъектовИзНастроекУОКД2(СтруктураПараметров);
	КонецЕсли; 
	
КонецФункции 

//TODO:  
//Определить какие объекты при выгрузки выдают ошибки, либо правило, которое можем исключить
//Функция ВыгрузитьОбъектыУОКД2(ВыборкаПоПереносуТолькоСсылок, ИмяФайлаОбмена, ВыборкаУО) Экспорт
Функция ВыгрузитьОбъектыУОКД2(ВыборкаНастройкиКонвертации, ИмяФайлаОбмена, ВыборкаУО) Экспорт
	
	Попытка
		
		ТаблицаСостоянийОбмена = ТаблицаСостоянийОбмена(); 
		
		//Пока ВыборкаПоПереносуТолькоСсылок.Следующий() Цикл
		//	КолОбъектовОбмена = ВыборкаПоПереносуТолькоСсылок.ИДОбъекта;
		//	ПереносТолькоСсылок = ВыборкаПоПереносуТолькоСсылок.ПереносТолькоСсылок;
		//	
		//	ВыборкаПоТипуXML = ВыборкаПоПереносуТолькоСсылок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНастройкиКонвертации.Следующий() Цикл
			
			//ПараметрыКонвертации = оду_ОбщийПовтИсп.ПараметрыКонвертацииОбъекта();
			ПараметрыКонвертации = ПараметрыКонвертацииОбъекта();
			ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВыборкаНастройкиКонвертации); 
			
			КолОбъектовОбмена = ВыборкаНастройкиКонвертации.ИДОбъекта;
			ПереносТолькоСсылок = Ложь;
		
			ВыборкаПоТипуXML = ВыборкаНастройкиКонвертации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			КолОбъектовВОбмене = ?(ЗначениеЗаполнено(ВыборкаУО.КоличествоОбъектовВПакетеОбмена), ВыборкаУО.КоличествоОбъектовВПакетеОбмена, 25);
			
			
			КолЦиклов = КолОбъектовОбмена / КолОбъектовВОбмене;
			Если Цел(КолЦиклов) <> КолЦиклов Тогда
				КолЦиклов = Окр(КолЦиклов + 0.5);
			КонецЕсли; 
			
			Этап = 1;
			
			СоответвиеПараметровВыгрузки = Новый Соответствие();
			
			Сч = 1;
			СтрокаОтвета = "";
			КолТекЭл = 1;
			
			ОбработкаОбменаДанных = Неопределено;
			
			
			РезультатВыгрузки = Истина;
			
			//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
			//ТаблицаСостоянийОбмена = Модуль.ТаблицаСостоянийОбмена(); 
			
			//Могут быть разные типы данных
			ИмяТипаXML_До = Неопределено;
			
			Пока ВыборкаПоТипуXML.Следующий() Цикл
				
				ИмяТипаXML = ВыборкаПоТипуXML.ТипXMLОбъектаИсточника;
				МассивДанныхТек = Новый Массив;
				//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
				
				ВДЗ = ВыборкаПоТипуXML.Выбрать();
				
				Пока ВДЗ.Следующий() Цикл
					
					ЭлОбмена = ВДЗ.ОбъектОбмена;
					
					//ИмяТипаXML = ВДЗ.ТипXMLОбъектаИсточника;
					
					//СтрТипа = СоответвиеПараметровВыгрузки.Получить(ИмяТипаXML);
					
					//МассивДанныхТек = ?(СтрТипа = Неопределено, Новый Массив, СтрТипа);
					
					МассивДанныхТек.Добавить(ЭлОбмена);
					
					//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, МассивДанныхТек);		
					
					Нстр = ТаблицаСостоянийОбмена.Добавить();
					ЗаполнитьЗначенияСвойств(Нстр, ВДЗ); 
					
					//ИмяТипаXML_До = ИмяТипаXML;
					
					Если (Сч = КолОбъектовВОбмене ИЛИ КолТекЭл >= КолОбъектовОбмена) //И ИмяТипаXML_До <> Неопределено 
						И ТаблицаСостоянийОбмена.Количество() > 0 Тогда
						
						ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
						ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
						
						Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
							Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
							Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
						КонецЦикла; 
						
						СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
						
						СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
						
						МассивДанныхТек = Новый Массив;
						СоответвиеПараметровВыгрузки = Новый Соответствие();
						ИмяТипаXML_До = Неопределено;
						ТаблицаСостоянийОбмена.Очистить();
						
						Этап = Этап + 1;
						Сч = 0;	
						
					КонецЕсли; 
					
					Сч = Сч + 1;
					КолТекЭл = КолТекЭл + 1;
					
				КонецЦикла; //ВДЗ 
				
			КонецЦикла; //ВыборкаПоТипуXML 
			
			Если ТаблицаСостоянийОбмена.Количество() > 0 Тогда
				
				ДобавочноеИмя = " " + Этап + "_" + КолЦиклов + ".xml";
				ИмяФайлаОбменаДалее = ИмяФайлаОбмена + ДобавочноеИмя;
				
				Для каждого Нстр Из ТаблицаСостоянийОбмена Цикл
					Нстр.ИмяФайлаОбмена = ИмяФайлаОбменаДалее;
					Нстр.ДатаВыгрузки = ТекущаяДатаСеанса();
				КонецЦикла; 
				
				СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", МассивДанныхТек, ПереносТолькоСсылок));		
				
				СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
				
				ТаблицаСостоянийОбмена.Очистить();
				
			КонецЕсли; 
			
		КонецЦикла;  //ВыборкаНастройкиКонвертации //ВыборкаПоПереносуТолькоСсылок
		
		Возврат РезультатВыгрузки; 
		
	Исключение
		ОтправитьСообщениеВТелеграмExchange("ВыгрузитьОбъектыУО", , ОписаниеОшибки(), ВДЗ.ИДБазыПриемник);	
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции 

//ВыборкаУО
//	КонфигурацияКонвертацииОбмена
//	ПОДИзФайла
//  ПутьКПОД
//	ПОДИзОбработкиБСП
//	ОбработкаОтладкиБСП
//	ПОД
//	РежимОтладки
Функция ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена = Неопределено, СоответвиеПараметровВыгрузки = Неопределено, 
										ПутьКФайлуОбмена, ОбработкаОбменаДанных = Неопределено, ПараметрыКонвертации)    Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбработкаОбменаДанных = Неопределено Тогда
	
		//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		//ОбработкаОбменаДанных = Модуль.ОбработкаОбменаДанных(ВыборкаУО.ПОД, ВыборкаУО.РежимОтладки);
		Если ПараметрыКонвертации.ПОДИзФайла Тогда
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(ПараметрыКонвертации.ПутьКПОД, КодировкаТекста.UTF8);
			ПОД = ТекстДок.ПолучитьТекст();
		ИначеЕсли  ПараметрыКонвертации.ПОДИзОбработкиБСП И ЗначениеЗаполнено(ПараметрыКонвертации.ОбработкаОтладкиБСП) Тогда
			ТекстДок = Новый ТекстовыйДокумент;
			МакетПравилОбмена = ПараметрыКонвертации.ОбработкаОтладкиБСП.ПолучитьМакет("ПравилаОбменаДанных");
			МакетПравилОбмена.Записать(ТекстДок);
			ПОД = ТекстДок.ПолучитьТекст();
		ИначеЕсли ЗначениеЗаполнено(ПараметрыКонвертации.ПОД)  Тогда 
			ПОД = ПараметрыКонвертации.ПОД;	
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "*оду. Не указано правило обмена данными (ПОД) в настройках обмена";
			Сообщение.Сообщить(); 
			Возврат Ложь;	
		КонецЕсли; 
		
		
		ОбработкаОбменаДанных = оду_ОбщийПовтИсп.ОбработкаОбменаДанныхКД2(ПОД, ПараметрыКонвертации);
		
	КонецЕсли; 
	
	Если ОбработкаОбменаДанных = Неопределено Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	//ПодготовитьОбработкуВыгрузки
	// Параметры подключения
	ОбработкаОбменаДанных.ИмяФайлаОбмена	= ПутьКФайлуОбмена;

	
	//TODO:  проверить
	Если ТаблицаСостоянийОбмена <> Неопределено Тогда
		СтруктураДанных = ОбработкаОбменаДанных.Данные;
		СтруктураДанных.СоответвиеПараметровВыгрузки = СоответвиеПараметровВыгрузки; 
		СтруктураДанных.ТаблицаСостоянийОбмена = ТаблицаСостоянийОбмена;
		
		ОбработкаОбменаДанных.Данные = СтруктураДанных;
	КонецЕсли; 
	
	ОбработкаОбменаДанных.ВыполнитьВыгрузку();
	
	Если ОбработкаОбменаДанных.ФлагОшибки Тогда
		ТекстСообщения = НСтр("ru = 'При переносе сведений о пользователях произошли ошибки.'");
		Результат = Ложь;
		//УдалитьФайлы(ИмяФайлаПравилОбмена);
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Если ТаблицаСостоянийОбмена <> Неопределено Тогда
		ЗаписатьСостоянияПослеВыгрузкиОбъектов(СтруктураДанных.ТаблицаСостоянийОбмена, Результат);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьСостоянияПослеВыгрузкиОбъектов(ТаблицаСостоянийОбмена, ВыгруженоБезОшибок)
	
	Если ВыгруженоБезОшибок = Истина Тогда
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена;
	Иначе	
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("Обработан", Истина));
	КонецЕсли; 	
	
	Если ТаблицаДляЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
		
	НачатьТранзакцию();
	
	Попытка
		
		Если ВыгруженоБезОшибок = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДляЗаписи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
		КонецЕсли; 
		
		Для каждого Стр Из ТаблицаДляЗаписи Цикл
			
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Стр);
			Если ВыгруженоБезОшибок = Истина Тогда
				Запись.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
			КонецЕсли; 
			Запись.Записать();
			
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ЗаписатьСостоянияПослеВыгрузкиОбъектов", , ОписаниеОшибки);	
	КонецПопытки;
	
КонецФункции 

Функция КаталогФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника)  Экспорт
	
	КаталогОбмена = НастройкиТекущейБД.КаталогОбмена;
	Если ЗначениеЗаполнено(КаталогОбмена)  Тогда
		ПолныйПутьККаталогу = КаталогОбмена + "\" + НастройкиТекущейБД.КодБазыДанных + "_" + ИмяБазыПриемника;
		КаталогСуществует = пр_Общий.КаталогСуществует(ПолныйПутьККаталогу);
		Если КаталогСуществует = Ложь Тогда
			ПолныйПутьККаталогу = ""; //По умолчанию	
		КонецЕсли; 
	Иначе
		ПолныйПутьККаталогу = ""; //По умолчанию	
	КонецЕсли; 
	
	Возврат  ПолныйПутьККаталогу;
	
КонецФункции 


Функция ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника)  Экспорт
	
	ИмяФайлаОбмена = "";
	ПолныйПутьККаталогу = КаталогФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника);
	Если ЗначениеЗаполнено(ПолныйПутьККаталогу)  Тогда
		ДатаОбмена = СтрЗаменить(Строка(ТекущаяДатаСеанса()),".", "");
		ДатаОбмена = СтрЗаменить(ДатаОбмена,":", "");
		ИмяФайлаОбмена = ПолныйПутьККаталогу + "\УОД " + ДатаОбмена;// + " " + пр_Общий.СгенерироватьСлучайныйТекст(3);
		Возврат  ИмяФайлаОбмена;
	КонецЕсли; 
	
	ИмяФайлаОбмена = КаталогВременныхФайлов(); //По умолчанию			
	
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 


#КонецОбласти

#КонецОбласти

#Область  ЗАГРУЗКА

//TODO:  Обработать наличие ошибок в файле выгрузки и передачи в состоянии до объекта ошибки
Функция ТекстЗапросаСбораДанныхДляЗагрузки()
	Возврат
		"ВЫБРАТЬ
		|	оду_НастройкиУчастниковОбмена.Ссылка КАК СсылкаУО,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	МАКСИМУМ(оду_НастройкиУчастниковОбмена.ИспользоватьРегламентЗагрузкиДанных) КАК ИспользоватьРегламентЗагрузкиДанных,
		|	оду_НастройкиУчастниковОбмена.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.Код + "" - "" + оду_НастройкиУчастниковОбмена.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.ИДБазы + "")"" КАК ПредставлениеИсточника,
		|	МАКСИМУМ(оду_СостояниеОбъектовОбмена.НомерПопытки) КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		//TODO:  Доделать - применяется при выборе Обработки Загрузки
		|	оду_НастройкиТекущяБД.РежимОтладки КАК РежимОтладки,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетОбмена) КАК ПриоритетОбмена,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетОбъекта) КАК ПриоритетОбъекта,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака) КАК ПриоритетДопПризнака,
		|	МИНИМУМ(оду_СостояниеОбъектовОбмена.ДатаВыгрузки) КАК ДатаВыгрузки
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_НастройкиУчастниковОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_НастройкиУчастниковОбмена.ИДБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_НастройкиТекущяБД
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_НастройкиТекущяБД.ИДБазы
		|			И (оду_НастройкиТекущяБД.Ссылка.ТекущаяБД = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних КАК оду_ОшибкиОбменаСрезПоследних
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|			И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = оду_ОшибкиОбменаСрезПоследних.ИмяФайлаОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|	И оду_СостояниеОбъектовОбмена.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загрузка)
		|	И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = &ИДБазыПриемник
		|	И ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) < &КоличествоПопытокПриОшибке
		|	И оду_НастройкиТекущяБД.Ссылка ЕСТЬ НЕ NULL 
		|	И оду_НастройкиУчастниковОбмена.Ссылка ЕСТЬ НЕ NULL 
		|	И оду_НастройкиУчастниковОбмена.Используется = ИСТИНА
		|	И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник,
		|	оду_НастройкиУчастниковОбмена.Ссылка,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена,
		|	оду_НастройкиУчастниковОбмена.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.Код + "" - "" + оду_НастройкиУчастниковОбмена.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.ИДБазы + "")"",
		|	оду_НастройкиТекущяБД.РежимОтладки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака,
		|	ДатаВыгрузки
		|ИТОГИ ПО
		|	СсылкаУО,
		|	КонфигурацияКонвертацииОбмена
		|";

КонецФункции 

//УО - СправочникСсылка - оду_БазыУчастникиОбмена
Функция ПараметрыКонвертацииУО(УО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.РежимОтладки, ЛОЖЬ) КАК РежимОтладки,
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена, НЕОПРЕДЕЛЕНО) КАК КонфигурацияКонвертацииОбмена,
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.ПравилоЗагрузки, """") КАК ПравилоЗагрузки,
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки, """") КАК ПутьКОбработкеОтладки,
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП, ЛОЖЬ) КАК ИспользоватьОбработкуБСП,
		|	ЕСТЬNULL(оду_НастройкиТекущяБД.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладкиБСП
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_НастройкиТекущяБД
		|ГДЕ
		|	оду_НастройкиТекущяБД.ПометкаУдаления = ЛОЖЬ
		|	И оду_НастройкиТекущяБД.Ссылка = &Ссылка
		|	И оду_НастройкиТекущяБД.Используется = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", УО);
	
	РезультатЗапроса = Запрос.Выполнить();
	//ПараметрыКонвертацииОбъекта = оду_ОбщийПовтИсп.ПараметрыКонвертацииОбъекта();
	ПараметрыКонвертацииОбъекта = ПараметрыКонвертацииОбъекта();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВДЗ = РезультатЗапроса.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыКонвертацииОбъекта, ВДЗ); 	
		КонецЕсли; 
		 
	КонецЕсли; 
	
	Возврат ПараметрыКонвертацииОбъекта;
	
КонецФункции 	

// Исключение ошибок
// Сбор по приоритету с группировкой по самолету и метаданным
// Данные ответа. Разрешение коллизий, 
// Данные при ошибках, проверки данных
//
//Цикл по УО
//TODO:  Возможно разные мх выгрузки
// 1. Последовательно по участникам обмена, по приоритету
// 2. ВыборкаКонфигурацииКД
// 3. Выгружать/ загружать по приоритету пока есть, хоть что-то
// 4. По коэффициенту по объему информации
// 5. Чередовать выгрузку загрузку или по приоритету + по графику- времени
Функция ВыполнитьЗагрузкуДанных(НастройкиТекущейБД, НомерВыполнения = 1,  ЭтоРегламент = Ложь)	Экспорт
	
	Попытка
		
		//После загрузки сразу выгрузка
		НомерВыполнения = НомерВыполнения + 1;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаСбораДанныхДляЗагрузки();
		
		КоличествоПопытокПриОшибке = Макс(1, НастройкиТекущейБД.КоличествоПопытокПриОшибке);
		Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", КоличествоПопытокПриОшибке);
		Запрос.УстановитьПараметр("ИДБазыПриемник", НастройкиТекущейБД.ИДБазыИсточник);
		
		РезультатЗапроса = Запрос.Выполнить();
	
		//Если РезультатЗапроса.Пустой() Тогда
		//	Возврат Неопределено;
		//КонецЕсли; 
	
		ВыборкаУО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаУО.Следующий() Цикл
		
			Если ЭтоРегламент = Истина Тогда
				Если ВыборкаУО.ИспользоватьРегламентЗагрузкиДанных = Ложь Тогда 
					Продолжить;
					//Возврат Неопределено;
				КонецЕсли; 
			КонецЕсли; 
			
			ПараметрыКонвертации = ПараметрыКонвертацииУО(ВыборкаУО.СсылкаУО);
			ВыборкаКонфигурацииКД = ВыборкаУО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Определение с конфигурацией конвертации
			Пока ВыборкаКонфигурацииКД.Следующий() Цикл

				Если ВыборкаКонфигурацииКД.КонфигурацияКонвертацииОбмена = оду_ОбщийПовтИсп.КонфигурацияКД2() Тогда
					ВыборкаНастройкиКонвертации = ВыборкаКонфигурацииКД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					РезультатЗагрузки = ЗагрузитьДанныеКД2(ВыборкаКонфигурацииКД, НастройкиТекущейБД, ПараметрыКонвертации);
				КонецЕсли; 
				
			КонецЦикла; //ВыборкаКонфигурацииКД
			
		КонецЦикла; //ВыборкаУО
				
		//Когда оборвалась связь и не передались данные о загруженных данных
		ОбновитьСостоянияОбменаПоЗагруженнымДанным(НастройкиТекущейБД);
		
		ВыполнитьРегламентОбмена(оду_ОбщийПовтИсп.РежимВыгрузка(), НомерВыполнения);
		
	Исключение
		ОтправитьСообщениеВТелеграмExchange("ВыполнитьЗагрузкуДанных", , ОписаниеОшибки());	
	КонецПопытки; 
	
КонецФункции

Функция ОбновитьСостоянияОбменаПоЗагруженнымДанным(НастройкиТекущейБД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_БазыУчастникиОбмена.Ссылка КАК СсылкаУО,
		|	СостояниеВыгрузки.ИмяФайлаОбмена КАК ИмяФайлаОбмена
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК СостояниеВыгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ПО СостояниеВыгрузки.ИДБазыИсточник = оду_БазыУчастникиОбмена.ИДБазы
		|ГДЕ
		|	СостояниеВыгрузки.РежимОбмена = ЗНАЧЕНИЕ(Перечисление.оду_РежимОбмена.ЗагрузкаДанных)
		|	И СостояниеВыгрузки.СостояниеОбмена = ЗНАЧЕНИЕ(Перечисление.оду_СостоянияОбмена.Загружен)
		|	И СостояниеВыгрузки.ИДБазыПриемник = &ИДБазыПриемник
		|ИТОГИ ПО
		|	СсылкаУО";
	
	Запрос.УстановитьПараметр("ИДБазыПриемник", НастройкиТекущейБД.ИДБазыИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонфигурацииКД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								   
	Пока ВыборкаКонфигурацииКД.Следующий() Цикл
		
		МассивЗагруженныхФайловОбмена = Новый Массив;
		ВДЗ = ВыборкаКонфигурацииКД.Выбрать();
		
		Пока ВДЗ.Следующий()  Цикл
			МассивЗагруженныхФайловОбмена.Добавить(ВДЗ.ИмяФайлаОбмена);
		КонецЦикла; 
		
		ПараметрыПодключения = оду_ОбщийПовтИсп.ПараметрыПодключенияПоСсылкеУО(ВыборкаКонфигурацииКД.СсылкаУО); 
		
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, , "ping");
		Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураЗапроса = Новый Структура("МассивЗагруженныхФайловОбмена, МассивДанныхЗапросаСсылки", МассивЗагруженныхФайловОбмена, Неопределено); 
		РезультатОбновления = ОбновитьСостоянияОбменаПоИмениФайла(ПараметрыПодключения, НастройкиТекущейБД, СтруктураЗапроса, Ложь);
		Если РезультатОбновления = "Прервана связь с приемником" Тогда
			Продолжить;
		КонецЕсли; 
		
	КонецЦикла; 

КонецФункции 

//Функция ЗагрузитьДанныеКД2(ВыборкаКонфигурацииКД, МассивЗагруженныхФайловОбмена, МассивСтруктурОшибокФайловОбмена, МассивДанныхЗапросаСсылки = Неопределено)
Функция ЗагрузитьДанныеКД2(ВыборкаКонфигурацииКД, НастройкиТекущейБД, ПараметрыКонвертации)
	
	ВДЗ = ВыборкаКонфигурацииКД.Выбрать();
	МассивСтруктурОшибокФайловОбмена = Новый Массив;
	
	//TODO: Доработать, Подумать, 
	//1. Если будет загрузка не по очереди выгрузки - то данные могут быть не актуальные и вызвана ошибка
	//
	//Ограничение = 3;
	
	//Обработка идет каждого пакета по очереди
	//Пока ВДЗ.Следующий() И Ограничение > 0 Цикл
	Пока ВДЗ.Следующий() Цикл
	//Если ВДЗ.Следующий() Тогда //Загрузка осуществляется всегда с актуальным приоритетом, поэтому запрашивает каждый раз
			
		//03 Процесс Выполнить загрузку
		//TODO:  Доработать когда обмениваться будут данными напрямую, без файла
		ИмяФайлаОбмена = ВДЗ.ИмяФайлаОбмена;
		МассивДанныхЗапросаСсылки = Новый Массив;
		МассивЗагруженныхФайловОбмена = Новый Массив;
		ДокументыДляОтложенногоПроведения = Неопределено;
		
		ОписаниеОшибки = ВыполнитьЗагрузкуПоПутиФайла(ИмяФайлаОбмена, ВДЗ, ПараметрыКонвертации, МассивДанныхЗапросаСсылки, ДокументыДляОтложенногоПроведения);
		
		Если ОписаниеОшибки <> "" Тогда
			МассивСтруктурОшибокФайловОбмена.Добавить(Новый Структура("ИмяФайлаОбмена, ОписаниеОшибки", ИмяФайлаОбмена, ОписаниеОшибки));
			Продолжить;
			//Возврат Неопределено;
		КонецЕсли; 
		
		//ИДБазыИсточник = ВДЗ.ИДБазыИсточник;
		//03.1 Запись в РС_Состояний, что загрузили
		РезультатЗаписиСостояния = РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки(ИмяФайлаОбмена, ВДЗ.ПредставлениеИсточника, ДокументыДляОтложенногоПроведения);
		Если РезультатЗаписиСостояния <> Истина Тогда
			//Продолжить;
			Возврат Неопределено;
		КонецЕсли;
		
		МассивЗагруженныхФайловОбмена.Добавить(ИмяФайлаОбмена);
		
		Если МассивЗагруженныхФайловОбмена.Количество() = 0 И 
			МассивДанныхЗапросаСсылки.Количество() = 0 Тогда
			//Продолжить;
			Возврат Неопределено;
		КонецЕсли; 
		
		//01 есть ли связь
		ПараметрыПодключения = оду_ОбщийПовтИсп.ПараметрыПодключенияПоСсылкеУО(ВыборкаКонфигурацииКД.СсылкаУО); 
		
		//ВДЗ.Сбросить();
		//ВДЗ.Следующий();
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, , "ping");
		Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
			//Продолжить;
			Возврат Неопределено;
		КонецЕсли; 
		
		//03.2 Обмен состояниями
		//03.3 Обновление, изменение состояний
		СтруктураЗапроса = Новый Структура("МассивЗагруженныхФайловОбмена, МассивДанныхЗапросаСсылки", МассивЗагруженныхФайловОбмена, МассивДанныхЗапросаСсылки); 
		РезультатОбновления = ОбновитьСостоянияОбменаПоИмениФайла(ПараметрыПодключения, НастройкиТекущейБД, СтруктураЗапроса, Ложь);
		Если РезультатОбновления = "Прервана связь с приемником" Тогда
			//Продолжить;
			Возврат Неопределено;
		КонецЕсли; 
		
		//Ограничение = Ограничение - 1; //
		
	КонецЦикла;
	//КонецЕсли; 
				
	РезультатЗаписиОшибокПоИмениФайлаОбмена(МассивСтруктурОшибокФайловОбмена);
			//Возврат Неопределено;
КонецФункции 

Функция ВыполнитьЗагрузкуПоПутиФайла(ИмяФайлаОбмена, ВДЗ, ПараметрыКонвертации, МассивДанныхЗапросаСсылки = Неопределено, ДокументыДляОтложенногоПроведения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена)  Тогда
		Возврат "Файл обмена пустой";
	КонецЕсли; 
	
	ЭтотФайлСуществует = пр_Общий.ФайлСуществует(ИмяФайлаОбмена);
	Если ЭтотФайлСуществует = Ложь Тогда
		Возврат "Файл не найден: " + ИмяФайлаОбмена;
	КонецЕсли; 
	
	ОписаниеОшибки = ВыполнитьЗагрузкуКД2(ИмяФайлаОбмена, ВДЗ, ПараметрыКонвертации, МассивДанныхЗапросаСсылки, ДокументыДляОтложенногоПроведения);
	//Если ОписаниеОшибки <> "" Тогда
		Возврат ОписаниеОшибки;
	//КонецЕсли; 
	
КонецФункции


//оду_ОбменДанными.
//Получение XML	Документа. Чтение и запись ЧЗ УниверсальныйОбменДаннымиXML КД21
Функция ВыполнитьЗагрузкуКД2(ИмяФайлаОбмена, ВДЗ, ПараметрыКонвертации, МассивДанныхЗапросаСсылки = Неопределено, ДокументыДляОтложенногоПроведения = Неопределено)  Экспорт 
	
	ОписаниеОшибки = "";
	Обработка = оду_ОбщийПовтИсп.ОбработкаОбменаДанныхКД2(, ПараметрыКонвертации);
	Обработка.РежимОбмена = "Загрузка";
	Обработка.ИмяФайлаОбмена = ИмяФайлаОбмена;
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	//Обработка.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	Обработка.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	//Обработка.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
	Обработка.ОптимизированнаяЗаписьОбъектов = Истина;
	//Обработка.ОптимизированнаяЗаписьОбъектов = Ложь;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ОбрезатьСтрокиСправа = Истина;
	//Обработка.ИспользоватьТранзакции = Истина;
	//Обработка.КоличествоОбъектовНаТранзакцию = 500;
	
	//Для реализации мх "ЗапросСсылки" в оду_ЗаписатьНеЗаписанныеОбъекты
	оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	ЗаполнитьЗначенияСвойств(оду_СтруктураУО, ВДЗ); 
	Обработка.Данные = оду_СтруктураУО;
	Обработка.ВыполнитьЗагрузку(ОписаниеОшибки);
	
	МассивДанныхЗапросаСсылки = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(Обработка.Данные, "оду_МассивДанныхЗапросаСсылки");
	ДокументыДляОтложенногоПроведения = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(Обработка.Данные, "оду_ДокументыДляОтложенногоПроведения");
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ТекстЗапросаСбораДанныхОбменаПослеЗагрузки()
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыДляОтложенногоПроведения.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ДокументыДляОтложенногоПроведения.ИДОбъекта КАК ИДОбъекта,
		|	ДокументыДляОтложенногоПроведения.ДополнительныеСвойства КАК ДополнительныеСвойстваОбъекта
		|ПОМЕСТИТЬ ДокументыДляОтложенногоПроведения
		|ИЗ
		|	&ДокументыДляОтложенногоПроведения КАК ДокументыДляОтложенногоПроведения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ОписаниеОшибки КАК ОписаниеОшибки,
		|	оду_СостояниеОбъектовОбмена.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = &ИмяФайлаОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ДанныеОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ДанныеОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	ДанныеОбмена.РежимОбмена КАК РежимОбмена,
		|	ДанныеОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	БезСвязи.ИДОбъекта КАК ИДОбъекта,
		|	БезСвязи.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	БезСвязи.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта
		|ПОМЕСТИТЬ ВТ_БезСвязи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументыДляОтложенногоПроведения.ИДОбъекта КАК ИДОбъекта,
		|		ДокументыДляОтложенногоПроведения.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|		ДокументыДляОтложенногоПроведения.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта
		|	ИЗ
		|		ДокументыДляОтложенногоПроведения КАК ДокументыДляОтложенногоПроведения
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные КАК ВТ_Данные
		|			ПО (ВТ_Данные.ИДОбъекта = ДокументыДляОтложенногоПроведения.ИДОбъекта)
		|	ГДЕ
		|		ВТ_Данные.ИДОбъекта ЕСТЬ NULL) КАК БезСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_Данные.ИДБазыИсточник КАК ИДБазыИсточник,
		|			ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
		|			&ОтложенноеПроведение КАК СостояниеОбмена,
		|			ВТ_Данные.РежимОбмена КАК РежимОбмена,
		|			99 КАК ПриоритетОбмена
		|		ИЗ
		|			ВТ_Данные КАК ВТ_Данные
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_Данные.РежимОбмена,
		|			ВТ_Данные.ИДБазыИсточник,
		|			ВТ_Данные.ИДБазыПриемник) КАК ДанныеОбмена
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_Данные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Данные.РежимОбмена КАК РежимОбмена,
		|	&ОтложенноеПроведение КАК СостояниеОбмена,
		|	ВТ_Данные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_Данные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_Данные.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ_Данные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_Данные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_Данные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_Данные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_Данные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_Данные.НомерПопытки КАК НомерПопытки,
		|	ВТ_Данные.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ВТ_Данные.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ДокументыДляОтложенногоПроведения.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта,
		|	ВТ_Данные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыДляОтложенногоПроведения КАК ДокументыДляОтложенногоПроведения
		|		ПО ВТ_Данные.ИДОбъекта = ДокументыДляОтложенногоПроведения.ИДОбъекта
		|ГДЕ
		|	ДокументыДляОтложенногоПроведения.ИДОбъекта ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Данные.ИДОбъекта,
		|	ВТ_Данные.ИДБазыИсточник,
		|	ВТ_Данные.ИДБазыПриемник,
		|	ВТ_Данные.РежимОбмена,
		|	&СостояниеЗагружен,
		|	ВТ_Данные.ТипXMLОбъектаИсточника,
		|	ВТ_Данные.ТипXMLОбъектаПриемника,
		|	ВТ_Данные.ДатаРегистрации,
		|	ВТ_Данные.ДатаВыгрузки,
		|	ВТ_Данные.ИмяФайлаОбмена,
		|	ВТ_Данные.ПриоритетОбмена,
		|	ВТ_Данные.ПриоритетОбъекта,
		|	ВТ_Данные.ПриоритетДопПризнака,
		|	ВТ_Данные.НомерПопытки,
		|	ВТ_Данные.ОписаниеОшибки,
		|	ВТ_Данные.СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	"""",
		|	ВТ_Данные.КонфигурацияКонвертацииОбмена
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыДляОтложенногоПроведения КАК ДокументыДляОтложенногоПроведения
		|		ПО ВТ_Данные.ИДОбъекта = ДокументыДляОтложенногоПроведения.ИДОбъекта
		|ГДЕ
		|	ДокументыДляОтложенногоПроведения.ИДОбъекта ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_БезСвязи.ИДОбъекта,
		|	ВТ_БезСвязи.ИДБазыИсточник,
		|	ВТ_БезСвязи.ИДБазыПриемник,
		|	ВТ_БезСвязи.РежимОбмена,
		|	ВТ_БезСвязи.СостояниеОбмена,
		|	ВТ_БезСвязи.ТипXMLОбъектаИсточника,
		|	ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника, ВТ_БезСвязи.ТипXMLОбъектаИсточника),
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_БезСвязи.ПриоритетОбмена,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_БезСвязи.ДополнительныеСвойстваОбъекта,
		|	NULL
		|ИЗ
		|	ВТ_БезСвязи КАК ВТ_БезСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО ВТ_БезСвязи.ТипXMLОбъектаИсточника = оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника
		|			И ВТ_БезСвязи.ИДБазыИсточник = оду_БазыУчастникиОбменаСостав.Ссылка.ИДБазы";

КонецФункции 

Функция РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки(ИмяФайлаОбмена, ПредставлениеИсточника, ДокументыДляОтложенногоПроведения)	Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Если ТипЗнч(ДокументыДляОтложенногоПроведения) = Тип("ТаблицаЗначений") Тогда
		Если ДокументыДляОтложенногоПроведения.Количество() > 0 Тогда
			
			МассивУдаления = Новый Массив;
						    
			Для каждого Стр Из ДокументыДляОтложенногоПроведения Цикл
				Если ЗначениеЗаполнено(Стр.ДокументСсылка) Тогда
					Стр.ИДОбъекта = XMLСтрока(Стр.ДокументСсылка);
				Иначе
					//СтруктураОшибки = Новый Структура("", ) 
					ОтправитьСообщениеВТелеграмExchange("РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки", , "ПустаяСсылка",,,, Стр.ТипXMLОбъектаИсточника);	
					//ДокументыДляОтложенногоПроведения.Удалить(Стр);
					МассивУдаления.Добавить(Стр);
				КонецЕсли; 		
			КонецЦикла; 
			
			Для каждого Стр Из МассивУдаления Цикл
				ДокументыДляОтложенногоПроведения.Удалить(Стр);	
			КонецЦикла; 
			
			ТекстЗапроса = ТекстЗапросаСбораДанныхОбменаПослеЗагрузки();
			
			Запрос.УстановитьПараметр("ДокументыДляОтложенногоПроведения", ДокументыДляОтложенногоПроведения);
			Запрос.УстановитьПараметр("ОтложенноеПроведение", оду_ОбщийПовтИсп.СостояниеОтложенноеПроведение());
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТекстЗапроса = "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
			|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
			|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
			|	&СостояниеЗагружен КАК СостояниеОбмена,
			|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
			|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
			|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
			|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
			|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
			|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
			|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
			|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
			|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
			|	оду_СостояниеОбъектовОбмена.ОписаниеОшибки КАК ОписаниеОшибки,
			|	оду_СостояниеОбъектовОбмена.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
			|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
			|ИЗ
			|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
			|ГДЕ
			|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = &ИмяФайлаОбмена";

	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИмяФайлаОбмена", ИмяФайлаОбмена);
	Запрос.УстановитьПараметр("СостояниеЗагружен", оду_ОбщийПовтИсп.СостояниеЗагружен());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//Блокировка
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
		Блокировка.Заблокировать(); 
		
		ВДЗ = РезультатЗапроса.Выбрать();
		ЗаписатьСостоянияОбменаИзВыборкиЗапроса(ВДЗ);
		
	Исключение
		
		ОтправитьСообщениеВТелеграмExchange("РезультатЗаписиСостоянияПоИмениФайлаПослеЗагрузки", , ОписаниеОшибки(), ПредставлениеИсточника);	
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции 

// Обмен состояниями
// Обновление, изменение состояний
// Изменение состояний
// Разрешение коллизий, запись
Функция ОбновитьСостоянияОбменаПоИмениФайла(ПараметрыПодключения, НастройкиТекущейБД, СтруктураЗапроса, ЭтоИсточник = Истина)	Экспорт
	
	Попытка
		
		Если СтруктураЗапроса = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		//Если МассивЗагруженныхФайловОбмена.Количество() = 0 Тогда
		//	Возврат Неопределено;		
		//КонецЕсли; 
		
		ТелоЗапроса = ЗаполненноеТелоЗапросаHTTP(ПараметрыПодключения.ИДБазыПриемник, НастройкиТекущейБД.ИДБазыИсточник, СтруктураЗапроса);
		
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeStatusComplet");
		
		Если СтруктураОтвета = Неопределено  Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если СтруктураОтвета.code = 200 Тогда
			РезультатОчисткиЗаписейОтвет = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(СтруктураОтвета.data, "РезультатОчисткиЗаписей");
			РезультатОбновленияСостоянийЗапросаСсылки = пр_Общий.ЗначениеРеквизитаОбъектаМожетНеБыть(СтруктураОтвета.data, "РезультатОбновленияСостояний");
			//Возврат РезультатУдаленияСтатуса;		
		Иначе
			Возврат "Прервана связь с приемником";		
		КонецЕсли; 
		
		
		//TODO:  
		//Смена состояния
		// Удалить с регисрации, состояний, записей ошибок
		Если РезультатОчисткиЗаписейОтвет <> Неопределено Тогда
			Если РезультатОчисткиЗаписейОтвет = Истина Тогда
				РезультатОчисткиЗаписей = РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(СтруктураЗапроса.МассивЗагруженныхФайловОбмена, Истина)
			КонецЕсли; 
		КонецЕсли; 
		
		Если РезультатОбновленияСостоянийЗапросаСсылки <> Неопределено Тогда
			Данные = Новый Структура("data", РезультатОбновленияСостоянийЗапросаСсылки); 
			РезультатОбновленияСостояний = РезультатОбновленияСостоянийОбмена(Данные, , Истина);
		КонецЕсли; 
		
		
	Исключение
		пр_ошибка = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("ОбновитьСостоянияОбменаПоИмениФайла", , пр_ошибка, ПараметрыПодключения.ПредставлениеИсточника);	
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//Если ЭтоПриемник = Истина - значит последняя очистка 
//Дополнительно удаляем записи с регистрации и файлВыгрузки
//У источника удаляем по дате выгрузки и дате регистрации
Функция РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, ЭтоПриемник = Ложь)
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
			|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
			|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
			|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации
			|ПОМЕСТИТЬ ВТ_ДанныеСостояний
			|ИЗ
			|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
			|ГДЕ
			|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
			|	#ОтборОтложеннногоПроведения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ Различные
			|	оду_ОшибкиОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_ОшибкиОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
			|	оду_ОшибкиОбмена.ИДБазыПриемник КАК ИДБазыПриемник
			|ИЗ
			|	РегистрСведений.оду_ОшибкиОбмена КАК оду_ОшибкиОбмена
			|ГДЕ
			|	оду_ОшибкиОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник
			|ИЗ
			|	ВТ_ДанныеСостояний КАК ВТ_ДанныеСостояний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
			|		ПО  ВТ_ДанныеСостояний.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
			|ГДЕ Истина
			|";
		
		ОтборОтложеннногоПроведения = "";
		Если ЭтоПриемник = Ложь Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|			И ВТ_ДанныеСостояний.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
			|			И (ВТ_ДанныеСостояний.ДатаВыгрузки >= оду_РегистрацияОбъектовОбмена.ДатаРегистрации)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|			И ВТ_ДанныеСостояний.ИДБазыИсточник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник";
			
			ОтборОтложеннногоПроведения = "И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> &СостояниеОбменаОтложенноеПроведение";
			Запрос.УстановитьПараметр("СостояниеОбменаОтложенноеПроведение", оду_ОбщийПовтИсп.СостояниеОтложенноеПроведение());
		КонецЕсли; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборОтложеннногоПроведения", ОтборОтложеннногоПроведения); 
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("МассивЗагруженныхФайловОбмена", МассивЗагруженныхФайловОбмена);
		
		ПакетЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		ЗапросСостояний = ПакетЗапроса[0];
		ЗапросОшибок = ПакетЗапроса[1];
		
		//Если ЭтоПриемник = Истина Тогда
			ЗапросРегистраций = ПакетЗапроса[2];
		//КонецЕсли; 
				
		ВДЗ = ЗапросСостояний.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросСостояний;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			
			Пока ВДЗ.Следующий() Цикл
				Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.Прочитать();
				Запись.Удалить();
			КонецЦикла;
			
		КонецЕсли;
		
		ВДЗ = ЗапросОшибок.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_ОшибкиОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросОшибок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			
			Пока ВДЗ.Следующий() Цикл
				РезультатЗаписиОшибкиОбмена(ВДЗ, Истина,, НЕ ЭтоПриемник);
			КонецЦикла;
			
		КонецЕсли; 
		
		ВДЗ = ЗапросРегистраций.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			//Если ЭтоПриемник = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_РегистрацияОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросРегистраций;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			//КонецЕсли; 
			
			//Если ЭтоПриемник = Истина Тогда
			Пока ВДЗ.Следующий() Цикл
				Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.Прочитать();
				Запись.Удалить();
			КонецЦикла;
			//КонецЕсли; 
			
		КонецЕсли; 
		
		Если ЭтоПриемник = Истина Тогда
			РезультатОчисткиФайловОбмена(МассивЗагруженныхФайловОбмена);
			//Для каждого ПутьКФайлу Из МассивЗагруженныхФайловОбмена Цикл
			//	УдалитьФайлы(ПутьКФайлу);
			//КонецЦикла; 
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Возврат  Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки;

КонецФункции 

//РегистрацияОшибокОбмена
Функция РезультатЗаписиОшибокПоИмениФайлаОбмена(МассивСтруктурОшибокФайловОбмена)
	
	Если МассивСтруктурОшибокФайловОбмена.Количество() = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяФайлаОбмена", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТЗ.Колонки.Добавить("ОписаниеОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Для каждого СтруктураОшибок Из МассивСтруктурОшибокФайловОбмена Цикл
		Нст = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Нст, СтруктураОшибок); 
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокОшибок.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	СписокОшибок.ОписаниеОшибки КАК ОписаниеОшибки
		|ПОМЕСТИТЬ ВТ_Ошибки
		|ИЗ
		|	&СписокОшибок КАК СписокОшибок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_Ошибки.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ЕСТЬNULL(оду_ОшибкиОбменаСрезПоследних.НомерПопытки, 0) + 1 КАК НомерПопытки
		|ИЗ
		|	ВТ_Ошибки КАК ВТ_Ошибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_ОшибкиОбмена.СрезПоследних(
		|					,
		|					ИмяФайлаОбмена В
		|						(ВЫБРАТЬ
		|							ВТ_Ошибки.ИмяФайлаОбмена КАК ИмяФайлаОбмена
		|						ИЗ
		|							ВТ_Ошибки КАК ВТ_Ошибки)) КАК оду_ОшибкиОбменаСрезПоследних
		|			ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = оду_ОшибкиОбменаСрезПоследних.ИДОбъекта
		|				И оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник
		|				И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник
		|				И оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = оду_ОшибкиОбменаСрезПоследних.ИмяФайлаОбмена
		|		ПО ВТ_Ошибки.ИмяФайлаОбмена = оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СписокОшибок", ТЗ);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	ЗапросОшибок = Запрос.Выполнить();
	ВДЗ = ЗапросОшибок.Выбрать();
	
	Попытка
		
		ВДЗ = ЗапросОшибок.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			РезультатЗаписиОшибкиОбмена(ВДЗ);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат  Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область  ОтложенноеПроведение

Процедура ЗапуститьВыполнениеОтложенногоПроведения(ИнтерактивныйВызов = Ложь)   Экспорт
	
	ИмяМетода = "оду_Общий.ВыполнитьОтложенноеПроведение"; 
	НаименованиеФоновогоЗадания = НаименованиеИсполняющегоФоновогоЗаданияОтложенноеПроведение();
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ИнтерактивныйВызов);
	//МассивПараметров.Добавить(НомерВыполнения);
	
	пр_Общий.ЗапуститьФоновоеВыполнение(ИмяМетода, МассивПараметров, , НаименованиеФоновогоЗадания, ИнтерактивныйВызов);
	
КонецПроцедуры

Процедура  РегламентОтложенногоПроведения()  Экспорт
	
	оду_ИспользоватьУниверсальныйОбмен = оду_ИспользоватьУниверсальныйОбмен();
	Если  НЕ оду_ИспользоватьУниверсальныйОбмен Тогда
		Возврат;
	КонецЕсли; 
	
	//НаименованиеЗадания = НаименованиеИсполняющегоФоновогоЗаданияОтложенноеПроведение();
	//ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	//Если ЗаданиеВыполняется = Истина Тогда
	//	Возврат;
	//КонецЕсли; 

	ВыполнитьОтложенноеПроведение();
	
КонецПроцедуры
 

Функция ВыполнитьОтложенноеПроведение(ИнтерактивныйВызов = Ложь)   Экспорт

	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	
	ПроводитьДокументы = Истина;
	
	//Ограничение Цикла 
	Сч = 10; //Защита от бесконечного цикла
	ПрерватьЦикл = Ложь; // Самостоятельно прерывания
	
	Пока ПроводитьДокументы = Истина Цикл
		
		Если ПрерватьЦикл = Истина ИЛИ Сч <= 0 Тогда
			Прервать;
		КонецЕсли; 
		
		ПроводитьДокументы = Модуль.РезультатВыполненияОтложенногоПроведения(ИнтерактивныйВызов);
		
		Сч = Сч - 1;
		
	КонецЦикла; 
	
	
КонецФункции 
 
Функция ТекстЗапросаОтложенногоПроведения(КоличествоОбъектовВПроведении)	Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ #КоличествоОбъектовВПроведении
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ЕСТЬNULL(ОшибкиОбмена.НомерПопытки, 0) + 1 КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			оду_ОшибкиОбменаСрезПоследних.НомерПопытки КАК НомерПопытки,
		|			оду_ОшибкиОбменаСрезПоследних.ИДОбъекта КАК ИДОбъекта,
		|			оду_ОшибкиОбменаСрезПоследних.ИДБазыИсточник КАК ИДБазыИсточник,
		|			оду_ОшибкиОбменаСрезПоследних.ИДБазыПриемник КАК ИДБазыПриемник
		|		ИЗ
		|			РегистрСведений.оду_ОшибкиОбмена.СрезПоследних(, СостояниеОбмена = &СостояниеОтложенноеПроведение) КАК оду_ОшибкиОбменаСрезПоследних
		//|		ГДЕ
		//|			оду_ОшибкиОбменаСрезПоследних.НомерПопытки >= &КоличествоПопытокПриОшибке
		|			) КАК ОшибкиОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДОбъекта = ОшибкиОбмена.ИДОбъекта
		|			И оду_СостояниеОбъектовОбмена.ИДБазыПриемник = ОшибкиОбмена.ИДБазыПриемник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ПО оду_СостояниеОбъектовОбмена.ИДБазыИсточник = оду_БазыУчастникиОбмена.ИДБазы
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена = &СостояниеОтложенноеПроведение
		//|	И ОшибкиОбмена.НомерПопытки ЕСТЬ NULL
		|	И ЕСТЬNULL(ОшибкиОбмена.НомерПопытки, 0) < &КоличествоПопытокПриОшибке
		|	И ЕСТЬNULL(оду_БазыУчастникиОбмена.ИспользоватьМеханизмОтложенногоПроведения, ЛОЖЬ) = ИСТИНА
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена,
		|	ПриоритетОбъекта,
		|	ПриоритетДопПризнака,
		|	ЕСТЬNULL(ОшибкиОбмена.НомерПопытки, 0)
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КоличествоОбъектовВПроведении", КоличествоОбъектовВПроведении); 
	Возврат  ТекстЗапроса;
	
КонецФункции 

Функция РезультатВыполненияОтложенногоПроведения(ИнтерактивныйВызов = Ложь)	Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоОбъектовВПроведении = 10; //TODO: Кастомизировать
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	КоличествоПопытокПриОшибке = НастройкиТекущейБД.КоличествоПопытокПриОшибке;
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОтложенногоПроведения(КоличествоОбъектовВПроведении);
	
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", КоличествоПопытокПриОшибке);
	Запрос.УстановитьПараметр("СостояниеОтложенноеПроведение", оду_ОбщийПовтИсп.СостояниеОтложенноеПроведение());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//ВДЗ = РезультатЗапроса.Выбрать();
	МассивСтруктур = пр_Общий.МассивСтруктурПоЗапросу(РезультатЗапроса);
	
	МассивЗаписанныхОбъектов = Новый Массив;
	МассивОшибок = Новый Массив;
	
	//ПроверкаДатЗапретаОтключена = ПроверкаДатЗапретаОтключена();
	ОтключитьПроверкуДатЗапрета(Истина, ИнтерактивныйВызов);
	
	Для каждого СтруктураДанных Из МассивСтруктур Цикл
		
		Если ПрерватьЦикл = Истина Тогда
			Прервать;
		КонецЕсли; 	
		
		ДокументСсылка = пр_Общий.СсылкаПоТипXML(СтруктураДанных.ТипXMLОбъектаПриемника, СтруктураДанных.ИДОбъекта);
		Если ДокументСсылка = Неопределено  Тогда
			СтруктураДанных.Вставить("ОписаниеОшибки", "Не получилось получить ссылку");
			МассивОшибок.Добавить(СтруктураДанных);
			Продолжить;
		КонецЕсли; 
		
		РезультатПроведения = ВыполнитьПроведениеДокументаПриЗагрузке(ДокументСсылка, СтруктураДанных, МассивОшибок, МассивЗаписанныхОбъектов, ИнтерактивныйВызов)
		
	КонецЦикла; 
	//TODO:  Все записи сделать все в одной транзакции
	
	//Запись ошибок
	ЗаписатьОшибкиОбменаИзМассива(МассивОшибок);
	
	//Удаление состояний и ошибок
	РезультатЗаписиСостоянияОбменаИзМассива(МассивЗаписанныхОбъектов, Истина);
	ЗаписатьОшибкиОбменаИзМассива(МассивЗаписанныхОбъектов, Истина);
	
	ОтключитьПроверкуДатЗапрета(, ИнтерактивныйВызов);
	
	Возврат МассивСтруктур.Количество() = КоличествоОбъектовВПроведении;
	
КонецФункции 

//TODO:  Добавить удаление состояния при ручном проведении, если не установлен признак ДополнительныеСвойства = ОтложенноеПроведение
Функция ВыполнитьПроведениеДокументаПриЗагрузке(ДокументСсылка, СтруктураДанных, МассивОшибок, МассивЗаписанныхОбъектов, ИнтерактивныйВызов = Ложь) Экспорт
	
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка));
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		Объект = ДокументСсылка.ПолучитьОбъект();
		
		//ДопСвойства записи
		Если ЗначениеЗаполнено(СтруктураДанных.ДополнительныеСвойстваОбъекта)  Тогда
			ДополнительныеСвойстваОбъекта = ЗначениеИзСтрокиВнутр(СтруктураДанных.ДополнительныеСвойстваОбъекта);;
			Для каждого КлючЗначение Из ДополнительныеСвойстваОбъекта Цикл
				Объект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);  
			КонецЦикла; 
		КонецЕсли; 
		
		Объект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение");
		
		// Устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
		// проведение выполняем не в режиме загрузки.
		//Объект.ОбменДанными.Загрузка = Истина;
		//УстановитьОбменДаннымиЗагрузка(Объект, Ложь, Ложь, УзелКорреспондента);
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			Объект.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых");
			
			// Выполняем попытку проведения документа.
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
			РезультатПроведения = Объект.Проведен;
			Если РезультатПроведения = Истина Тогда
				МассивЗаписанныхОбъектов.Добавить(СтруктураДанных);
			Иначе 
				//? Фиксировать ошибку?
				пр_Ошибка = "Не удалось провести документ";
				СтруктураДанных.Вставить("ОписаниеОшибки", пр_Ошибка);
				СтруктураДанных.Вставить("ОбъектОбмена", ДокументСсылка);
				МассивОшибок.Добавить(СтруктураДанных);
			КонецЕсли; 
			
			Возврат РезультатПроведения;
			
		Иначе	
			ОтменитьТранзакцию();
			СтруктураДанных.Вставить("ОписаниеОшибки", "Документ не проходит проверку заполнения");
			МассивОшибок.Добавить(СтруктураДанных);
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		пр_Ошибка = ОписаниеОшибки();
		
		Если ИнтерактивныйВызов = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = пр_Ошибка;
			Сообщение.Сообщить();
		КонецЕсли; 
		
		СтруктураДанных.Вставить("ОписаниеОшибки", пр_Ошибка);
		СтруктураДанных.Вставить("ОбъектОбмена", ДокументСсылка);
		МассивОшибок.Добавить(СтруктураДанных);
		
		ОтменитьТранзакцию();
		ОтправитьСообщениеВТелеграмExchange("ВыполнитьПроведениеДокументаПриЗагрузке", , пр_Ошибка);
		
		//пр_Результат = РезультатЗаписиВЛог("ОМ.пр_Общий", "РезультатЗаписиДанныхЗапросаВТранзации", , пр_Ошибка, , ВДЗ.Ссылка);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции



Процедура ОтключитьПроверкуДатЗапрета(Отключить = Истина, ИнтерактивныйВызов = Ложь)
	
	Попытка
		
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		//	МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		//	МодульДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(Отключить);
		//Иначе //Если ОбщегоНазначения.ПроверитьИмяПроцедурыКонфигурации("ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения") Тогда
		//	ОбменДаннымиСервер.ПропуститьПроверкуЗапретаИзменения(Отключить);
		//КонецЕсли;
		
		Если пр_Общий.ЗаполненноЗначениеРекизитаСвойства(ПараметрыСеанса, "ПропуститьПроверкуЗапретаИзменения") Тогда
			ПараметрыСеанса.ПропуститьПроверкуЗапретаИзменения = Отключить;
		КонецЕсли; 
		
	Исключение
		
		пр_Ошибка = ОписаниеОшибки();
		Если ИнтерактивныйВызов = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = пр_Ошибка;
			Сообщение.Сообщить(); 
		КонецЕсли; 
		ОтправитьСообщениеВТелеграмExchange("ОтключитьПроверкуДатЗапрета", , пр_Ошибка);
	КонецПопытки; 
	
КонецПроцедуры


Функция ПроверкаДатЗапретаОтключена()   Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		Возврат МодульДатыЗапретаИзменения.ПроверкаДатЗапретаОтключена();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина, ОтправкаНазад = Ложь, УзелОбмена = Неопределено) Экспорт
	
	Объект.ОбменДанными.Загрузка = Значение;
	
	Если Не ОтправкаНазад
		И УзелОбмена <> Неопределено
		И НЕ УзелОбмена.Пустая() Тогда
	
		ТипЗначенияОбъекта = ТипЗнч(Объект);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
		
		Если Метаданные.ПланыОбмена[УзелОбмена.Метаданные().Имя].Состав.Содержит(ОбъектМетаданных) Тогда
			Объект.ОбменДанными.Отправитель = УзелОбмена;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
 

#Область  СверкаДанных

#Область  СверкаИсточник
 
Функция СверкаДанныхИсточник(ВыборкаТипДанных)	Экспорт
	
	МассивЗапросов = Новый  Структура();
	
	ДанныеЗапроса = Новый Структура(); 
	
	ДанныеДляСверки = Новый Структура(); 
	
	Пока ВыборкаТипДанных.Следующий() Цикл

		ТипДанных = ВыборкаТипДанных.ТипДанных;
		
		ВыборкаМетаданных = ВыборкаТипДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		КолВыборки = ВыборкаМетаданных.Количество();
		сч = 1;
		ТекстЗапросаСбор = "";
		
		ЗапросДанных = Новый Запрос;
		МассивДанных = Новый Массив; 

		Пока ВыборкаМетаданных.Следующий() Цикл
			
			ВДЗ = ВыборкаМетаданных.Выбрать();
			
			МассивСсылок = Новый Массив;
			Пока ВДЗ.Следующий() Цикл
				МассивСсылок.Добавить(ВДЗ.ОбъектСсылка);
			КонецЦикла;
			
			Если МассивСсылок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
					
			МассивПроверяемыхПолей = СоставПроверяемыхПолейПоТипуДанных(ТипДанных);
			//СоответПолейИсточника = Новый Соответствие;
			//СоответПолейИсточника.Вставить(ВыборкаМетаданных.ТипXMLОбъектаПриемника, СоставПолейОбъекта);
			
			//ИмяТипаОбъекта = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;
			//ИмяТаблицы = СтрЗаменить(ИмяТипаОбъекта, "Ref.", ".");
			
			//проверка на поля
			СсылкаНаОбъект1С = ВыборкаМетаданных.ЗначениеПустойСсылки;
			СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
			СоставПолейОбъекта = СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолей);
			ИмяПараметра = "";
			ТекстЗапроса = ПолучитьТекстЗапросаПоТипуДанных(ВыборкаМетаданных, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра);
			
			ЗапросДанных.УстановитьПараметр(ИмяПараметра, МассивСсылок);
			
			ТекстОбъеденить = ?(КолВыборки = сч, "", "	ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъеденить;
			
			сч = сч + 1;
			
			ТекстЗапросаСбор = ТекстЗапросаСбор + ТекстЗапроса;
			МассивИД = Новый Массив; 
			Для каждого Ссылка  Из МассивСсылок Цикл
			
				МассивИД.Добавить(XMLСтрока(Ссылка));	
			
			КонецЦикла; 
			
			СтруктураЗапроса = Новый Структура("ТипXMLОбъектаИсточника, ТипXMLОбъектаПриемника, МассивПроверяемыхПолей, МассивСсылок", 
												ВыборкаМетаданных.ТипXMLОбъектаИсточника, ВыборкаМетаданных.ТипXMLОбъектаПриемника, МассивПроверяемыхПолей, МассивИД);
			МассивДанных.Добавить(СтруктураЗапроса);
		КонецЦикла;
		
		
		Если ТекстЗапросаСбор = "" Тогда
			Продолжить;	
		КонецЕсли; 
		
		ЗапросДанных.Текст = ТекстЗапросаСбор;
		
		МассивЗапросов.Вставить(ТипДанных, ЗапросДанных);
		
		ДанныеДляСверки.Вставить(ТипДанных, МассивДанных);

		//РЗ = ЗапросДанных.Выполнить();
		//
		//Если РЗ.Пустой() Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//ВДЗ = РЗ.Выбрать();
		//
		//МассивДанных = Новый Массив;
		//
		//Пока ВДЗ.Следующий() Цикл
		//	
		//	СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
		//	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, ВДЗ); 
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаИсточника", ВыборкаМетаданных.ТипXMLОбъектаИсточника);
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаПриемника", ВыборкаМетаданных.ТипXMLОбъектаПриемника);
		//	СоставПроверяемыхПолей.Вставить("Ссылка", XMLСтрока(ВДЗ.Ссылка));
		//				
		//	МассивДанных.Добавить(СоставПроверяемыхПолей);	
		//	
		//КонецЦикла;
		//
		//ДанныеЗапроса.Вставить(ТипДанных, МассивДанных);
		
	КонецЦикла;
	
	//ПутьТест = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\ДанныеОбмена\СверкаОтвет.json";
	//ДанныеОтвета = ПрочитатьJSON_ИзТела_Сериализ(, ПутьТест);
	
	//Если ТекстЗапросаСбор = "" Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоТипуДанных(СтруктураПолей, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра, ЭтоИсточник = Истина)  Экспорт
	
	Если ЭтоИсточник = Истина Тогда
		ТипXMLОбъекта = СтруктураПолей.ТипXMLОбъектаИсточника;	
	Иначе	
		ТипXMLОбъекта = СтруктураПолей.ТипXMLОбъектаПриемника;	
	КонецЕсли; 
	
	ИмяТаблицы = СтрЗаменить(ТипXMLОбъекта, "Ref.", ".");
	МТипов = СтрРазделить(ИмяТаблицы, ".");
	ИмяТипаМетаданных = МТипов[0];		
	ИмяТипа = МТипов[1];
	ИмяПараметра = "МассивСсылок_" + ИмяТипа;
	
	ТекстЗапроса = "Выбрать 
	|	ОбъектОбмена.Ссылка КАК Ссылка," + Символы.ПС;
	
	Для каждого ИмяПоля Из МассивПроверяемыхПолей Цикл
		
		Если ИмяПоля = "ТипXMLОбъектаПриемника" ИЛИ ИмяПоля = "ТипXMLОбъектаИсточника" Тогда
			Текст = СтрШаблон("""%1"" КАК %2,", СтруктураПолей[ИмяПоля], ИмяПоля);
		ИначеЕсли СоставПолейОбъекта.Найти(ИмяПоля) = Неопределено Тогда
			Текст = СтрШаблон("Неопределено КАК %1,", СокрЛП(ИмяПоля));
		Иначе
			Текст = СтрШаблон("ЕСТЬNULL(ОбъектОбмена.%1, Неопределено) КАК %1,", СокрЛП(ИмяПоля));
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + Текст + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2) + Символы.ПС;
	
	Текст = СтрШаблон("ИЗ %1 КАК ОбъектОбмена", ИмяТаблицы);
	ТекстЗапроса = ТекстЗапроса + Текст + Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса + "		ГДЕ ОбъектОбмена.Ссылка В (&" + ИмяПараметра + ")" + Символы.ПС;
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолейН)	Экспорт
	
	СоставПолей = Новый Массив;
	
	//МетаданныеОбъекта1С = СсылкаНаОбъект1С.ПолучитьОбъект().Метаданные();
	//
	//Для каждого ИмяРеквизита Из СоставПроверяемыхПолей Цикл
	//	Если  ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта1С) Тогда
	//		СоставПолей.Добавить(ИмяРеквизита);	
	//	КонецЕсли; 	
	//КонецЦикла; 
	
	
	//Если ТипЗнч(СоставПроверяемыхПолейН) = Тип("Массив") Тогда
	//	СоставПроверяемыхПолей = Новый Структура();
	//	Для каждого ИмяПоля Из СоставПроверяемыхПолейН Цикл
	//		СоставПроверяемыхПолей.Вставить(ИмяПоля);	
	//	КонецЦикла; 
	//Иначе	 
	 	СоставПроверяемыхПолей = СоставПроверяемыхПолейН;
	//КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, СсылкаНаОбъект1С); 
	Для каждого КлючЗначение Из СоставПроверяемыхПолей Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		Если ИмяРеквизита = "Код" ИЛИ ИмяРеквизита = "Наименование" Тогда
			Если ЗначениеЗаполнено(Значение)  Тогда
				СоставПолей.Добавить(ИмяРеквизита);	
			КонецЕсли; 
		ИначеЕсли Значение <> Неопределено  Тогда
			СоставПолей.Добавить(ИмяРеквизита);	
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат  СоставПолей;
	
КонецФункции 

Функция СоставПроверяемыхПолейПоТипуДанных(ТипДанных)	Экспорт
	
	СоставПолей = Новый Массив; 
	СоставПолей.Добавить("ТипXMLОбъектаИсточника");
	СоставПолей.Добавить("ТипXMLОбъектаПриемника");
	
	СоставПолей.Добавить("ПометкаУдаления");
		
	Если ТипДанных = "Документы" Тогда
		СоставПолей.Добавить("Дата");
		СоставПолей.Добавить("Номер");
		СоставПолей.Добавить("Проведен");
		СоставПолей.Добавить("СуммаДокумента");
	ИначеЕсли ТипДанных = "Справочники" ИЛИ ТипДанных = "Планы видов характеристик" Тогда
		СоставПолей.Добавить("Номер");
		СоставПолей.Добавить("Наименование");
	КонецЕсли; 
	
	Возврат  СоставПолей;
	
КонецФункции 

Функция СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных)	Экспорт
	
	СоставПолей = Новый Структура(); 
	СоставПолей.Вставить("ТипXMLОбъектаИсточника");
	СоставПолей.Вставить("ТипXMLОбъектаПриемника");
	
	СоставПолей.Вставить("ПометкаУдаления");
	
	Если ТипДанных = "Документы" Тогда
		СоставПолей.Вставить("Дата");
		СоставПолей.Вставить("Номер");
		СоставПолей.Вставить("Проведен");
		СоставПолей.Вставить("СуммаДокумента");
		СоставПолей.Вставить("НомерВходящегоДокумента");
		СоставПолей.Вставить("ДатаВходящегоДокумента");
		
	ИначеЕсли ТипДанных = "Справочники" ИЛИ ТипДанных = "Планы видов характеристик" Тогда
		СоставПолей.Вставить("Код");
		СоставПолей.Вставить("Наименование");
	КонецЕсли; 
	
	Возврат  СоставПолей;
	
КонецФункции 

#КонецОбласти

#Область  СверкаПриемник

 
Функция СверкаДанныхПриемник(ТелоЗапроса)	Экспорт
		
	ДанныеОтвета = Новый Структура();
	
	Для каждого КлючЗначение Из ТелоЗапроса Цикл
		
		ТипДанных = КлючЗначение.Ключ;
		
		//типы метаданных
		ДанныеЗапроса = КлючЗначение.Значение;
		
		КолВыборки = ДанныеЗапроса.Количество();//СтруктураДанных.МассивСсылок.Количество();
		сч = 1;
		ТекстЗапросаСбор = "";
		ЗапросДанных = Новый Запрос;
		
		Для каждого СтруктураДанных Из ДанныеЗапроса Цикл
			
			ТипXMLОбъекта = СтруктураДанных.ТипXMLОбъектаПриемника;
			//Типы данных
			МассивСсылок = Новый Массив;
			 
			Для каждого ИД Из СтруктураДанных.МассивСсылок Цикл
			
				Ссылка1С = пр_Общий.СсылкаПоТипXML(ТипXMLОбъекта, ИД);
				Если Ссылка1С <> Неопределено Тогда
					МассивСсылок.Добавить(Ссылка1С);
				КонецЕсли; 
			
			КонецЦикла;
			
			Если МассивСсылок.Количество() = 0 Тогда
			 	Продолжить;
			КонецЕсли; 
			
			СсылкаНаОбъект1С = МассивСсылок[0];
			МассивПроверяемыхПолей = СтруктураДанных.МассивПроверяемыхПолей;
			СоставПроверяемыхПолей = Новый Структура();
			Для каждого ИмяПоля Из МассивПроверяемыхПолей Цикл
				СоставПроверяемыхПолей.Вставить(ИмяПоля);	
			КонецЦикла;
			
			//МассивПроверяемыхПолей.Добавить("ТипXMLОбъектаИсточника");
			//МассивПроверяемыхПолей.Добавить("ТипXMLОбъектаПриемника");
			
			СоставПолейОбъекта = СоставПолейОбъекта(СсылкаНаОбъект1С, СоставПроверяемыхПолей);
							    
			ИмяПараметра = "";
			ТекстЗапроса = ПолучитьТекстЗапросаПоТипуДанных(СтруктураДанных, МассивПроверяемыхПолей, СоставПолейОбъекта, ИмяПараметра, Ложь);
			
			ЗапросДанных.УстановитьПараметр(ИмяПараметра, МассивСсылок);
			
			ТекстОбъеденить = ?(КолВыборки = сч, "", "	ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъеденить;
			
			сч = сч + 1;
			
			ТекстЗапросаСбор = ТекстЗапросаСбор + ТекстЗапроса;
			//Сбор запроса
		
		КонецЦикла; 

		ЗапросДанных.Текст = ТекстЗапросаСбор;
		РЗ = ЗапросДанных.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Данные = пр_Общий.МассивСтруктурПоЗапросу(РЗ);
		
		Для каждого Стр Из Данные Цикл
			Стр.Ссылка = XMLСтрока(Стр.Ссылка);	
		КонецЦикла; 
		
		ДанныеОтвета.Вставить(ТипДанных, Данные);
		
		//ВДЗ = РЗ.Выбрать();
		
		//МассивДанных = Новый Массив;
		//
		//Пока ВДЗ.Следующий() Цикл
		//	
		//	СоставПроверяемыхПолей = СтруктураПроверяемыхПолейПоТипуДанных(ТипДанных);
		//	ЗаполнитьЗначенияСвойств(СоставПроверяемыхПолей, ВДЗ); 
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаИсточника", ВыборкаМетаданных.ТипXMLОбъектаИсточника);
		//	//СоставПроверяемыхПолей.Вставить("ТипXMLОбъектаПриемника", ВыборкаМетаданных.ТипXMLОбъектаПриемника);
		//	СоставПроверяемыхПолей.Вставить("Ссылка", XMLСтрока(ВДЗ.Ссылка));
		//				
		//	МассивДанных.Добавить(СоставПроверяемыхПолей);	
		//	
		//КонецЦикла;
		
		//ДанныеЗапроса.Вставить(ТипДанных, МассивДанных);
	
	КонецЦикла; 
	
	ПутьТест = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\ДанныеОбмена\СверкаОтвет.json";
	СформироватьJSON_Сериализ(ДанныеОтвета, ПутьТест); 
	
	Возврат   ДанныеОтвета;
	
КонецФункции


#КонецОбласти
 

#КонецОбласти
 

#Область  ПроизвольныйЗапрос


Функция РезультатExchangeData(ТелоЗапроса) Экспорт
	
	Попытка
		
		СтруктураЗапроса = ПодготовитьСтруктуруПараметровПроизвольногоЗапроса(ТелоЗапроса.instruct);
		
		Если СтруктураЗапроса.РежимОтладки = Истина Тогда
			//Записать в  РС.оду_СостояниеПроизвольныхЗапросов
			РезультатЗаписи = РезультатЗаписиВСостояниеПроизвольныхЗапросов(ТелоЗапроса, СтруктураЗапроса);
			ТекстОтвета = СтрШаблон("*оду. Запрос в режиме отладки. Результат записи запроса в приемнике = %1", ?(РезультатЗаписи = Истина, "Истина", "Ложь")); 
			Возврат ТекстОтвета;
		КонецЕсли; 
		
		//СтруктураЗапроса.ПодготовитьДанные = Истина;
		Результат = РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, , Истина);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_общий.ОтправитьСообщениеВТелеграмExchange("оду_Общий.РезультатExchangeData", , пр_Ошибка, ТелоЗапроса.header.front, , , ТелоЗапроса);	
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

Функция ПодготовитьСтруктуруПараметровПроизвольногоЗапроса(СтруктураЗапроса)  Экспорт
	
	Если СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Запрос() Тогда
		СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Ответ();
	ИначеЕсли СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Ответ() Тогда	
		СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_ОбработкаОтвета();
	КонецЕсли;
	
	//ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
	
	Возврат СтруктураЗапроса;
	
КонецФункции 

Функция ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса)  Экспорт
	
	Если СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Ответ() Тогда
		ИДБазы = СтруктураЗапроса.ИДБазыИсточник;
	Иначе 	
		ИДБазы = СтруктураЗапроса.ИДБазыПриемник;
	КонецЕсли; 
	
	СтруктураЗапроса.ДанныеЗапроса = ДанныеПроизвольногоЗапросаИзСтруктуры(СтруктураЗапроса);
	
	Если ЗначениеЗаполнено(СтруктураЗапроса.ПараметрыЗапроса) Тогда
		СтруктураЗапроса.ПараметрыЗапроса = ЗначениеИзСтрокиВнутр(СтруктураЗапроса.ПараметрыЗапроса);	
	КонецЕсли; 
	
	СтруктураЗапроса.Вставить("ИДБазы", ИДБазы);
	СтруктураЗапроса.Вставить("СсылкаУО", пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ИДБазы));
	
КонецФункции 

Функция РезультатЗаписиВСостояниеПроизвольныхЗапросов(ТелоЗапроса, СтруктураЗапроса) Экспорт
	
	Попытка
		
		Запись = РегистрыСведений.оду_СостояниеПроизвольныхЗапросов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураЗапроса);
		
		Если СтруктураЗапроса.ОбменЧерезФайл = Ложь Тогда
			Если ЗначениеЗаполнено(СтруктураЗапроса.ДанныеЗапроса)  Тогда
				Запись.ДанныеЗапроса = Новый ХранилищеЗначения(СтруктураЗапроса.ДанныеЗапроса);	
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураЗапроса.ПараметрыЗапроса)  Тогда
			Запись.ПараметрыЗапроса = ЗначениеВСтрокуВнутр(СтруктураЗапроса.ПараметрыЗапроса);	
		КонецЕсли; 
		
		//Запись.СостояниеЗапроса = СостояниеЗапроса;
		
		Запись.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_общий.ОтправитьСообщениеВТелеграмExchange("оду_Общий.РезультатЗаписиВСостояниеПроизвольныхЗапросов", , пр_Ошибка, ТелоЗапроса.header.front, , , ТелоЗапроса);	
		Возврат Ложь;
	КонецПопытки;
	 	
КонецФункции 

Функция РезультатВыполненияПроизвольногоЗапросаИзСтроки(ТекЭлемент = Неопределено, Запись = Неопределено, ПодготовитьДанные = Ложь)    Экспорт
	
	Если Запись = Неопределено Тогда
		Запись = РегистрыСведений.оду_СостояниеПроизвольныхЗапросов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ТекЭлемент);
		Запись.Прочитать();
		Если НЕ Запись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураЗапроса = СтруктураПараметровВыполненияПроизвольногоЗапроса();
	ЗаполнитьЗначенияСвойств(СтруктураЗапроса, Запись); 
	ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
	СтруктураЗапроса.Вставить("ПодготовитьДанные", ПодготовитьДанные); 
	
	РезультатВыполнения = РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса);
	
	Если СтруктураЗапроса.ПодготовитьДанные = Ложь И РезультатВыполнения <> Неопределено Тогда
		Запись.Удалить();
	КонецЕсли; 
	
	Возврат РезультатВыполнения;
	
КонецФункции 

Функция РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, ОбработкаЗапроса = Неопределено, ЭтоЗапрос = Ложь)    Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗапроса)  Тогда
		Возврат Неопределено;                                                                   
	КонецЕсли; 
	
	//01 Проверка связи с приемником
	Если СтруктураЗапроса.ПодготовитьДанные = Ложь Тогда
		
		СсылкаУО = СтруктураЗапроса.СсылкаУО; 
		
		Если СсылкаУО = Неопределено Тогда
			Возврат Неопределено;                                                                   
		КонецЕсли; 
		
		Если ЕстьСвязьСУчастникомОбмена(СсылкаУО) = Ложь Тогда
			Возврат Неопределено;                                                                   
		КонецЕсли;
		
	КонецЕсли; 
	
	//02 Сбор данных
	Если ОбработкаЗапроса = Неопределено Тогда
		Данные = ДанныеПроизвольногоЗапроса(СтруктураЗапроса);
	Иначе
		Данные = ДанныеОбработкиПроизвольногоЗапроса(СтруктураЗапроса, ОбработкаЗапроса);
	КонецЕсли; 
	
	Если Данные = Неопределено Тогда
		Возврат Неопределено;                                                                   
	КонецЕсли; 
	
	Если СтруктураЗапроса.ПодготовитьДанные = Истина ИЛИ СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_ОбработкаОтвета() Тогда
		Возврат Данные;	
	КонецЕсли; 
	
	Если СтруктураЗапроса.ОбменЧерезФайл = Истина Тогда
		ИмяФайлаЗапроса = ЗаписатьДанныеЗапросаВФайл(Данные, СсылкаУО, СтруктураЗапроса.ИмяЗапроса); 
		СтруктураЗапроса.ИмяФайлаЗапроса = ИмяФайлаЗапроса;
		ДанныеЗапроса = Неопределено;
	Иначе 		
		ДанныеЗапроса = Данные;
	КонецЕсли;
	
	//03 Получение ответа
	СтруктураЗапроса.ДанныеЗапроса = ДанныеЗапроса;
	
	Если ЭтоЗапрос Тогда
		Возврат ДанныеЗапроса;
	КонецЕсли; 
	
	Ответ = СтруктураОтветаУниверсальногоОбменаПоМетодуСсылкеУО(СсылкаУО, , СтруктураЗапроса);
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		Если Ответ.error <> "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ответ.error;
			Сообщение.Сообщить(); 	
		    Возврат Неопределено;
		КонецЕсли;
		
		Данные = Ответ.data;	
		Возврат Данные;
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции 

Функция ДанныеПроизвольногоЗапроса(СтруктураЗапроса)    Экспорт
	
	Попытка
		
		ИДЗапроса = СтруктураЗапроса.ИДЗапроса;
		
		Если ИДЗапроса = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПутьКОбработке = "";
		
		Если СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Ответ() Тогда
			ПутьКОбработке = СтруктураЗапроса.ПутьКОбработкеПриемник;
		Иначе 	
			ПутьКОбработке = СтруктураЗапроса.ПутьКОбработкеИсточник;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПутьКОбработке)  Тогда
			пр_Модуль = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ПутьКОбработке);
			Если пр_Модуль <> Неопределено Тогда
				Результат = ДанныеОбработкиПроизвольногоЗапроса(СтруктураЗапроса, пр_Модуль);
				Возврат  Результат;
			КонецЕсли; 
		КонецЕсли; 
		
		пр_Модуль = пр_Общий.ИсполняемыйМодуль(ИДЗапроса, пр_НастройкиПовтИсп.ТекущийПользователь()); 
		Если пр_Модуль <> Неопределено Тогда
			Результат = ДанныеОбработкиПроизвольногоЗапроса(СтруктураЗапроса, пр_Модуль);
			Возврат  Результат;
		КонецЕсли; 
		
		Результат = Неопределено;
		пр_Модуль = пр_Общий.ИсполняемыйМетодМодуля("оду_ПроизвольныеЗарпосы", ИДЗапроса, пр_НастройкиПовтИсп.ТекущийПользователь()); 
		ПолноеИмяМетодаСПараметрами = СтрШаблон("пр_Модуль.%1_%2(СтруктураЗапроса)", ИДЗапроса, XMLСтрока(СтруктураЗапроса.СостояниеЗапроса));
		Выполнить("Результат = " + ПолноеИмяМетодаСПараметрами);
	
		Возврат Результат;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		ОтправитьСообщениеВТелеграмExchange("оду_Общий.ДанныеВыполненияПроизвольногоЗапроса", , пр_Ошибка, СтруктураЗапроса.ИДБазы, , , СтруктураЗапроса);	
		//TODO:  продумать запись ошибки и номер попытки
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 


Функция СтруктураДанныхПроизвольногоЗапроса(ИДЗапроса, ПриоритетОбмена, Данные)  Экспорт 
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.ИДОбъекта = ИДЗапроса;
	СтруктураДанных.ИДБазыИсточник = ИДЗапроса;
	СтруктураДанных.ИДБазыПриемник = ИДЗапроса;

КонецФункции 

//Для Произвольного обмена
Функция СтруктураПолученияДанныхОбмена() Экспорт
	
	СтруктураПолученияДанных = Новый Структура();
	СтруктураПолученияДанных.Вставить("Результат", Истина);
	СтруктураПолученияДанных.Вставить("ОписаниеОшибки", "");
	СтруктураПолученияДанных.Вставить("ДанныеОбмена", Неопределено);
	Возврат  СтруктураПолученияДанных;
	
КонецФункции

Функция ДанныеОбработкиПроизвольногоЗапроса(СтруктураЗапроса, пр_Модуль)   Экспорт 
	
	Попытка
		
		Если СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Запрос() Тогда
			Возврат пр_Модуль.оду_Запрос(СтруктураЗапроса);
		ИначеЕсли СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Ответ() Тогда	
			Возврат пр_Модуль.оду_Ответ(СтруктураЗапроса);
		ИначеЕсли СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_ОбработкаОтвета() Тогда	
			Возврат пр_Модуль.оду_ОбработкаОтвета(СтруктураЗапроса);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_общий.ОтправитьСообщениеВТелеграмExchange("оду_Общий.ДанныеОбработкиПроизвольногоЗапроса", , пр_Ошибка, СтруктураЗапроса.ИДБазы, , , СтруктураЗапроса);	
		//TODO:  продумать запись ошибки и номер попытки
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

//ИДЗапроса 		- Имя метода произвольного обмена
//ИмяЗапроса    	- Имя метода
//ОписаниеЗапроса	- 
//ЭтапЗапроса   	- Этап метода запроса
//РежимОбмена   	- РежимОбмена - ПеречислениеСсылка.оду_РежимОбмена
//РежимОтладки  	- Признак выполнения отладки
//ВыполнятьВФоне	- Признак выполнения обмена в фоне
//serializeXDTO 	- Признак чтения, записи JSON тела HTTPзапроса (Серилизовать данные)
//ОбменЧерезФайл	- Признак обмена
//Имя файла содержиться в Data
//Функция СтруктураИнструкцииВыполненияЗапроса() Экспорт
Функция СтруктураПараметровВыполненияПроизвольногоЗапроса() Экспорт
	
	СтруктураЗапроса = Новый Структура();
	
	//Инфо о запросе
	СтруктураЗапроса.Вставить("ИДЗапроса", ""); 
	СтруктураЗапроса.Вставить("ИДБазыИсточник", ""); 
	СтруктураЗапроса.Вставить("ИДБазыПриемник", ""); 
	
	СтруктураЗапроса.Вставить("ИмяЗапроса", ""); //
	//СтруктураЗапроса.Вставить("ОписаниеЗапроса", "");  // ???? Нужно ли
	
	СтруктураЗапроса.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	СтруктураЗапроса.Вставить("СостояниеЗапроса", оду_ОбщийПовтИсп.СПЗ_Запрос());
	СтруктураЗапроса.Вставить("Пользователь", "");
	
	//Данные запроса
	СтруктураЗапроса.Вставить("ДанныеЗапроса", Неопределено); //Может быть текст, Двоичные данные 
	СтруктураЗапроса.Вставить("ОбменЧерезФайл", Ложь); //Если ИмяФайлаОбмена - заполненно - значит Через Файл
	//СтруктураЗапроса.Вставить("ТипХраненияФайла", Ложь); //Если ИмяФайлаОбмена - заполненно - значит Через Файл
	//СтруктураЗапроса.Вставить("КаталогЗапроса", "");
	СтруктураЗапроса.Вставить("ИмяФайлаЗапроса", ""); //КаталогОбмена - можно забрать из файла
	
	СтруктураЗапроса.Вставить("serializeXDTO", Истина); 
	
	
	//Как бует выполняться запрос
	СтруктураЗапроса.Вставить("ВыполнятьВФоне", Ложь); 
	
	СтруктураЗапроса.Вставить("РежимОтладки", Ложь);			
	
	СтруктураЗапроса.Вставить("НомерЭтапаЗапроса", 1); 
	СтруктураЗапроса.Вставить("РежимОтладкиЭтапа", Ложь);
	СтруктураЗапроса.Вставить("КонфигурацияКонвертацииЗапроса", оду_ОбщийПовтИсп.КонфигурацияПроизвольная());
	
	СтруктураЗапроса.Вставить("ПутьКОбработкеИсточник", ""); 
	СтруктураЗапроса.Вставить("ПутьКОбработкеПриемник", "");
	
	//Защита от изменений рабочих баз из копии УО 
	СтруктураЗапроса.Вставить("ИзменяетДанныеВПриемнике", Истина);
	
	//Собрать данные без отправки УО
	СтруктураЗапроса.Вставить("ПодготовитьДанные", Ложь);
	
	//Структура или соответвие, передаются отборы, доп свойства, описания выполнения
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", Неопределено);
	
	
	//СтруктураЗапроса.Вставить("РежимОбмена", Неопределено);
	//СтруктураЗапроса.Вставить("ТекстЗапроса", ""); 
	
	////Для обмена
	//НастройкиОбмена = Новый Структура();
	//НастройкиОбмена.Вставить("ИДБазы", ""); 
	//НастройкиОбмена.Вставить("СсылкаУО", ""); 
	//
	//СтруктураЗапроса = Новый Структура("СтруктураЗапроса, НастройкиОбмена", СтруктураЗапроса, НастройкиОбмена);
	//Возврат СтруктураЗапроса;
	
	
	СтруктураЗапроса.Вставить("ИДБазы", ""); 
	СтруктураЗапроса.Вставить("СсылкаУО", ""); 
	
	Возврат СтруктураЗапроса;
	
КонецФункции


Функция СтруктураСсылки(Ссылка, ВДЗ = Неопределено, ПоляПоиска = "") Экспорт
	
	СтруктураСсылки = Новый Структура("ИмяТипаСсылки, ИД, ПоляПоиска");
	СтруктураСсылки.ИмяТипаСсылки = пр_Общий.ИмяТипаXMLПоСсылке(Ссылка);
	СтруктураСсылки.ИД = XMLСтрока(Ссылка);
	
	Если ЗначениеЗаполнено(ПоляПоиска) и ЗначениеЗаполнено(ВДЗ)  Тогда
		СтруктураПолейПоиска = Новый Структура(ПоляПоиска); 		
	   	ЗаполнитьЗначенияСвойств(СтруктураПолейПоиска, ВДЗ); 
		СтруктураСсылки.ПоляПоиска = СтруктураПолейПоиска;
	КонецЕсли; 
	
	Возврат   СтруктураСсылки;
	
КонецФункции 

//СтруктураДанных - Структура("ИмяТипаСсылки, ИД, ПоляПоиска")
Функция СсылкаПоСтруктуре(СтруктураДанных)  Экспорт
	
	Ссылка = пр_Общий.СсылкаПоТипXML(СтруктураДанных.ИмяТипаСсылки, СтруктураДанных.ИД);
	
	Возврат  Ссылка;
	
КонецФункции


Функция ЗаписатьДанныеЗапросаВФайл(ДанныхОбмена, УчастникОбмена, ИмяЗапроса, ТипХраненияФайла = "json") Экспорт
	
	ИмяФайлаЗапроса = ИмяФайлаЗапроса(УчастникОбмена, ИмяЗапроса, ТипХраненияФайла = "json"); 
	Если ЗначениеЗаполнено(ИмяФайлаЗапроса) И ТипХраненияФайла = "json"  Тогда
		ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныхОбмена, ИмяФайлаЗапроса);
	КонецЕсли;
	
	Возврат ИмяФайлаЗапроса;
	
КонецФункции 

Функция ИмяФайлаЗапроса(УчастникОбмена, ИмяЗапроса, ТипХраненияФайла = "json") Экспорт
	
	ИмяБазыПриемника = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "Код");
	КаталогЗапроса = ЗаполнитьКаталогХраненияФайловЗапроса(ИмяБазыПриемника, ИмяЗапроса);
	ИмяФайла = Формат(ТекущаяДатаСеанса(), "ДФ='yyyy MM dd'"); 
	ИмяФайлаОбмена = пр_Общий.ПолныйПутьКФайлу(, ИмяФайла, КаталогЗапроса, ТипХраненияФайла, Истина);
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 

Функция ЗаполнитьКаталогХраненияФайловЗапроса(ИмяБазыПриемника, ИмяЗапроса) Экспорт
	
	КаталогОбменаПЗ = "";
	Если ЗначениеЗаполнено(ИмяБазыПриемника) И ЗначениеЗаполнено(ИмяЗапроса)  Тогда
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		КаталогОбменаПЗ = оду_Общий.КаталогФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника);
		Если ЗначениеЗаполнено(КаталогОбменаПЗ)  Тогда
			КаталогОбменаПЗ = СтрШаблон("%1\%2\%3", КаталогОбменаПЗ, "arbitraryRequests", ИмяЗапроса);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат КаталогОбменаПЗ;
	
КонецФункции


Функция ДанныеПроизвольногоЗапросаИзСтруктуры(СтруктураЗапроса)  Экспорт
	
	Если СтруктураЗапроса.ИмяФайлаЗапроса <> "" Тогда
		//Если СтруктураЗапроса.serializeXDTO = Истина Тогда
			ТелоЗапроса = оду_Общий.ПрочитатьJSON_ИзТела_Сериализ(, СтруктураЗапроса.ИмяФайлаЗапроса);
			Если ТелоЗапроса = Неопределено Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка чтения файла";
				Сообщение.Сообщить(); 	
				Возврат Неопределено;
				
			КонецЕсли; 
			
			ДанныеЗапроса = ТелоЗапроса.ДанныеЗапроса;
		//КонецЕсли; 	
		
	//ИначеЕсли  СтруктураЗапроса.ТекстЗапроса <> "" Тогда
	
	ИначеЕсли  ТипЗнч(СтруктураЗапроса.ДанныеЗапроса) = Тип("ХранилищеЗначения") Тогда 
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса.Получить();
		Возврат  ДанныеЗапроса;
	КонецЕсли; 
	
КонецФункции 



#Область  ПодуматьПеределать

Функция СтруктураОтветаУниверсальногоОбменаПоМетодуСсылкеУО(СсылкаУО, data = Неопределено, СтруктураПроизвольногоЗапроса = Неопределено) Экспорт
	
	ПараметрыПодключения = оду_ОбщийПовтИсп.ПараметрыПодключенияПоСсылкеУО(СсылкаУО); 
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	//Защита от изменения данных в рабочих базах
	ИзменяетДанныеВПриемнике = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПроизвольногоЗапроса, "ИзменяетДанныеВПриемнике", Ложь);
	Если ИзменяетДанныеВПриемнике = Истина Тогда
		Если НастройкиТекущейБД.ЭтоРабочаяБД = Ложь И ПараметрыПодключения.ЭтоРабочаяБД = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "оду. Нельзя изменять данные рабочей базы!";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли; 
	КонецЕсли; 							
	
	СтруктураВыполненияОбмена = СтруктураТелаЗапросаHTTP(СтруктураПроизвольногоЗапроса);
	СтруктураВыполненияОбмена.header.to = ПараметрыПодключения.ИДБазыПриемник;
	СтруктураВыполненияОбмена.header.front = НастройкиТекущейБД.ИДБазыИсточник;
	СтруктураВыполненияОбмена.data  = data; 
	СтруктураВыполненияОбмена.instruct.Вставить("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	СтруктураВыполненияОбмена.instruct.Вставить("ИДБазыПриемник", ПараметрыПодключения.ИДБазыПриемник);
	
	ТелоЗапроса = ЗаполненноеТелоЗапросаHTTPПоСтруктуреОбмена(СтруктураВыполненияОбмена);
	СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, "exchangeData");
	Возврат   СтруктураОтвета;
	
КонецФункции

//ИДОбъекта - ГУИД оду_НастройкаКонвертацииДанных, или Строка - Наименование произвольного запроса 
//РежимОбмена
//Если РежимОтладки = Истина
//	Запись происходит в файл
//	Используется Обработка отладки Файловая или БСП
//Если ТЧ.ЭтапыЗапросов.РежимОтладки = Истина
//	По каждому этапу проходит запись в РС.оду_СостояниеОбъектовОбмена
//	В каждой Базе происходит свой этап с выгрузкой в файл, для последовательной разработки
//КонфигурацияКонвертацииОбмена - ПеречислениеСсылка.оду_КонфигурацияКонвертацииДанных.Произвольная
//ИмяФайлаОбмена - Если заполненна, то через файл, иначе напрямую ДанныеОбмена
//ПриоритетОбмена - Номер этапа - ТЧ.ЭтапыЗапросов.НомерСтроки
//
Функция РезультатВыполненияПроизвольногоЗапроса_(СсылкаУО, ИДЗапроса, ДанныеЗапроса = Неопределено, ЭтапЗапроса = 1, ДатаВыгрузки = Неопределено)  Экспорт
	
	Если ТипЗнч(ИДЗапроса) = Тип("СправочникСсылка.оду_НастройкаКонвертацииДанных") Тогда
		СтруктураПроизвольногоЗапроса = СтруктураПроизвольногоЗапросаПоСсылкеНастроекКД(ИДЗапроса, ЭтапЗапроса, ДатаВыгрузки);	
	Иначе
		СтруктураПроизвольногоЗапроса = СтруктураИнструкцииВыполненияОбмена();
		СтруктураПроизвольногоЗапроса.ИДЗапроса = ИДЗапроса;
		СтруктураПроизвольногоЗапроса.ЭтапЗапроса = ЭтапЗапроса;
		СтруктураПроизвольногоЗапроса.ДатаВыгрузки = ?(ДатаВыгрузки = Неопределено, ТекущаяДатаСеанса(), ДатаВыгрузки);
		СтруктураПроизвольногоЗапроса.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	КонецЕсли; 
	
	СтруктураОтвета = СтруктураОтветаУниверсальногоОбменаПоМетодуСсылкеУО(СсылкаУО, ДанныеЗапроса, СтруктураПроизвольногоЗапроса);
	Возврат   СтруктураОтвета;
	
КонецФункции 


Функция СтруктураПроизвольногоЗапросаПоСсылкеНастроекКД(СсылкаНастройкиКД, Этап, ДатаВыгрузки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИДЗапроса КАК ИДЗапроса,
		|	&РежимОбмена КАК РежимОбмена,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.РежимОтладки КАК РежимОтладки,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.Код КАК ИмяЗапроса,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.НомерСтроки КАК ЭтапЗапроса,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.РежимОтладки КАК РежимОтладкиЭтапа,
		|	&ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.КаталогОбмена КАК КаталогОбмена,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.ОписаниеЗапроса КАК ОписаниеЗапроса,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.Используется КАК Используется,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.ТекстЗапроса КАК ТекстЗапроса,
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		//|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка.ПравилоЗагрузки КАК ПравилоЗагрузки
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.РежимОтладки = Истина КАК ОбменЧерезФайл
		|ИЗ
		|	Справочник.оду_НастройкаКонвертацииДанных.ЭтапыЗапросов КАК оду_НастройкаКонвертацииДанныхЭтапыЗапросов
		|ГДЕ
		|	оду_НастройкаКонвертацииДанныхЭтапыЗапросов.Ссылка = &СсылкаНастройкиКД
		|	И оду_НастройкаКонвертацииДанныхЭтапыЗапросов.НомерСтроки = &Этап
		|";
	
	Запрос.УстановитьПараметр("СсылкаНастройкиКД", XMLСтрока(СсылкаНастройкиКД));
	Запрос.УстановитьПараметр("РежимОбмена", оду_ОбщийПовтИсп.РежимВыгрузка());
	Запрос.УстановитьПараметр("ДатаВыгрузки", ?(ДатаВыгрузки = Неопределено, ТекущаяДатаСеанса(), ДатаВыгрузки));
	Запрос.УстановитьПараметр("ИДЗапроса", XMLСтрока(СсылкаНастройкиКД));

	Запрос.УстановитьПараметр("СсылкаНастройкиКД", СсылкаНастройкиКД);
	Запрос.УстановитьПараметр("Этап", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	РЗ = Запрос.Выполнить();
	
	ВДЗ = РЗ.Выбрать();
	
	СтруктураПроизвольногоЗапроса = СтруктураИнструкцииВыполненияОбмена();
	Если ВДЗ.Следующий()  Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПроизвольногоЗапроса, ВДЗ); 
	КонецЕсли; 
	
	//СтруктураПроизвольногоЗапроса = пр_Общий.СтруктураПоЗапросу(РезультатЗапроса);
	
	Если СтруктураПроизвольногоЗапроса = Неопределено Тогда
		Возврат  Неопределено;
	КонецЕсли; 
	
	Возврат  СтруктураПроизвольногоЗапроса;
	
КонецФункции 

#КонецОбласти


#КонецОбласти
 

#Область  ОтправкаТелеграмБот

//БазаИсточник, Метод, Объект1С = "", ОшибкаДляТелеграмм = "", БазаПриемник = "", Версия = "", Данные = Неопределено, ДопИнформация = ""
Функция ОтправитьСообщениеВТелеграмExchange(Метод, Объект1С = "", ОшибкаДляТелеграмм = "", БазаУО = "", Версия = "", Данные = Неопределено, ДопИнформация = "")  Экспорт
	
	Попытка
		
		//Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
		//НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		
		Если НастройкиТекущейБД.Логировать = Ложь Тогда
			Возврат Неопределено;	
		КонецЕсли;
		
		chat_id = НастройкиТекущейБД.chat_id; 
		token = НастройкиТекущейБД.token; 
		Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(token) Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		//Параметры запраса
		text = "БазаИсточник: " + НастройкиТекущейБД.ПредставлениеТекущейБД + Символы.ПС;
		text = text + "БазаУО: " + БазаУО + Символы.ПС;
		
		text = text + "Метод: " + Метод + Символы.ПС;
		
		Если Объект1С <> "" Тогда
			text = text + "Объект 1С: " + Строка(Объект1С) + Символы.ПС;
		КонецЕсли; 
		
		Если Версия <> "" Тогда
			text = text + "Версия: " + Версия + Символы.ПС;
		КонецЕсли; 
		
		//Если Клиент <> "" Тогда
		//	text = text + "Клиент: " + Строка(Клиент) + Символы.ПС;
		//КонецЕсли; 
		
		Если ДопИнформация <> "" Тогда
			Если ТипЗнч(ДопИнформация) = пр_НастройкиПовтИсп.ТипСтруктура() Тогда
				ДопИнформацияТекст = "";
				Для каждого КлючЗначение Из ДопИнформация Цикл
					ДопИнформацияТекст = ДопИнформацияТекст + СтрШаблон("%1 : %2", КлючЗначение.Ключ, КлючЗначение.Значение) + Символы.ПС;
				КонецЦикла;
			Иначе
				ДопИнформацияТекст = ДопИнформация;	
			КонецЕсли; 
			text = text + "ДопИнформация: " + ДопИнформацияТекст + Символы.ПС;
		КонецЕсли; 
		
		
		//Описание Ошибки
		Если ОшибкаДляТелеграмм <> "" Тогда
			text = text + "Ошибка!:" + ОшибкаДляТелеграмм + Символы.ПС;
		КонецЕсли; 
		
		////ДанныеЗапроса
		//Если Входящий <> "" Тогда
		//	Если Входящий = Истина Тогда
		//		НаправлениеЗапроса = "Входящий запрос:";
		//	Иначе 	
		//		НаправлениеЗапроса = "Исходящий запрос:";
		//	КонецЕсли; 
		//КонецЕсли; 
		//
		//Если ТелоЗапроса <> "" Тогда
		//	text = text + НаправлениеЗапроса + Символы.ПС;
		//	text = text + оду_ОбменДанными.СформироватьJSON(ТелоЗапроса, Истина);
		//КонецЕсли; 
		
		Результат = SendMessageНаСервере(chat_id, token, text);
		Возврат  Результат;
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции

Функция SendMessageНаСервере(chat_id, token, text, parse_mode = Неопределено, disable_web_page_preview = Неопределено, 
		disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено) Экспорт  
	
	Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(text) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("chat_id", ЧислоВСтроку(chat_id));
	ПараметрыЗапроса.Вставить("text", text);
	ПараметрыЗапроса.Вставить("parse_mode", Строка(parse_mode));
	ПараметрыЗапроса.Вставить("disable_web_page_preview", ФорматироватьБулево(disable_web_page_preview));
	ПараметрыЗапроса.Вставить("disable_notification", ФорматироватьБулево(disable_notification));
	ПараметрыЗапроса.Вставить("reply_to_message_id", ЧислоВСтроку(reply_to_message_id));
	ПараметрыЗапроса.Вставить("reply_markup", СформироватьJSON(reply_markup));
	
	Результат = ОтправитьHTTPЗапросТелеграм(token, "sendMessage", ПараметрыЗапроса);
	
	Возврат ОбработатьJSON(Результат); 
	
КонецФункции

Функция ОтправитьHTTPЗапросТелеграм(token, method, method_param = Неопределено, Данные = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		СоединениеHTTP = Новый HTTPСоединение("api.telegram.org", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("token", token);
		ПараметрыЗапроса.Вставить("method", method);
		ПараметрыЗапроса.Вставить("method_param", method_param);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Если Данные = Неопределено Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		Иначе	
			ТекстЗапроса = СформироватьТелоЗапроса(Данные);
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТекстЗапроса);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Данные["Boundary"]);
			HTTPЗапрос.Заголовки.Вставить("Content-Length", Формат(ТекстЗапроса.Размер(), "ЧДЦ=0; ЧН=0; ЧГ=0"));
		КонецЕсли; 
		HTTPЗапрос.АдресРесурса = СформироватьМетод(ПараметрыЗапроса);
		
		Если Данные = Неопределено Тогда
			РезультатЗапроса = СоединениеHTTP.Получить(HTTPЗапрос);
		Иначе
			РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли; 
		
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Результат = РезультатЗапроса.ПолучитьТелоКакСтроку();
		Иначе
			//РегистрыСведений.tl_Логи.ЛогHTTP(РезультатЗапроса);	
		КонецЕсли; 
		
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
	Возврат Результат;
КонецФункции

Функция СформироватьМетод(ПараметрыЗапроса)
	Стр = "";
	ПараметрыМетода = "";
	
	// Переделать формирование строки с методом и параметрами под конкретный API
	// данная реализация для ВКонтакте
	Если ЗначениеЗаполнено(ПараметрыЗапроса["method_param"]) Тогда
		
		СтрокиПараметров = Новый Массив;
		
		Для каждого Строка Из ПараметрыЗапроса["method_param"] Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокиПараметров.Добавить(СтрШаблон("%1=%2", Строка.Ключ, Строка.Значение));
		КонецЦикла; 
		
		ПараметрыМетода = СтрСоединить(СтрокиПараметров, "&");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Стр = СтрШаблон("bot%1/%2?%3", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"], ПараметрыМетода); 
	Иначе
		Стр = СтрШаблон("bot%1/%2", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"]); 
	КонецЕсли; 
	
	Возврат Стр;
КонецФункции
 
Функция СформироватьТелоЗапроса(Данные)
	
    Тело         = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, Символы.ВК + Символы.ПС, Символы.ПС, Истина);
	
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"]);
    ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""%1""; filename=""%2""", Данные["name"], Данные["ИмяФайла"]));
    ЗаписьДанных.ЗаписатьСтроку("Content-Type:" + Данные["Content-Type"]);
    ЗаписьДанных.ЗаписатьСтроку("");   
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Данные["ИмяФайлаПолное"]);
    ЗаписьДанных.Записать(ДвоичныеДанные);
	
	ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"] + "--");
    ЗаписьДанных.Закрыть();
    
    ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); 
	
	Возврат ДанныеТела;
КонецФункции

#Область СлужебныеПроцедурыИФункции

//TODO:  доработать
Процедура ЗаписатьОшибку(ИнформацияОбОшибке = Неопределено, ЛогОбязательно = Ложь) Экспорт
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//TODO:  Добавить опцию ВестиЛоги()
	Если  ЛогОбязательно = Ложь Тогда 
		Возврат;	
	КонецЕсли; 
	
	ДобавитьЗапись("Ошибка", 
		ИнформацияОбОшибке.ИмяМодуля + " " + ИнформацияОбОшибке.НомерСтроки, 
		ИнформацияОбОшибке.Описание);
	
КонецПроцедуры 
	
//TODO:  Заменить на логи Телеграм - Канал для ошибок баз
Процедура ДобавитьЗапись(ТипСообщения, Контекст, Данные)
	Если ЗначениеЗаполнено(Данные) Тогда 
		//ТекстДок = Новый ТекстовыйДокумент;
		//ТекстДок.ВставитьСтроку("" + ТипСообщения + "/" + Контекст + "/" + Данные); 	
		//ТекстДок.Записать("\\pivo.local\Resource\Личные\Кириллов ПС\r\ut_2021\work\Логи\ЕГАИС\" + ТекущаяДата() + ".txt");
		//МенеджерЗаписи = РегистрыСведений.tl_Логи.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.ТипСообщения = ТипСообщения;
		//МенеджерЗаписи.Контекст = Контекст;
		//МенеджерЗаписи.Данные = Данные;
		//МенеджерЗаписи.Записать();
	КонецЕсли; 
КонецПроцедуры

Функция ЛогHTTP(ДанныеHTTP) Экспорт
	ИнформацияТелеграм = "";
	
	//TODO:  Добавить опцию ВестиЛоги()
	//Если НЕ ВестиЛоги() Тогда
	//	Возврат ИнформацияТелеграм;
	//КонецЕсли; 
	
	Если ТипЗнч(ДанныеHTTP) = Тип("HTTPЗапрос") Тогда
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPОтвет") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPОтвета(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPСервисЗапрос") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	КонецЕсли; 
	
	ЗаписатьHTTPЗапрос("ЛогHTTP", ИнформацияТелеграм);	
	
	Возврат ИнформацияТелеграм;
КонецФункции    

Процедура ЗаписатьHTTPЗапрос(Контекст, Данные) Экспорт
	ДобавитьЗапись("HTTPЗапрос", Контекст, Данные);
КонецПроцедуры


Функция СформироватьДанныеHTTPЗапроса(ЗапросHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("HTTP метод = " + ЗапросHTTP.HTTPМетод);
	МассивСтрок.Добавить("БазовыйURL: " + ЗапросHTTP.БазовыйURL);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("ОтносительныйURL: " + ЗапросHTTP.ОтносительныйURL);
	МассивСтрок.Добавить("ПараметрыURL: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.ПараметрыURL, Истина));
	МассивСтрок.Добавить("ПараметрыЗапроса: " + Символы.ПС + СформироватьJSON(ЗапросHTTP.ПараметрыЗапроса, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + СформироватьJSON(ОбработатьJSON(ЗапросHTTP.ПолучитьТелоКакСтроку()), Истина));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция СформироватьДанныеHTTPОтвета(ОтветHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("КодСостояния = " + ОтветHTTP.КодСостояния);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + СформироватьJSON(ОтветHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + ОтветHTTP.ПолучитьТелоКакСтроку());
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции


	
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьБулево(ТекущееЗначение) Экспорт
	Возврат Формат(ТекущееЗначение, "БЛ=False; БИ=True");
КонецФункции

Функция КоординатыВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧЦ=8; ЧДЦ=6; ЧРД=.; ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

Функция ЧислоВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти

//ОМ.оду_Общий