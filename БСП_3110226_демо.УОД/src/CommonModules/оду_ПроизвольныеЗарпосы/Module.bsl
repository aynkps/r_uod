

#Область  ОтчетОстаткиТоваровЕГАИС
 
Функция ОтчетОстаткиТоваровЕГАИС_Ответ(СтруктураПараметров) Экспорт
	
	ИмяЗапроса = "Ответ_" + СтруктураПараметров.ИДЗапроса;
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПолученияОстатковЕГАИС();
		
		//Запрос.Параметры.Вставить("ПериодСреза", СтруктураПараметров.ПериодСреза);
				
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		
		ВДЗ = РЗ.Выбрать();
		
		Результат = Новый Массив;
		
		Пока ВДЗ.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			
			СтруктураДанных.Вставить("Организация", оду_Общий.СтруктураСсылки(ВДЗ.Организация, ВДЗ));
			СтруктураДанных.Вставить("Номенклатура", оду_Общий.СтруктураСсылки(ВДЗ.Номенклатура, ВДЗ));
			СтруктураДанных.Вставить("СерияНоменклатуры", оду_Общий.СтруктураСсылки(ВДЗ.СерияНоменклатуры, ВДЗ));
			
			СтруктураДанных.Вставить("НоменклатураЕГАИС", ВДЗ.НоменклатураЕГАИС);
			СтруктураДанных.Вставить("СправкаА", ВДЗ.СправкаА);
			СтруктураДанных.Вставить("СправкаБ", ВДЗ.СправкаБ);
			СтруктураДанных.Вставить("СправкаАДатаРозлива", ВДЗ.СправкаАДатаРозлива);
			СтруктураДанных.Вставить("КоличествоОстаток", ВДЗ.КоличествоОстаток);
			СтруктураДанных.Вставить("КоличествоОстатокЕГАИСКоэфДалл", ВДЗ.КоличествоОстатокЕГАИСКоэфДалл);
			СтруктураДанных.Вставить("КоэфДалл", ВДЗ.КоэфДалл);
			
			Результат.Добавить(СтруктураДанных);
			
		КонецЦикла;
				
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат  Результат;
	
КонецФункции 

Функция ТекстЗапросаПолученияОстатковЕГАИС()
	
	Возврат
		"ВЫБРАТЬ
		|	астПартииТоваровПоСправкамЕГАИСОстатки.Организация КАК Организация,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.НоменклатураЕГАИС.Код КАК НоменклатураЕГАИС,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.Номенклатура КАК Номенклатура,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.СправкаА.Код КАК СправкаА,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.СправкаБ.Код КАК СправкаБ,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.СправкаА.ДатаРозлива КАК СправкаАДатаРозлива,
		|	астПартииТоваровПоСправкамЕГАИСОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА астПартииТоваровПоСправкамЕГАИСОстатки.НоменклатураЕГАИС.НефасованнаяПродукция
		|			ТОГДА ВЫБОР
		|					КОГДА астПартииТоваровПоСправкамЕГАИСОстатки.Номенклатура.ОбъемДАЛ = 0
		|						ТОГДА 0
		|					ИНАЧЕ астПартииТоваровПоСправкамЕГАИСОстатки.Номенклатура.ОбъемДАЛ
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэфДалл
		|ПОМЕСТИТЬ ВТ_ОтстакиЕГАИС
		|ИЗ
		|	РегистрНакопления.астПартииТоваровПоСправкамЕГАИС.Остатки(, ) КАК астПартииТоваровПоСправкамЕГАИСОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОтстакиЕГАИС.Организация КАК Организация,
		|	ВТ_ОтстакиЕГАИС.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
		|	ВТ_ОтстакиЕГАИС.Номенклатура КАК Номенклатура,
		|	ВТ_ОтстакиЕГАИС.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ВТ_ОтстакиЕГАИС.СправкаА КАК СправкаА,
		|	ВТ_ОтстакиЕГАИС.СправкаАДатаРозлива КАК СправкаАДатаРозлива,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ОтстакиЕГАИС.КоэфДалл, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_ОтстакиЕГАИС.КоличествоОстаток / ВТ_ОтстакиЕГАИС.КоэфДалл
		|	КОНЕЦ КАК КоличествоОстаток,
		|	ВТ_ОтстакиЕГАИС.КоличествоОстаток КАК КоличествоОстатокЕГАИСКоэфДалл,
		|	ВТ_ОтстакиЕГАИС.КоэфДалл КАК КоэфДалл,
		|	ВТ_ОтстакиЕГАИС.СправкаБ КАК СправкаБ
		|ИЗ
		|	ВТ_ОтстакиЕГАИС КАК ВТ_ОтстакиЕГАИС
		|ГДЕ
		|	ВТ_ОтстакиЕГАИС.КоличествоОстаток > 0
		|";
	
КонецФункции 

#КонецОбласти


#Область  РегламентУстановкиРозничныхЦенМП

Функция РегламентУстановкиРозничныхЦенМП_Ответ(СтруктураЗапроса) Экспорт
	
	Попытка
		
		ИмяЗапроса = "РегламентУстановкиРозничныхЦенМП_Ответ";
		
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		
		ПериодСреза = ПараметрыЗапроса.ПериодСреза;
		ВидЦены = оду_Общий.СсылкаПоСтруктуре(ПараметрыЗапроса.ВидЦены);
		//пр_Общий.СсылкаПоТипXML(ДанныеЗапроса.ВидЦены.ИД, ДанныеЗапроса.ВидЦены.ИмяТипаСсылки);
		
		Если НЕ ЗначениеЗаполнено(ВидЦены)  Тогда
			Ошибка = "Не удалось найти вид цены в УТАП";
			оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
		    Возврат Ошибка;
		КонецЕсли; 
		
		СоотвУпаковки = СтруктураСоответвийУпаковок(ИмяЗапроса, ДанныеЗапроса.МассивУпаковок);
		
		Если СоотвУпаковки = Неопределено  Тогда
			Ошибка = "Не удалось найти соответсвия упаковкам в УТАП";
		    Возврат Ошибка;
		КонецЕсли; 
		
		МассивДанных = ДанныеЗапроса.МассивДанных;
		ТаблицаДанных = ПолучитьТаблицуДанных(ИмяЗапроса, МассивДанных, СоотвУпаковки);
		
		Если ТаблицаДанных = Неопределено  Тогда
			Ошибка = "Не удалось получить таблицу данных цен в УТАП";
		    Возврат Ошибка;
		КонецЕсли; 
		
		ВыборкаИзменныхЦен = ТаблицаАктуальныхЦен(ТаблицаДанных, ВидЦены, ПериодСреза);
		
		Если ВыборкаИзменныхЦен.Количество() = 0 Тогда
			Ответ = "Цены не менялись";
		    Возврат Ответ;
		КонецЕсли; 
		
		ДанныеОвета = ОбработатьВыборкуЦен(ИмяЗапроса, ВыборкаИзменныхЦен, СоотвУпаковки);
		
		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 
 
Функция СтруктураСоответвийУпаковок(ИмяЗапроса, МассивУпаковок)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЗ.Колонки.Добавить("Владелец");
		ТЗ.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
		ТЗ.Колонки.Добавить("Родитель", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
		СоотвУпаковки = Новый Соответствие();
		ЕстьОшибка = Ложь;
		
		Для каждого Стр Из МассивУпаковок Цикл
			
			//Стр.Упаковка.ИмяТипаСсылки
			УпаковкаИД = Стр.Упаковка.ИД;
			Упаковка = пр_Общий.СсылкаПоТипXML("CatalogRef.УпаковкиНоменклатуры", УпаковкаИД);
			
			Если Упаковка = Неопределено Тогда
				
				СтРодитель = Стр.Родитель;
				Если СтРодитель.ИД <> "00000000-0000-0000-0000-000000000000" Тогда
					Родитель = пр_Общий.СсылкаПоТипXML("CatalogRef.НаборыУпаковок", СтРодитель.ИД);
					Если Родитель = Неопределено   Тогда
						ЕстьОшибка = Истина;  
						Ошибка = "Не удалось найти родителя Упаковки";
						//туду имя запроса
						оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
					КонецЕсли; 
				Иначе
					Родитель = Неопределено;
				КонецЕсли; 
				
				
				СтВладелец = Стр.Владелец;
				Если СтВладелец.ИД <> "00000000-0000-0000-0000-000000000000" Тогда
					Владелец = оду_Общий.СсылкаПоСтруктуре(СтВладелец);
					//пр_Общий.СсылкаПоТипXML(Владелец.ИмяТипаСсылки, Владелец.ИД);
					Если Владелец = Неопределено   Тогда
						ЕстьОшибка = Истина;  
						Ошибка = "Не удалось найти владельца Упаковки";
						оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
					КонецЕсли; 
				Иначе
					Владелец = Неопределено;
				КонецЕсли; 
				
				Нстр = ТЗ.Добавить();
				Нстр.ИД = УпаковкаИД;
				Нстр.Наименование = Стр.Наименование;
				Нстр.Владелец = Владелец;
				Нстр.Родитель = Родитель;
				
				//TODO:  доделать, когда не будет сопоставлений
				ЕстьОшибка = Истина;  
				Ошибка = "Доделать произвольный поиск упаковки";
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
				
			Иначе
				СоотвУпаковки.Вставить(УпаковкаИД, Упаковка);  	
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат СоотвУпаковки;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
	КонецПопытки; 
	
КонецФункции 

Функция ПолучитьТаблицуДанных(ИмяЗапроса, МассивДанных, СоотвУпаковки)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		ТЗ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТЗ.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		ТЗ.Колонки.Добавить("ИД_Упаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
		ЕстьОшибка = Ложь;
		
		Для каждого Стр Из МассивДанных Цикл
			
			//Стр.Упаковка.ИмяТипаСсылки
			Номенклатура = оду_Общий.СсылкаПоСтруктуре(Стр.Номенклатура);
			
			Если Номенклатура = Неопределено Тогда
				ЕстьОшибка = Истина;  
				Ошибка = "Не удалось найти номенклатуру";
				Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
			КонецЕсли; 
			
			СтрХарактеристика = Стр.Характеристика;
			Если СтрХарактеристика.ИД = "00000000-0000-0000-0000-000000000000" Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			Иначе
				Характеристика = оду_Общий.СсылкаПоСтруктуре(Стр.Характеристика);
			КонецЕсли; 
			
			Если Характеристика = Неопределено Тогда
				ЕстьОшибка = Истина;  
				Ошибка = "Не удалось найти Характеристику";
				Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
			КонецЕсли; 
			
			СтрУпаковка = Стр.Упаковка;
			Если СтрУпаковка.ИД = "00000000-0000-0000-0000-000000000000" Тогда
				Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();	
			Иначе
				Упаковка = СоотвУпаковки.Получить(СтрУпаковка.ИД);
			КонецЕсли; 
			
			
			Нстр = ТЗ.Добавить();
			Нстр.Номенклатура = Номенклатура;
			Нстр.Упаковка = Упаковка;
			Нстр.ИД_Упаковки = СтрУпаковка.ИД;
			Нстр.Характеристика = Характеристика;
			Нстр.Цена = Стр.Цена;
			
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат ТЗ;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
	КонецПопытки; 
	
КонецФункции 

Функция ТаблицаАктуальныхЦен(ТЗ, ВидЦены, ПериодСреза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.Упаковка КАК Упаковка,
		|	ТЗ.ИД_Упаковки КАК ИД_Упаковки,
		|	ТЗ.Характеристика КАК Характеристика,
		|	ТЗ.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ДанныеУТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ВТ_ДанныеУТ.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеУТ.Упаковка КАК Упаковка,
		|	ВТ_ДанныеУТ.ИД_Упаковки КАК ИД_Упаковки,
		|	ВТ_ДанныеУТ.Характеристика КАК Характеристика,
		|	ВТ_ДанныеУТ.Цена КАК ЦенаУТ,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТ_Связь
		|ИЗ
		|	ВТ_ДанныеУТ КАК ВТ_ДанныеУТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодСреза, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ_ДанныеУТ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		//|			И ВТ_ДанныеУТ.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка
		|			И ВТ_ДанныеУТ.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ВТ_Связь.Номенклатура КАК Номенклатура,
		|	ВТ_Связь.Упаковка КАК Упаковка,
		|	ВТ_Связь.ИД_Упаковки КАК ИД_Упаковки,
		|	ВТ_Связь.Характеристика КАК Характеристика,
		|	ВТ_Связь.ЦенаУТ КАК ЦенаУТ,
		|	ВТ_Связь.Цена КАК Цена
		|ИЗ
		|	ВТ_Связь КАК ВТ_Связь
		|ГДЕ
		|	ВТ_Связь.ЦенаУТ <> ВТ_Связь.Цена";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	Возврат ВДЗ; 
	
КонецФункции 

Функция ОбработатьВыборкуЦен(ИмяЗапроса, ВыборкаДанных, СоотвУпаковки)
	
	Попытка
		
		МассивДанных = Новый Массив;
					    
		Пока ВыборкаДанных.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			
			СтруктураДанных.Вставить("Номенклатура", оду_Общий.СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
			СтруктураДанных.Вставить("Характеристика", оду_Общий.СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
			СтруктураДанных.Вставить("Упаковка", Новый Структура("ИмяТипаСсылки, ИД, ПоляПоиска", "CatalogRef.УпаковкиНоменклатуры", ВыборкаДанных.ИД_Упаковки, ""));
			
			СтруктураДанных.Вставить("Цена", ВыборкаДанных.Цена);
			
			МассивДанных.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		Возврат  МассивДанных;
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
		Возврат  Ошибка;
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти
 

#Область  оду_Общий

Функция ДанныеПроизвольногоЗапросаИзСтруктуры(СтруктураПараметров)  Экспорт
	
	Если СтруктураПараметров.ИмяФайлаЗапроса <> "" Тогда
		//Если СтруктураПараметров.serializeXDTO = Истина Тогда
			ТелоЗапроса = оду_Общий.ПрочитатьJSON_ИзТела_Сериализ(, СтруктураПараметров.ИмяФайлаЗапроса);
			Если ТелоЗапроса = Неопределено Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка чтения файла";
				Сообщение.Сообщить(); 	
				Возврат Неопределено;
				
			КонецЕсли; 
			
			ДанныеЗапроса = ТелоЗапроса.ДанныеЗапроса;
		//КонецЕсли; 	
		
	//ИначеЕсли  СтруктураПараметров.ТекстЗапроса <> "" Тогда
	
	ИначеЕсли  ТипЗнч(СтруктураПараметров.ДанныеЗапроса) = Тип("ХранилищеЗначения") Тогда 
		ДанныеЗапроса = СтруктураПараметров.ДанныеЗапроса.Получить();
		Возврат  ДанныеЗапроса;
	КонецЕсли; 
	
КонецФункции 

#КонецОбласти

